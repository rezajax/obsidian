/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __commonJS = (cb, mod) => function __require() {
  return mod || (0, cb[__getOwnPropNames(cb)[0]])((mod = { exports: {} }).exports, mod), mod.exports;
};
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// node_modules/jalaali-js/index.js
var require_jalaali_js = __commonJS({
  "node_modules/jalaali-js/index.js"(exports, module2) {
    module2.exports = {
      toJalaali: toJalaali5,
      toGregorian: toGregorian5,
      isValidJalaaliDate,
      isLeapJalaaliYear,
      jalaaliMonthLength: jalaaliMonthLength4,
      jalCal,
      j2d,
      d2j,
      g2d,
      d2g,
      jalaaliToDateObject,
      jalaaliWeek
    };
    var breaks = [
      -61,
      9,
      38,
      199,
      426,
      686,
      756,
      818,
      1111,
      1181,
      1210,
      1635,
      2060,
      2097,
      2192,
      2262,
      2324,
      2394,
      2456,
      3178
    ];
    function toJalaali5(gy, gm, gd) {
      if (Object.prototype.toString.call(gy) === "[object Date]") {
        gd = gy.getDate();
        gm = gy.getMonth() + 1;
        gy = gy.getFullYear();
      }
      return d2j(g2d(gy, gm, gd));
    }
    function toGregorian5(jy, jm, jd) {
      return d2g(j2d(jy, jm, jd));
    }
    function isValidJalaaliDate(jy, jm, jd) {
      return jy >= -61 && jy <= 3177 && jm >= 1 && jm <= 12 && jd >= 1 && jd <= jalaaliMonthLength4(jy, jm);
    }
    function isLeapJalaaliYear(jy) {
      return jalCalLeap(jy) === 0;
    }
    function jalaaliMonthLength4(jy, jm) {
      if (jm <= 6)
        return 31;
      if (jm <= 11)
        return 30;
      if (isLeapJalaaliYear(jy))
        return 30;
      return 29;
    }
    function jalCalLeap(jy) {
      var bl = breaks.length, jp = breaks[0], jm, jump, leap, n, i;
      if (jy < jp || jy >= breaks[bl - 1])
        throw new Error("Invalid Jalaali year " + jy);
      for (i = 1; i < bl; i += 1) {
        jm = breaks[i];
        jump = jm - jp;
        if (jy < jm)
          break;
        jp = jm;
      }
      n = jy - jp;
      if (jump - n < 6)
        n = n - jump + div(jump + 4, 33) * 33;
      leap = mod(mod(n + 1, 33) - 1, 4);
      if (leap === -1) {
        leap = 4;
      }
      return leap;
    }
    function jalCal(jy, withoutLeap) {
      var bl = breaks.length, gy = jy + 621, leapJ = -14, jp = breaks[0], jm, jump, leap, leapG, march, n, i;
      if (jy < jp || jy >= breaks[bl - 1])
        throw new Error("Invalid Jalaali year " + jy);
      for (i = 1; i < bl; i += 1) {
        jm = breaks[i];
        jump = jm - jp;
        if (jy < jm)
          break;
        leapJ = leapJ + div(jump, 33) * 8 + div(mod(jump, 33), 4);
        jp = jm;
      }
      n = jy - jp;
      leapJ = leapJ + div(n, 33) * 8 + div(mod(n, 33) + 3, 4);
      if (mod(jump, 33) === 4 && jump - n === 4)
        leapJ += 1;
      leapG = div(gy, 4) - div((div(gy, 100) + 1) * 3, 4) - 150;
      march = 20 + leapJ - leapG;
      if (withoutLeap)
        return { gy, march };
      if (jump - n < 6)
        n = n - jump + div(jump + 4, 33) * 33;
      leap = mod(mod(n + 1, 33) - 1, 4);
      if (leap === -1) {
        leap = 4;
      }
      return {
        leap,
        gy,
        march
      };
    }
    function j2d(jy, jm, jd) {
      var r = jalCal(jy, true);
      return g2d(r.gy, 3, r.march) + (jm - 1) * 31 - div(jm, 7) * (jm - 7) + jd - 1;
    }
    function d2j(jdn) {
      var gy = d2g(jdn).gy, jy = gy - 621, r = jalCal(jy, false), jdn1f = g2d(gy, 3, r.march), jd, jm, k;
      k = jdn - jdn1f;
      if (k >= 0) {
        if (k <= 185) {
          jm = 1 + div(k, 31);
          jd = mod(k, 31) + 1;
          return {
            jy,
            jm,
            jd
          };
        } else {
          k -= 186;
        }
      } else {
        jy -= 1;
        k += 179;
        if (r.leap === 1)
          k += 1;
      }
      jm = 7 + div(k, 30);
      jd = mod(k, 30) + 1;
      return {
        jy,
        jm,
        jd
      };
    }
    function g2d(gy, gm, gd) {
      var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * mod(gm + 9, 12) + 2, 5) + gd - 34840408;
      d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;
      return d;
    }
    function d2g(jdn) {
      var j, i, gd, gm, gy;
      j = 4 * jdn + 139361631;
      j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908;
      i = div(mod(j, 1461), 4) * 5 + 308;
      gd = div(mod(i, 153), 5) + 1;
      gm = mod(div(i, 153), 12) + 1;
      gy = div(j, 1461) - 100100 + div(8 - gm, 6);
      return {
        gy,
        gm,
        gd
      };
    }
    function jalaaliWeek(jy, jm, jd) {
      var dayOfWeek = jalaaliToDateObject(jy, jm, jd).getDay();
      var startDayDifference = dayOfWeek == 6 ? 0 : -(dayOfWeek + 1);
      var endDayDifference = 6 + startDayDifference;
      return {
        saturday: d2j(j2d(jy, jm, jd + startDayDifference)),
        friday: d2j(j2d(jy, jm, jd + endDayDifference))
      };
    }
    function jalaaliToDateObject(jy, jm, jd, h, m, s, ms) {
      var gregorianCalenderDate = toGregorian5(jy, jm, jd);
      return new Date(
        gregorianCalenderDate.gy,
        gregorianCalenderDate.gm - 1,
        gregorianCalenderDate.gd,
        h || 0,
        m || 0,
        s || 0,
        ms || 0
      );
    }
    function div(a, b) {
      return ~~(a / b);
    }
    function mod(a, b) {
      return a - ~~(a / b) * b;
    }
  }
});

// node_modules/moment/moment.js
var require_moment = __commonJS({
  "node_modules/moment/moment.js"(exports, module2) {
    (function(global, factory) {
      typeof exports === "object" && typeof module2 !== "undefined" ? module2.exports = factory() : typeof define === "function" && define.amd ? define(factory) : global.moment = factory();
    })(exports, function() {
      "use strict";
      var hookCallback;
      function hooks() {
        return hookCallback.apply(null, arguments);
      }
      function setHookCallback(callback) {
        hookCallback = callback;
      }
      function isArray(input) {
        return input instanceof Array || Object.prototype.toString.call(input) === "[object Array]";
      }
      function isObject(input) {
        return input != null && Object.prototype.toString.call(input) === "[object Object]";
      }
      function hasOwnProp(a, b) {
        return Object.prototype.hasOwnProperty.call(a, b);
      }
      function isObjectEmpty(obj) {
        if (Object.getOwnPropertyNames) {
          return Object.getOwnPropertyNames(obj).length === 0;
        } else {
          var k;
          for (k in obj) {
            if (hasOwnProp(obj, k)) {
              return false;
            }
          }
          return true;
        }
      }
      function isUndefined(input) {
        return input === void 0;
      }
      function isNumber(input) {
        return typeof input === "number" || Object.prototype.toString.call(input) === "[object Number]";
      }
      function isDate(input) {
        return input instanceof Date || Object.prototype.toString.call(input) === "[object Date]";
      }
      function map(arr, fn) {
        var res = [], i, arrLen = arr.length;
        for (i = 0; i < arrLen; ++i) {
          res.push(fn(arr[i], i));
        }
        return res;
      }
      function extend(a, b) {
        for (var i in b) {
          if (hasOwnProp(b, i)) {
            a[i] = b[i];
          }
        }
        if (hasOwnProp(b, "toString")) {
          a.toString = b.toString;
        }
        if (hasOwnProp(b, "valueOf")) {
          a.valueOf = b.valueOf;
        }
        return a;
      }
      function createUTC(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, true).utc();
      }
      function defaultParsingFlags() {
        return {
          empty: false,
          unusedTokens: [],
          unusedInput: [],
          overflow: -2,
          charsLeftOver: 0,
          nullInput: false,
          invalidEra: null,
          invalidMonth: null,
          invalidFormat: false,
          userInvalidated: false,
          iso: false,
          parsedDateParts: [],
          era: null,
          meridiem: null,
          rfc2822: false,
          weekdayMismatch: false
        };
      }
      function getParsingFlags(m) {
        if (m._pf == null) {
          m._pf = defaultParsingFlags();
        }
        return m._pf;
      }
      var some;
      if (Array.prototype.some) {
        some = Array.prototype.some;
      } else {
        some = function(fun) {
          var t = Object(this), len = t.length >>> 0, i;
          for (i = 0; i < len; i++) {
            if (i in t && fun.call(this, t[i], i, t)) {
              return true;
            }
          }
          return false;
        };
      }
      function isValid(m) {
        var flags = null, parsedParts = false, isNowValid = m._d && !isNaN(m._d.getTime());
        if (isNowValid) {
          flags = getParsingFlags(m);
          parsedParts = some.call(flags.parsedDateParts, function(i) {
            return i != null;
          });
          isNowValid = flags.overflow < 0 && !flags.empty && !flags.invalidEra && !flags.invalidMonth && !flags.invalidWeekday && !flags.weekdayMismatch && !flags.nullInput && !flags.invalidFormat && !flags.userInvalidated && (!flags.meridiem || flags.meridiem && parsedParts);
          if (m._strict) {
            isNowValid = isNowValid && flags.charsLeftOver === 0 && flags.unusedTokens.length === 0 && flags.bigHour === void 0;
          }
        }
        if (Object.isFrozen == null || !Object.isFrozen(m)) {
          m._isValid = isNowValid;
        } else {
          return isNowValid;
        }
        return m._isValid;
      }
      function createInvalid(flags) {
        var m = createUTC(NaN);
        if (flags != null) {
          extend(getParsingFlags(m), flags);
        } else {
          getParsingFlags(m).userInvalidated = true;
        }
        return m;
      }
      var momentProperties = hooks.momentProperties = [], updateInProgress = false;
      function copyConfig(to2, from2) {
        var i, prop, val, momentPropertiesLen = momentProperties.length;
        if (!isUndefined(from2._isAMomentObject)) {
          to2._isAMomentObject = from2._isAMomentObject;
        }
        if (!isUndefined(from2._i)) {
          to2._i = from2._i;
        }
        if (!isUndefined(from2._f)) {
          to2._f = from2._f;
        }
        if (!isUndefined(from2._l)) {
          to2._l = from2._l;
        }
        if (!isUndefined(from2._strict)) {
          to2._strict = from2._strict;
        }
        if (!isUndefined(from2._tzm)) {
          to2._tzm = from2._tzm;
        }
        if (!isUndefined(from2._isUTC)) {
          to2._isUTC = from2._isUTC;
        }
        if (!isUndefined(from2._offset)) {
          to2._offset = from2._offset;
        }
        if (!isUndefined(from2._pf)) {
          to2._pf = getParsingFlags(from2);
        }
        if (!isUndefined(from2._locale)) {
          to2._locale = from2._locale;
        }
        if (momentPropertiesLen > 0) {
          for (i = 0; i < momentPropertiesLen; i++) {
            prop = momentProperties[i];
            val = from2[prop];
            if (!isUndefined(val)) {
              to2[prop] = val;
            }
          }
        }
        return to2;
      }
      function Moment(config) {
        copyConfig(this, config);
        this._d = new Date(config._d != null ? config._d.getTime() : NaN);
        if (!this.isValid()) {
          this._d = new Date(NaN);
        }
        if (updateInProgress === false) {
          updateInProgress = true;
          hooks.updateOffset(this);
          updateInProgress = false;
        }
      }
      function isMoment(obj) {
        return obj instanceof Moment || obj != null && obj._isAMomentObject != null;
      }
      function warn(msg) {
        if (hooks.suppressDeprecationWarnings === false && typeof console !== "undefined" && console.warn) {
          console.warn("Deprecation warning: " + msg);
        }
      }
      function deprecate(msg, fn) {
        var firstTime = true;
        return extend(function() {
          if (hooks.deprecationHandler != null) {
            hooks.deprecationHandler(null, msg);
          }
          if (firstTime) {
            var args = [], arg, i, key, argLen = arguments.length;
            for (i = 0; i < argLen; i++) {
              arg = "";
              if (typeof arguments[i] === "object") {
                arg += "\n[" + i + "] ";
                for (key in arguments[0]) {
                  if (hasOwnProp(arguments[0], key)) {
                    arg += key + ": " + arguments[0][key] + ", ";
                  }
                }
                arg = arg.slice(0, -2);
              } else {
                arg = arguments[i];
              }
              args.push(arg);
            }
            warn(
              msg + "\nArguments: " + Array.prototype.slice.call(args).join("") + "\n" + new Error().stack
            );
            firstTime = false;
          }
          return fn.apply(this, arguments);
        }, fn);
      }
      var deprecations = {};
      function deprecateSimple(name, msg) {
        if (hooks.deprecationHandler != null) {
          hooks.deprecationHandler(name, msg);
        }
        if (!deprecations[name]) {
          warn(msg);
          deprecations[name] = true;
        }
      }
      hooks.suppressDeprecationWarnings = false;
      hooks.deprecationHandler = null;
      function isFunction(input) {
        return typeof Function !== "undefined" && input instanceof Function || Object.prototype.toString.call(input) === "[object Function]";
      }
      function set(config) {
        var prop, i;
        for (i in config) {
          if (hasOwnProp(config, i)) {
            prop = config[i];
            if (isFunction(prop)) {
              this[i] = prop;
            } else {
              this["_" + i] = prop;
            }
          }
        }
        this._config = config;
        this._dayOfMonthOrdinalParseLenient = new RegExp(
          (this._dayOfMonthOrdinalParse.source || this._ordinalParse.source) + "|" + /\d{1,2}/.source
        );
      }
      function mergeConfigs(parentConfig, childConfig) {
        var res = extend({}, parentConfig), prop;
        for (prop in childConfig) {
          if (hasOwnProp(childConfig, prop)) {
            if (isObject(parentConfig[prop]) && isObject(childConfig[prop])) {
              res[prop] = {};
              extend(res[prop], parentConfig[prop]);
              extend(res[prop], childConfig[prop]);
            } else if (childConfig[prop] != null) {
              res[prop] = childConfig[prop];
            } else {
              delete res[prop];
            }
          }
        }
        for (prop in parentConfig) {
          if (hasOwnProp(parentConfig, prop) && !hasOwnProp(childConfig, prop) && isObject(parentConfig[prop])) {
            res[prop] = extend({}, res[prop]);
          }
        }
        return res;
      }
      function Locale(config) {
        if (config != null) {
          this.set(config);
        }
      }
      var keys;
      if (Object.keys) {
        keys = Object.keys;
      } else {
        keys = function(obj) {
          var i, res = [];
          for (i in obj) {
            if (hasOwnProp(obj, i)) {
              res.push(i);
            }
          }
          return res;
        };
      }
      var defaultCalendar = {
        sameDay: "[Today at] LT",
        nextDay: "[Tomorrow at] LT",
        nextWeek: "dddd [at] LT",
        lastDay: "[Yesterday at] LT",
        lastWeek: "[Last] dddd [at] LT",
        sameElse: "L"
      };
      function calendar(key, mom, now2) {
        var output = this._calendar[key] || this._calendar["sameElse"];
        return isFunction(output) ? output.call(mom, now2) : output;
      }
      function zeroFill(number, targetLength, forceSign) {
        var absNumber = "" + Math.abs(number), zerosToFill = targetLength - absNumber.length, sign2 = number >= 0;
        return (sign2 ? forceSign ? "+" : "" : "-") + Math.pow(10, Math.max(0, zerosToFill)).toString().substr(1) + absNumber;
      }
      var formattingTokens = /(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, formatFunctions = {}, formatTokenFunctions = {};
      function addFormatToken(token2, padded, ordinal2, callback) {
        var func = callback;
        if (typeof callback === "string") {
          func = function() {
            return this[callback]();
          };
        }
        if (token2) {
          formatTokenFunctions[token2] = func;
        }
        if (padded) {
          formatTokenFunctions[padded[0]] = function() {
            return zeroFill(func.apply(this, arguments), padded[1], padded[2]);
          };
        }
        if (ordinal2) {
          formatTokenFunctions[ordinal2] = function() {
            return this.localeData().ordinal(
              func.apply(this, arguments),
              token2
            );
          };
        }
      }
      function removeFormattingTokens(input) {
        if (input.match(/\[[\s\S]/)) {
          return input.replace(/^\[|\]$/g, "");
        }
        return input.replace(/\\/g, "");
      }
      function makeFormatFunction(format2) {
        var array = format2.match(formattingTokens), i, length;
        for (i = 0, length = array.length; i < length; i++) {
          if (formatTokenFunctions[array[i]]) {
            array[i] = formatTokenFunctions[array[i]];
          } else {
            array[i] = removeFormattingTokens(array[i]);
          }
        }
        return function(mom) {
          var output = "", i2;
          for (i2 = 0; i2 < length; i2++) {
            output += isFunction(array[i2]) ? array[i2].call(mom, format2) : array[i2];
          }
          return output;
        };
      }
      function formatMoment(m, format2) {
        if (!m.isValid()) {
          return m.localeData().invalidDate();
        }
        format2 = expandFormat(format2, m.localeData());
        formatFunctions[format2] = formatFunctions[format2] || makeFormatFunction(format2);
        return formatFunctions[format2](m);
      }
      function expandFormat(format2, locale2) {
        var i = 5;
        function replaceLongDateFormatTokens(input) {
          return locale2.longDateFormat(input) || input;
        }
        localFormattingTokens.lastIndex = 0;
        while (i >= 0 && localFormattingTokens.test(format2)) {
          format2 = format2.replace(
            localFormattingTokens,
            replaceLongDateFormatTokens
          );
          localFormattingTokens.lastIndex = 0;
          i -= 1;
        }
        return format2;
      }
      var defaultLongDateFormat = {
        LTS: "h:mm:ss A",
        LT: "h:mm A",
        L: "MM/DD/YYYY",
        LL: "MMMM D, YYYY",
        LLL: "MMMM D, YYYY h:mm A",
        LLLL: "dddd, MMMM D, YYYY h:mm A"
      };
      function longDateFormat(key) {
        var format2 = this._longDateFormat[key], formatUpper = this._longDateFormat[key.toUpperCase()];
        if (format2 || !formatUpper) {
          return format2;
        }
        this._longDateFormat[key] = formatUpper.match(formattingTokens).map(function(tok) {
          if (tok === "MMMM" || tok === "MM" || tok === "DD" || tok === "dddd") {
            return tok.slice(1);
          }
          return tok;
        }).join("");
        return this._longDateFormat[key];
      }
      var defaultInvalidDate = "Invalid date";
      function invalidDate() {
        return this._invalidDate;
      }
      var defaultOrdinal = "%d", defaultDayOfMonthOrdinalParse = /\d{1,2}/;
      function ordinal(number) {
        return this._ordinal.replace("%d", number);
      }
      var defaultRelativeTime = {
        future: "in %s",
        past: "%s ago",
        s: "a few seconds",
        ss: "%d seconds",
        m: "a minute",
        mm: "%d minutes",
        h: "an hour",
        hh: "%d hours",
        d: "a day",
        dd: "%d days",
        w: "a week",
        ww: "%d weeks",
        M: "a month",
        MM: "%d months",
        y: "a year",
        yy: "%d years"
      };
      function relativeTime(number, withoutSuffix, string, isFuture) {
        var output = this._relativeTime[string];
        return isFunction(output) ? output(number, withoutSuffix, string, isFuture) : output.replace(/%d/i, number);
      }
      function pastFuture(diff2, output) {
        var format2 = this._relativeTime[diff2 > 0 ? "future" : "past"];
        return isFunction(format2) ? format2(output) : format2.replace(/%s/i, output);
      }
      var aliases = {
        D: "date",
        dates: "date",
        date: "date",
        d: "day",
        days: "day",
        day: "day",
        e: "weekday",
        weekdays: "weekday",
        weekday: "weekday",
        E: "isoWeekday",
        isoweekdays: "isoWeekday",
        isoweekday: "isoWeekday",
        DDD: "dayOfYear",
        dayofyears: "dayOfYear",
        dayofyear: "dayOfYear",
        h: "hour",
        hours: "hour",
        hour: "hour",
        ms: "millisecond",
        milliseconds: "millisecond",
        millisecond: "millisecond",
        m: "minute",
        minutes: "minute",
        minute: "minute",
        M: "month",
        months: "month",
        month: "month",
        Q: "quarter",
        quarters: "quarter",
        quarter: "quarter",
        s: "second",
        seconds: "second",
        second: "second",
        gg: "weekYear",
        weekyears: "weekYear",
        weekyear: "weekYear",
        GG: "isoWeekYear",
        isoweekyears: "isoWeekYear",
        isoweekyear: "isoWeekYear",
        w: "week",
        weeks: "week",
        week: "week",
        W: "isoWeek",
        isoweeks: "isoWeek",
        isoweek: "isoWeek",
        y: "year",
        years: "year",
        year: "year"
      };
      function normalizeUnits(units) {
        return typeof units === "string" ? aliases[units] || aliases[units.toLowerCase()] : void 0;
      }
      function normalizeObjectUnits(inputObject) {
        var normalizedInput = {}, normalizedProp, prop;
        for (prop in inputObject) {
          if (hasOwnProp(inputObject, prop)) {
            normalizedProp = normalizeUnits(prop);
            if (normalizedProp) {
              normalizedInput[normalizedProp] = inputObject[prop];
            }
          }
        }
        return normalizedInput;
      }
      var priorities = {
        date: 9,
        day: 11,
        weekday: 11,
        isoWeekday: 11,
        dayOfYear: 4,
        hour: 13,
        millisecond: 16,
        minute: 14,
        month: 8,
        quarter: 7,
        second: 15,
        weekYear: 1,
        isoWeekYear: 1,
        week: 5,
        isoWeek: 5,
        year: 1
      };
      function getPrioritizedUnits(unitsObj) {
        var units = [], u;
        for (u in unitsObj) {
          if (hasOwnProp(unitsObj, u)) {
            units.push({ unit: u, priority: priorities[u] });
          }
        }
        units.sort(function(a, b) {
          return a.priority - b.priority;
        });
        return units;
      }
      var match1 = /\d/, match2 = /\d\d/, match3 = /\d{3}/, match4 = /\d{4}/, match6 = /[+-]?\d{6}/, match1to2 = /\d\d?/, match3to4 = /\d\d\d\d?/, match5to6 = /\d\d\d\d\d\d?/, match1to3 = /\d{1,3}/, match1to4 = /\d{1,4}/, match1to6 = /[+-]?\d{1,6}/, matchUnsigned = /\d+/, matchSigned = /[+-]?\d+/, matchOffset = /Z|[+-]\d\d:?\d\d/gi, matchShortOffset = /Z|[+-]\d\d(?::?\d\d)?/gi, matchTimestamp = /[+-]?\d+(\.\d{1,3})?/, matchWord = /[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i, match1to2NoLeadingZero = /^[1-9]\d?/, match1to2HasZero = /^([1-9]\d|\d)/, regexes;
      regexes = {};
      function addRegexToken(token2, regex, strictRegex) {
        regexes[token2] = isFunction(regex) ? regex : function(isStrict, localeData2) {
          return isStrict && strictRegex ? strictRegex : regex;
        };
      }
      function getParseRegexForToken(token2, config) {
        if (!hasOwnProp(regexes, token2)) {
          return new RegExp(unescapeFormat(token2));
        }
        return regexes[token2](config._strict, config._locale);
      }
      function unescapeFormat(s) {
        return regexEscape(
          s.replace("\\", "").replace(
            /\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,
            function(matched, p1, p2, p3, p4) {
              return p1 || p2 || p3 || p4;
            }
          )
        );
      }
      function regexEscape(s) {
        return s.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&");
      }
      function absFloor(number) {
        if (number < 0) {
          return Math.ceil(number) || 0;
        } else {
          return Math.floor(number);
        }
      }
      function toInt(argumentForCoercion) {
        var coercedNumber = +argumentForCoercion, value = 0;
        if (coercedNumber !== 0 && isFinite(coercedNumber)) {
          value = absFloor(coercedNumber);
        }
        return value;
      }
      var tokens = {};
      function addParseToken(token2, callback) {
        var i, func = callback, tokenLen;
        if (typeof token2 === "string") {
          token2 = [token2];
        }
        if (isNumber(callback)) {
          func = function(input, array) {
            array[callback] = toInt(input);
          };
        }
        tokenLen = token2.length;
        for (i = 0; i < tokenLen; i++) {
          tokens[token2[i]] = func;
        }
      }
      function addWeekParseToken(token2, callback) {
        addParseToken(token2, function(input, array, config, token3) {
          config._w = config._w || {};
          callback(input, config._w, config, token3);
        });
      }
      function addTimeToArrayFromToken(token2, input, config) {
        if (input != null && hasOwnProp(tokens, token2)) {
          tokens[token2](input, config._a, config, token2);
        }
      }
      function isLeapYear(year) {
        return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;
      }
      var YEAR = 0, MONTH = 1, DATE = 2, HOUR = 3, MINUTE = 4, SECOND = 5, MILLISECOND = 6, WEEK = 7, WEEKDAY = 8;
      addFormatToken("Y", 0, 0, function() {
        var y = this.year();
        return y <= 9999 ? zeroFill(y, 4) : "+" + y;
      });
      addFormatToken(0, ["YY", 2], 0, function() {
        return this.year() % 100;
      });
      addFormatToken(0, ["YYYY", 4], 0, "year");
      addFormatToken(0, ["YYYYY", 5], 0, "year");
      addFormatToken(0, ["YYYYYY", 6, true], 0, "year");
      addRegexToken("Y", matchSigned);
      addRegexToken("YY", match1to2, match2);
      addRegexToken("YYYY", match1to4, match4);
      addRegexToken("YYYYY", match1to6, match6);
      addRegexToken("YYYYYY", match1to6, match6);
      addParseToken(["YYYYY", "YYYYYY"], YEAR);
      addParseToken("YYYY", function(input, array) {
        array[YEAR] = input.length === 2 ? hooks.parseTwoDigitYear(input) : toInt(input);
      });
      addParseToken("YY", function(input, array) {
        array[YEAR] = hooks.parseTwoDigitYear(input);
      });
      addParseToken("Y", function(input, array) {
        array[YEAR] = parseInt(input, 10);
      });
      function daysInYear(year) {
        return isLeapYear(year) ? 366 : 365;
      }
      hooks.parseTwoDigitYear = function(input) {
        return toInt(input) + (toInt(input) > 68 ? 1900 : 2e3);
      };
      var getSetYear = makeGetSet("FullYear", true);
      function getIsLeapYear() {
        return isLeapYear(this.year());
      }
      function makeGetSet(unit, keepTime) {
        return function(value) {
          if (value != null) {
            set$1(this, unit, value);
            hooks.updateOffset(this, keepTime);
            return this;
          } else {
            return get(this, unit);
          }
        };
      }
      function get(mom, unit) {
        if (!mom.isValid()) {
          return NaN;
        }
        var d = mom._d, isUTC = mom._isUTC;
        switch (unit) {
          case "Milliseconds":
            return isUTC ? d.getUTCMilliseconds() : d.getMilliseconds();
          case "Seconds":
            return isUTC ? d.getUTCSeconds() : d.getSeconds();
          case "Minutes":
            return isUTC ? d.getUTCMinutes() : d.getMinutes();
          case "Hours":
            return isUTC ? d.getUTCHours() : d.getHours();
          case "Date":
            return isUTC ? d.getUTCDate() : d.getDate();
          case "Day":
            return isUTC ? d.getUTCDay() : d.getDay();
          case "Month":
            return isUTC ? d.getUTCMonth() : d.getMonth();
          case "FullYear":
            return isUTC ? d.getUTCFullYear() : d.getFullYear();
          default:
            return NaN;
        }
      }
      function set$1(mom, unit, value) {
        var d, isUTC, year, month, date;
        if (!mom.isValid() || isNaN(value)) {
          return;
        }
        d = mom._d;
        isUTC = mom._isUTC;
        switch (unit) {
          case "Milliseconds":
            return void (isUTC ? d.setUTCMilliseconds(value) : d.setMilliseconds(value));
          case "Seconds":
            return void (isUTC ? d.setUTCSeconds(value) : d.setSeconds(value));
          case "Minutes":
            return void (isUTC ? d.setUTCMinutes(value) : d.setMinutes(value));
          case "Hours":
            return void (isUTC ? d.setUTCHours(value) : d.setHours(value));
          case "Date":
            return void (isUTC ? d.setUTCDate(value) : d.setDate(value));
          case "FullYear":
            break;
          default:
            return;
        }
        year = value;
        month = mom.month();
        date = mom.date();
        date = date === 29 && month === 1 && !isLeapYear(year) ? 28 : date;
        void (isUTC ? d.setUTCFullYear(year, month, date) : d.setFullYear(year, month, date));
      }
      function stringGet(units) {
        units = normalizeUnits(units);
        if (isFunction(this[units])) {
          return this[units]();
        }
        return this;
      }
      function stringSet(units, value) {
        if (typeof units === "object") {
          units = normalizeObjectUnits(units);
          var prioritized = getPrioritizedUnits(units), i, prioritizedLen = prioritized.length;
          for (i = 0; i < prioritizedLen; i++) {
            this[prioritized[i].unit](units[prioritized[i].unit]);
          }
        } else {
          units = normalizeUnits(units);
          if (isFunction(this[units])) {
            return this[units](value);
          }
        }
        return this;
      }
      function mod(n, x) {
        return (n % x + x) % x;
      }
      var indexOf;
      if (Array.prototype.indexOf) {
        indexOf = Array.prototype.indexOf;
      } else {
        indexOf = function(o) {
          var i;
          for (i = 0; i < this.length; ++i) {
            if (this[i] === o) {
              return i;
            }
          }
          return -1;
        };
      }
      function daysInMonth(year, month) {
        if (isNaN(year) || isNaN(month)) {
          return NaN;
        }
        var modMonth = mod(month, 12);
        year += (month - modMonth) / 12;
        return modMonth === 1 ? isLeapYear(year) ? 29 : 28 : 31 - modMonth % 7 % 2;
      }
      addFormatToken("M", ["MM", 2], "Mo", function() {
        return this.month() + 1;
      });
      addFormatToken("MMM", 0, 0, function(format2) {
        return this.localeData().monthsShort(this, format2);
      });
      addFormatToken("MMMM", 0, 0, function(format2) {
        return this.localeData().months(this, format2);
      });
      addRegexToken("M", match1to2, match1to2NoLeadingZero);
      addRegexToken("MM", match1to2, match2);
      addRegexToken("MMM", function(isStrict, locale2) {
        return locale2.monthsShortRegex(isStrict);
      });
      addRegexToken("MMMM", function(isStrict, locale2) {
        return locale2.monthsRegex(isStrict);
      });
      addParseToken(["M", "MM"], function(input, array) {
        array[MONTH] = toInt(input) - 1;
      });
      addParseToken(["MMM", "MMMM"], function(input, array, config, token2) {
        var month = config._locale.monthsParse(input, token2, config._strict);
        if (month != null) {
          array[MONTH] = month;
        } else {
          getParsingFlags(config).invalidMonth = input;
        }
      });
      var defaultLocaleMonths = "January_February_March_April_May_June_July_August_September_October_November_December".split(
        "_"
      ), defaultLocaleMonthsShort = "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), MONTHS_IN_FORMAT = /D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/, defaultMonthsShortRegex = matchWord, defaultMonthsRegex = matchWord;
      function localeMonths(m, format2) {
        if (!m) {
          return isArray(this._months) ? this._months : this._months["standalone"];
        }
        return isArray(this._months) ? this._months[m.month()] : this._months[(this._months.isFormat || MONTHS_IN_FORMAT).test(format2) ? "format" : "standalone"][m.month()];
      }
      function localeMonthsShort(m, format2) {
        if (!m) {
          return isArray(this._monthsShort) ? this._monthsShort : this._monthsShort["standalone"];
        }
        return isArray(this._monthsShort) ? this._monthsShort[m.month()] : this._monthsShort[MONTHS_IN_FORMAT.test(format2) ? "format" : "standalone"][m.month()];
      }
      function handleStrictParse(monthName, format2, strict) {
        var i, ii, mom, llc = monthName.toLocaleLowerCase();
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
          for (i = 0; i < 12; ++i) {
            mom = createUTC([2e3, i]);
            this._shortMonthsParse[i] = this.monthsShort(
              mom,
              ""
            ).toLocaleLowerCase();
            this._longMonthsParse[i] = this.months(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === "MMM") {
            ii = indexOf.call(this._shortMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._longMonthsParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._longMonthsParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortMonthsParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeMonthsParse(monthName, format2, strict) {
        var i, mom, regex;
        if (this._monthsParseExact) {
          return handleStrictParse.call(this, monthName, format2, strict);
        }
        if (!this._monthsParse) {
          this._monthsParse = [];
          this._longMonthsParse = [];
          this._shortMonthsParse = [];
        }
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          if (strict && !this._longMonthsParse[i]) {
            this._longMonthsParse[i] = new RegExp(
              "^" + this.months(mom, "").replace(".", "") + "$",
              "i"
            );
            this._shortMonthsParse[i] = new RegExp(
              "^" + this.monthsShort(mom, "").replace(".", "") + "$",
              "i"
            );
          }
          if (!strict && !this._monthsParse[i]) {
            regex = "^" + this.months(mom, "") + "|^" + this.monthsShort(mom, "");
            this._monthsParse[i] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "MMMM" && this._longMonthsParse[i].test(monthName)) {
            return i;
          } else if (strict && format2 === "MMM" && this._shortMonthsParse[i].test(monthName)) {
            return i;
          } else if (!strict && this._monthsParse[i].test(monthName)) {
            return i;
          }
        }
      }
      function setMonth(mom, value) {
        if (!mom.isValid()) {
          return mom;
        }
        if (typeof value === "string") {
          if (/^\d+$/.test(value)) {
            value = toInt(value);
          } else {
            value = mom.localeData().monthsParse(value);
            if (!isNumber(value)) {
              return mom;
            }
          }
        }
        var month = value, date = mom.date();
        date = date < 29 ? date : Math.min(date, daysInMonth(mom.year(), month));
        void (mom._isUTC ? mom._d.setUTCMonth(month, date) : mom._d.setMonth(month, date));
        return mom;
      }
      function getSetMonth(value) {
        if (value != null) {
          setMonth(this, value);
          hooks.updateOffset(this, true);
          return this;
        } else {
          return get(this, "Month");
        }
      }
      function getDaysInMonth() {
        return daysInMonth(this.year(), this.month());
      }
      function monthsShortRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsShortStrictRegex;
          } else {
            return this._monthsShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsShortRegex")) {
            this._monthsShortRegex = defaultMonthsShortRegex;
          }
          return this._monthsShortStrictRegex && isStrict ? this._monthsShortStrictRegex : this._monthsShortRegex;
        }
      }
      function monthsRegex(isStrict) {
        if (this._monthsParseExact) {
          if (!hasOwnProp(this, "_monthsRegex")) {
            computeMonthsParse.call(this);
          }
          if (isStrict) {
            return this._monthsStrictRegex;
          } else {
            return this._monthsRegex;
          }
        } else {
          if (!hasOwnProp(this, "_monthsRegex")) {
            this._monthsRegex = defaultMonthsRegex;
          }
          return this._monthsStrictRegex && isStrict ? this._monthsStrictRegex : this._monthsRegex;
        }
      }
      function computeMonthsParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var shortPieces = [], longPieces = [], mixedPieces = [], i, mom, shortP, longP;
        for (i = 0; i < 12; i++) {
          mom = createUTC([2e3, i]);
          shortP = regexEscape(this.monthsShort(mom, ""));
          longP = regexEscape(this.months(mom, ""));
          shortPieces.push(shortP);
          longPieces.push(longP);
          mixedPieces.push(longP);
          mixedPieces.push(shortP);
        }
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._monthsRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._monthsShortRegex = this._monthsRegex;
        this._monthsStrictRegex = new RegExp(
          "^(" + longPieces.join("|") + ")",
          "i"
        );
        this._monthsShortStrictRegex = new RegExp(
          "^(" + shortPieces.join("|") + ")",
          "i"
        );
      }
      function createDate(y, m, d, h, M, s, ms) {
        var date;
        if (y < 100 && y >= 0) {
          date = new Date(y + 400, m, d, h, M, s, ms);
          if (isFinite(date.getFullYear())) {
            date.setFullYear(y);
          }
        } else {
          date = new Date(y, m, d, h, M, s, ms);
        }
        return date;
      }
      function createUTCDate(y) {
        var date, args;
        if (y < 100 && y >= 0) {
          args = Array.prototype.slice.call(arguments);
          args[0] = y + 400;
          date = new Date(Date.UTC.apply(null, args));
          if (isFinite(date.getUTCFullYear())) {
            date.setUTCFullYear(y);
          }
        } else {
          date = new Date(Date.UTC.apply(null, arguments));
        }
        return date;
      }
      function firstWeekOffset(year, dow, doy) {
        var fwd = 7 + dow - doy, fwdlw = (7 + createUTCDate(year, 0, fwd).getUTCDay() - dow) % 7;
        return -fwdlw + fwd - 1;
      }
      function dayOfYearFromWeeks(year, week, weekday, dow, doy) {
        var localWeekday = (7 + weekday - dow) % 7, weekOffset = firstWeekOffset(year, dow, doy), dayOfYear = 1 + 7 * (week - 1) + localWeekday + weekOffset, resYear, resDayOfYear;
        if (dayOfYear <= 0) {
          resYear = year - 1;
          resDayOfYear = daysInYear(resYear) + dayOfYear;
        } else if (dayOfYear > daysInYear(year)) {
          resYear = year + 1;
          resDayOfYear = dayOfYear - daysInYear(year);
        } else {
          resYear = year;
          resDayOfYear = dayOfYear;
        }
        return {
          year: resYear,
          dayOfYear: resDayOfYear
        };
      }
      function weekOfYear(mom, dow, doy) {
        var weekOffset = firstWeekOffset(mom.year(), dow, doy), week = Math.floor((mom.dayOfYear() - weekOffset - 1) / 7) + 1, resWeek, resYear;
        if (week < 1) {
          resYear = mom.year() - 1;
          resWeek = week + weeksInYear(resYear, dow, doy);
        } else if (week > weeksInYear(mom.year(), dow, doy)) {
          resWeek = week - weeksInYear(mom.year(), dow, doy);
          resYear = mom.year() + 1;
        } else {
          resYear = mom.year();
          resWeek = week;
        }
        return {
          week: resWeek,
          year: resYear
        };
      }
      function weeksInYear(year, dow, doy) {
        var weekOffset = firstWeekOffset(year, dow, doy), weekOffsetNext = firstWeekOffset(year + 1, dow, doy);
        return (daysInYear(year) - weekOffset + weekOffsetNext) / 7;
      }
      addFormatToken("w", ["ww", 2], "wo", "week");
      addFormatToken("W", ["WW", 2], "Wo", "isoWeek");
      addRegexToken("w", match1to2, match1to2NoLeadingZero);
      addRegexToken("ww", match1to2, match2);
      addRegexToken("W", match1to2, match1to2NoLeadingZero);
      addRegexToken("WW", match1to2, match2);
      addWeekParseToken(
        ["w", "ww", "W", "WW"],
        function(input, week, config, token2) {
          week[token2.substr(0, 1)] = toInt(input);
        }
      );
      function localeWeek(mom) {
        return weekOfYear(mom, this._week.dow, this._week.doy).week;
      }
      var defaultLocaleWeek = {
        dow: 0,
        // Sunday is the first day of the week.
        doy: 6
        // The week that contains Jan 6th is the first week of the year.
      };
      function localeFirstDayOfWeek() {
        return this._week.dow;
      }
      function localeFirstDayOfYear() {
        return this._week.doy;
      }
      function getSetWeek(input) {
        var week = this.localeData().week(this);
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      function getSetISOWeek(input) {
        var week = weekOfYear(this, 1, 4).week;
        return input == null ? week : this.add((input - week) * 7, "d");
      }
      addFormatToken("d", 0, "do", "day");
      addFormatToken("dd", 0, 0, function(format2) {
        return this.localeData().weekdaysMin(this, format2);
      });
      addFormatToken("ddd", 0, 0, function(format2) {
        return this.localeData().weekdaysShort(this, format2);
      });
      addFormatToken("dddd", 0, 0, function(format2) {
        return this.localeData().weekdays(this, format2);
      });
      addFormatToken("e", 0, 0, "weekday");
      addFormatToken("E", 0, 0, "isoWeekday");
      addRegexToken("d", match1to2);
      addRegexToken("e", match1to2);
      addRegexToken("E", match1to2);
      addRegexToken("dd", function(isStrict, locale2) {
        return locale2.weekdaysMinRegex(isStrict);
      });
      addRegexToken("ddd", function(isStrict, locale2) {
        return locale2.weekdaysShortRegex(isStrict);
      });
      addRegexToken("dddd", function(isStrict, locale2) {
        return locale2.weekdaysRegex(isStrict);
      });
      addWeekParseToken(["dd", "ddd", "dddd"], function(input, week, config, token2) {
        var weekday = config._locale.weekdaysParse(input, token2, config._strict);
        if (weekday != null) {
          week.d = weekday;
        } else {
          getParsingFlags(config).invalidWeekday = input;
        }
      });
      addWeekParseToken(["d", "e", "E"], function(input, week, config, token2) {
        week[token2] = toInt(input);
      });
      function parseWeekday(input, locale2) {
        if (typeof input !== "string") {
          return input;
        }
        if (!isNaN(input)) {
          return parseInt(input, 10);
        }
        input = locale2.weekdaysParse(input);
        if (typeof input === "number") {
          return input;
        }
        return null;
      }
      function parseIsoWeekday(input, locale2) {
        if (typeof input === "string") {
          return locale2.weekdaysParse(input) % 7 || 7;
        }
        return isNaN(input) ? null : input;
      }
      function shiftWeekdays(ws, n) {
        return ws.slice(n, 7).concat(ws.slice(0, n));
      }
      var defaultLocaleWeekdays = "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), defaultLocaleWeekdaysShort = "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), defaultLocaleWeekdaysMin = "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), defaultWeekdaysRegex = matchWord, defaultWeekdaysShortRegex = matchWord, defaultWeekdaysMinRegex = matchWord;
      function localeWeekdays(m, format2) {
        var weekdays = isArray(this._weekdays) ? this._weekdays : this._weekdays[m && m !== true && this._weekdays.isFormat.test(format2) ? "format" : "standalone"];
        return m === true ? shiftWeekdays(weekdays, this._week.dow) : m ? weekdays[m.day()] : weekdays;
      }
      function localeWeekdaysShort(m) {
        return m === true ? shiftWeekdays(this._weekdaysShort, this._week.dow) : m ? this._weekdaysShort[m.day()] : this._weekdaysShort;
      }
      function localeWeekdaysMin(m) {
        return m === true ? shiftWeekdays(this._weekdaysMin, this._week.dow) : m ? this._weekdaysMin[m.day()] : this._weekdaysMin;
      }
      function handleStrictParse$1(weekdayName, format2, strict) {
        var i, ii, mom, llc = weekdayName.toLocaleLowerCase();
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._minWeekdaysParse = [];
          for (i = 0; i < 7; ++i) {
            mom = createUTC([2e3, 1]).day(i);
            this._minWeekdaysParse[i] = this.weekdaysMin(
              mom,
              ""
            ).toLocaleLowerCase();
            this._shortWeekdaysParse[i] = this.weekdaysShort(
              mom,
              ""
            ).toLocaleLowerCase();
            this._weekdaysParse[i] = this.weekdays(mom, "").toLocaleLowerCase();
          }
        }
        if (strict) {
          if (format2 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        } else {
          if (format2 === "dddd") {
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else if (format2 === "ddd") {
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._minWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          } else {
            ii = indexOf.call(this._minWeekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._weekdaysParse, llc);
            if (ii !== -1) {
              return ii;
            }
            ii = indexOf.call(this._shortWeekdaysParse, llc);
            return ii !== -1 ? ii : null;
          }
        }
      }
      function localeWeekdaysParse(weekdayName, format2, strict) {
        var i, mom, regex;
        if (this._weekdaysParseExact) {
          return handleStrictParse$1.call(this, weekdayName, format2, strict);
        }
        if (!this._weekdaysParse) {
          this._weekdaysParse = [];
          this._minWeekdaysParse = [];
          this._shortWeekdaysParse = [];
          this._fullWeekdaysParse = [];
        }
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          if (strict && !this._fullWeekdaysParse[i]) {
            this._fullWeekdaysParse[i] = new RegExp(
              "^" + this.weekdays(mom, "").replace(".", "\\.?") + "$",
              "i"
            );
            this._shortWeekdaysParse[i] = new RegExp(
              "^" + this.weekdaysShort(mom, "").replace(".", "\\.?") + "$",
              "i"
            );
            this._minWeekdaysParse[i] = new RegExp(
              "^" + this.weekdaysMin(mom, "").replace(".", "\\.?") + "$",
              "i"
            );
          }
          if (!this._weekdaysParse[i]) {
            regex = "^" + this.weekdays(mom, "") + "|^" + this.weekdaysShort(mom, "") + "|^" + this.weekdaysMin(mom, "");
            this._weekdaysParse[i] = new RegExp(regex.replace(".", ""), "i");
          }
          if (strict && format2 === "dddd" && this._fullWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format2 === "ddd" && this._shortWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (strict && format2 === "dd" && this._minWeekdaysParse[i].test(weekdayName)) {
            return i;
          } else if (!strict && this._weekdaysParse[i].test(weekdayName)) {
            return i;
          }
        }
      }
      function getSetDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var day = get(this, "Day");
        if (input != null) {
          input = parseWeekday(input, this.localeData());
          return this.add(input - day, "d");
        } else {
          return day;
        }
      }
      function getSetLocaleDayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        var weekday = (this.day() + 7 - this.localeData()._week.dow) % 7;
        return input == null ? weekday : this.add(input - weekday, "d");
      }
      function getSetISODayOfWeek(input) {
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          var weekday = parseIsoWeekday(input, this.localeData());
          return this.day(this.day() % 7 ? weekday : weekday - 7);
        } else {
          return this.day() || 7;
        }
      }
      function weekdaysRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysStrictRegex;
          } else {
            return this._weekdaysRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            this._weekdaysRegex = defaultWeekdaysRegex;
          }
          return this._weekdaysStrictRegex && isStrict ? this._weekdaysStrictRegex : this._weekdaysRegex;
        }
      }
      function weekdaysShortRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysShortStrictRegex;
          } else {
            return this._weekdaysShortRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysShortRegex")) {
            this._weekdaysShortRegex = defaultWeekdaysShortRegex;
          }
          return this._weekdaysShortStrictRegex && isStrict ? this._weekdaysShortStrictRegex : this._weekdaysShortRegex;
        }
      }
      function weekdaysMinRegex(isStrict) {
        if (this._weekdaysParseExact) {
          if (!hasOwnProp(this, "_weekdaysRegex")) {
            computeWeekdaysParse.call(this);
          }
          if (isStrict) {
            return this._weekdaysMinStrictRegex;
          } else {
            return this._weekdaysMinRegex;
          }
        } else {
          if (!hasOwnProp(this, "_weekdaysMinRegex")) {
            this._weekdaysMinRegex = defaultWeekdaysMinRegex;
          }
          return this._weekdaysMinStrictRegex && isStrict ? this._weekdaysMinStrictRegex : this._weekdaysMinRegex;
        }
      }
      function computeWeekdaysParse() {
        function cmpLenRev(a, b) {
          return b.length - a.length;
        }
        var minPieces = [], shortPieces = [], longPieces = [], mixedPieces = [], i, mom, minp, shortp, longp;
        for (i = 0; i < 7; i++) {
          mom = createUTC([2e3, 1]).day(i);
          minp = regexEscape(this.weekdaysMin(mom, ""));
          shortp = regexEscape(this.weekdaysShort(mom, ""));
          longp = regexEscape(this.weekdays(mom, ""));
          minPieces.push(minp);
          shortPieces.push(shortp);
          longPieces.push(longp);
          mixedPieces.push(minp);
          mixedPieces.push(shortp);
          mixedPieces.push(longp);
        }
        minPieces.sort(cmpLenRev);
        shortPieces.sort(cmpLenRev);
        longPieces.sort(cmpLenRev);
        mixedPieces.sort(cmpLenRev);
        this._weekdaysRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._weekdaysShortRegex = this._weekdaysRegex;
        this._weekdaysMinRegex = this._weekdaysRegex;
        this._weekdaysStrictRegex = new RegExp(
          "^(" + longPieces.join("|") + ")",
          "i"
        );
        this._weekdaysShortStrictRegex = new RegExp(
          "^(" + shortPieces.join("|") + ")",
          "i"
        );
        this._weekdaysMinStrictRegex = new RegExp(
          "^(" + minPieces.join("|") + ")",
          "i"
        );
      }
      function hFormat() {
        return this.hours() % 12 || 12;
      }
      function kFormat() {
        return this.hours() || 24;
      }
      addFormatToken("H", ["HH", 2], 0, "hour");
      addFormatToken("h", ["hh", 2], 0, hFormat);
      addFormatToken("k", ["kk", 2], 0, kFormat);
      addFormatToken("hmm", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2);
      });
      addFormatToken("hmmss", 0, 0, function() {
        return "" + hFormat.apply(this) + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      addFormatToken("Hmm", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2);
      });
      addFormatToken("Hmmss", 0, 0, function() {
        return "" + this.hours() + zeroFill(this.minutes(), 2) + zeroFill(this.seconds(), 2);
      });
      function meridiem(token2, lowercase) {
        addFormatToken(token2, 0, 0, function() {
          return this.localeData().meridiem(
            this.hours(),
            this.minutes(),
            lowercase
          );
        });
      }
      meridiem("a", true);
      meridiem("A", false);
      function matchMeridiem(isStrict, locale2) {
        return locale2._meridiemParse;
      }
      addRegexToken("a", matchMeridiem);
      addRegexToken("A", matchMeridiem);
      addRegexToken("H", match1to2, match1to2HasZero);
      addRegexToken("h", match1to2, match1to2NoLeadingZero);
      addRegexToken("k", match1to2, match1to2NoLeadingZero);
      addRegexToken("HH", match1to2, match2);
      addRegexToken("hh", match1to2, match2);
      addRegexToken("kk", match1to2, match2);
      addRegexToken("hmm", match3to4);
      addRegexToken("hmmss", match5to6);
      addRegexToken("Hmm", match3to4);
      addRegexToken("Hmmss", match5to6);
      addParseToken(["H", "HH"], HOUR);
      addParseToken(["k", "kk"], function(input, array, config) {
        var kInput = toInt(input);
        array[HOUR] = kInput === 24 ? 0 : kInput;
      });
      addParseToken(["a", "A"], function(input, array, config) {
        config._isPm = config._locale.isPM(input);
        config._meridiem = input;
      });
      addParseToken(["h", "hh"], function(input, array, config) {
        array[HOUR] = toInt(input);
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
        getParsingFlags(config).bigHour = true;
      });
      addParseToken("Hmm", function(input, array, config) {
        var pos = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos));
        array[MINUTE] = toInt(input.substr(pos));
      });
      addParseToken("Hmmss", function(input, array, config) {
        var pos1 = input.length - 4, pos2 = input.length - 2;
        array[HOUR] = toInt(input.substr(0, pos1));
        array[MINUTE] = toInt(input.substr(pos1, 2));
        array[SECOND] = toInt(input.substr(pos2));
      });
      function localeIsPM(input) {
        return (input + "").toLowerCase().charAt(0) === "p";
      }
      var defaultLocaleMeridiemParse = /[ap]\.?m?\.?/i, getSetHour = makeGetSet("Hours", true);
      function localeMeridiem(hours2, minutes2, isLower) {
        if (hours2 > 11) {
          return isLower ? "pm" : "PM";
        } else {
          return isLower ? "am" : "AM";
        }
      }
      var baseConfig = {
        calendar: defaultCalendar,
        longDateFormat: defaultLongDateFormat,
        invalidDate: defaultInvalidDate,
        ordinal: defaultOrdinal,
        dayOfMonthOrdinalParse: defaultDayOfMonthOrdinalParse,
        relativeTime: defaultRelativeTime,
        months: defaultLocaleMonths,
        monthsShort: defaultLocaleMonthsShort,
        week: defaultLocaleWeek,
        weekdays: defaultLocaleWeekdays,
        weekdaysMin: defaultLocaleWeekdaysMin,
        weekdaysShort: defaultLocaleWeekdaysShort,
        meridiemParse: defaultLocaleMeridiemParse
      };
      var locales = {}, localeFamilies = {}, globalLocale;
      function commonPrefix(arr1, arr2) {
        var i, minl = Math.min(arr1.length, arr2.length);
        for (i = 0; i < minl; i += 1) {
          if (arr1[i] !== arr2[i]) {
            return i;
          }
        }
        return minl;
      }
      function normalizeLocale(key) {
        return key ? key.toLowerCase().replace("_", "-") : key;
      }
      function chooseLocale(names) {
        var i = 0, j, next, locale2, split;
        while (i < names.length) {
          split = normalizeLocale(names[i]).split("-");
          j = split.length;
          next = normalizeLocale(names[i + 1]);
          next = next ? next.split("-") : null;
          while (j > 0) {
            locale2 = loadLocale(split.slice(0, j).join("-"));
            if (locale2) {
              return locale2;
            }
            if (next && next.length >= j && commonPrefix(split, next) >= j - 1) {
              break;
            }
            j--;
          }
          i++;
        }
        return globalLocale;
      }
      function isLocaleNameSane(name) {
        return !!(name && name.match("^[^/\\\\]*$"));
      }
      function loadLocale(name) {
        var oldLocale = null, aliasedRequire;
        if (locales[name] === void 0 && typeof module2 !== "undefined" && module2 && module2.exports && isLocaleNameSane(name)) {
          try {
            oldLocale = globalLocale._abbr;
            aliasedRequire = require;
            aliasedRequire("./locale/" + name);
            getSetGlobalLocale(oldLocale);
          } catch (e) {
            locales[name] = null;
          }
        }
        return locales[name];
      }
      function getSetGlobalLocale(key, values) {
        var data;
        if (key) {
          if (isUndefined(values)) {
            data = getLocale(key);
          } else {
            data = defineLocale(key, values);
          }
          if (data) {
            globalLocale = data;
          } else {
            if (typeof console !== "undefined" && console.warn) {
              console.warn(
                "Locale " + key + " not found. Did you forget to load it?"
              );
            }
          }
        }
        return globalLocale._abbr;
      }
      function defineLocale(name, config) {
        if (config !== null) {
          var locale2, parentConfig = baseConfig;
          config.abbr = name;
          if (locales[name] != null) {
            deprecateSimple(
              "defineLocaleOverride",
              "use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."
            );
            parentConfig = locales[name]._config;
          } else if (config.parentLocale != null) {
            if (locales[config.parentLocale] != null) {
              parentConfig = locales[config.parentLocale]._config;
            } else {
              locale2 = loadLocale(config.parentLocale);
              if (locale2 != null) {
                parentConfig = locale2._config;
              } else {
                if (!localeFamilies[config.parentLocale]) {
                  localeFamilies[config.parentLocale] = [];
                }
                localeFamilies[config.parentLocale].push({
                  name,
                  config
                });
                return null;
              }
            }
          }
          locales[name] = new Locale(mergeConfigs(parentConfig, config));
          if (localeFamilies[name]) {
            localeFamilies[name].forEach(function(x) {
              defineLocale(x.name, x.config);
            });
          }
          getSetGlobalLocale(name);
          return locales[name];
        } else {
          delete locales[name];
          return null;
        }
      }
      function updateLocale(name, config) {
        if (config != null) {
          var locale2, tmpLocale, parentConfig = baseConfig;
          if (locales[name] != null && locales[name].parentLocale != null) {
            locales[name].set(mergeConfigs(locales[name]._config, config));
          } else {
            tmpLocale = loadLocale(name);
            if (tmpLocale != null) {
              parentConfig = tmpLocale._config;
            }
            config = mergeConfigs(parentConfig, config);
            if (tmpLocale == null) {
              config.abbr = name;
            }
            locale2 = new Locale(config);
            locale2.parentLocale = locales[name];
            locales[name] = locale2;
          }
          getSetGlobalLocale(name);
        } else {
          if (locales[name] != null) {
            if (locales[name].parentLocale != null) {
              locales[name] = locales[name].parentLocale;
              if (name === getSetGlobalLocale()) {
                getSetGlobalLocale(name);
              }
            } else if (locales[name] != null) {
              delete locales[name];
            }
          }
        }
        return locales[name];
      }
      function getLocale(key) {
        var locale2;
        if (key && key._locale && key._locale._abbr) {
          key = key._locale._abbr;
        }
        if (!key) {
          return globalLocale;
        }
        if (!isArray(key)) {
          locale2 = loadLocale(key);
          if (locale2) {
            return locale2;
          }
          key = [key];
        }
        return chooseLocale(key);
      }
      function listLocales() {
        return keys(locales);
      }
      function checkOverflow(m) {
        var overflow, a = m._a;
        if (a && getParsingFlags(m).overflow === -2) {
          overflow = a[MONTH] < 0 || a[MONTH] > 11 ? MONTH : a[DATE] < 1 || a[DATE] > daysInMonth(a[YEAR], a[MONTH]) ? DATE : a[HOUR] < 0 || a[HOUR] > 24 || a[HOUR] === 24 && (a[MINUTE] !== 0 || a[SECOND] !== 0 || a[MILLISECOND] !== 0) ? HOUR : a[MINUTE] < 0 || a[MINUTE] > 59 ? MINUTE : a[SECOND] < 0 || a[SECOND] > 59 ? SECOND : a[MILLISECOND] < 0 || a[MILLISECOND] > 999 ? MILLISECOND : -1;
          if (getParsingFlags(m)._overflowDayOfYear && (overflow < YEAR || overflow > DATE)) {
            overflow = DATE;
          }
          if (getParsingFlags(m)._overflowWeeks && overflow === -1) {
            overflow = WEEK;
          }
          if (getParsingFlags(m)._overflowWeekday && overflow === -1) {
            overflow = WEEKDAY;
          }
          getParsingFlags(m).overflow = overflow;
        }
        return m;
      }
      var extendedIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, basicIsoRegex = /^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/, tzRegex = /Z|[+-]\d\d(?::?\d\d)?/, isoDates = [
        ["YYYYYY-MM-DD", /[+-]\d{6}-\d\d-\d\d/],
        ["YYYY-MM-DD", /\d{4}-\d\d-\d\d/],
        ["GGGG-[W]WW-E", /\d{4}-W\d\d-\d/],
        ["GGGG-[W]WW", /\d{4}-W\d\d/, false],
        ["YYYY-DDD", /\d{4}-\d{3}/],
        ["YYYY-MM", /\d{4}-\d\d/, false],
        ["YYYYYYMMDD", /[+-]\d{10}/],
        ["YYYYMMDD", /\d{8}/],
        ["GGGG[W]WWE", /\d{4}W\d{3}/],
        ["GGGG[W]WW", /\d{4}W\d{2}/, false],
        ["YYYYDDD", /\d{7}/],
        ["YYYYMM", /\d{6}/, false],
        ["YYYY", /\d{4}/, false]
      ], isoTimes = [
        ["HH:mm:ss.SSSS", /\d\d:\d\d:\d\d\.\d+/],
        ["HH:mm:ss,SSSS", /\d\d:\d\d:\d\d,\d+/],
        ["HH:mm:ss", /\d\d:\d\d:\d\d/],
        ["HH:mm", /\d\d:\d\d/],
        ["HHmmss.SSSS", /\d\d\d\d\d\d\.\d+/],
        ["HHmmss,SSSS", /\d\d\d\d\d\d,\d+/],
        ["HHmmss", /\d\d\d\d\d\d/],
        ["HHmm", /\d\d\d\d/],
        ["HH", /\d\d/]
      ], aspNetJsonRegex = /^\/?Date\((-?\d+)/i, rfc2822 = /^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/, obsOffsets = {
        UT: 0,
        GMT: 0,
        EDT: -4 * 60,
        EST: -5 * 60,
        CDT: -5 * 60,
        CST: -6 * 60,
        MDT: -6 * 60,
        MST: -7 * 60,
        PDT: -7 * 60,
        PST: -8 * 60
      };
      function configFromISO(config) {
        var i, l, string = config._i, match = extendedIsoRegex.exec(string) || basicIsoRegex.exec(string), allowTime, dateFormat, timeFormat, tzFormat, isoDatesLen = isoDates.length, isoTimesLen = isoTimes.length;
        if (match) {
          getParsingFlags(config).iso = true;
          for (i = 0, l = isoDatesLen; i < l; i++) {
            if (isoDates[i][1].exec(match[1])) {
              dateFormat = isoDates[i][0];
              allowTime = isoDates[i][2] !== false;
              break;
            }
          }
          if (dateFormat == null) {
            config._isValid = false;
            return;
          }
          if (match[3]) {
            for (i = 0, l = isoTimesLen; i < l; i++) {
              if (isoTimes[i][1].exec(match[3])) {
                timeFormat = (match[2] || " ") + isoTimes[i][0];
                break;
              }
            }
            if (timeFormat == null) {
              config._isValid = false;
              return;
            }
          }
          if (!allowTime && timeFormat != null) {
            config._isValid = false;
            return;
          }
          if (match[4]) {
            if (tzRegex.exec(match[4])) {
              tzFormat = "Z";
            } else {
              config._isValid = false;
              return;
            }
          }
          config._f = dateFormat + (timeFormat || "") + (tzFormat || "");
          configFromStringAndFormat(config);
        } else {
          config._isValid = false;
        }
      }
      function extractFromRFC2822Strings(yearStr, monthStr, dayStr, hourStr, minuteStr, secondStr) {
        var result = [
          untruncateYear(yearStr),
          defaultLocaleMonthsShort.indexOf(monthStr),
          parseInt(dayStr, 10),
          parseInt(hourStr, 10),
          parseInt(minuteStr, 10)
        ];
        if (secondStr) {
          result.push(parseInt(secondStr, 10));
        }
        return result;
      }
      function untruncateYear(yearStr) {
        var year = parseInt(yearStr, 10);
        if (year <= 49) {
          return 2e3 + year;
        } else if (year <= 999) {
          return 1900 + year;
        }
        return year;
      }
      function preprocessRFC2822(s) {
        return s.replace(/\([^()]*\)|[\n\t]/g, " ").replace(/(\s\s+)/g, " ").replace(/^\s\s*/, "").replace(/\s\s*$/, "");
      }
      function checkWeekday(weekdayStr, parsedInput, config) {
        if (weekdayStr) {
          var weekdayProvided = defaultLocaleWeekdaysShort.indexOf(weekdayStr), weekdayActual = new Date(
            parsedInput[0],
            parsedInput[1],
            parsedInput[2]
          ).getDay();
          if (weekdayProvided !== weekdayActual) {
            getParsingFlags(config).weekdayMismatch = true;
            config._isValid = false;
            return false;
          }
        }
        return true;
      }
      function calculateOffset(obsOffset, militaryOffset, numOffset) {
        if (obsOffset) {
          return obsOffsets[obsOffset];
        } else if (militaryOffset) {
          return 0;
        } else {
          var hm = parseInt(numOffset, 10), m = hm % 100, h = (hm - m) / 100;
          return h * 60 + m;
        }
      }
      function configFromRFC2822(config) {
        var match = rfc2822.exec(preprocessRFC2822(config._i)), parsedArray;
        if (match) {
          parsedArray = extractFromRFC2822Strings(
            match[4],
            match[3],
            match[2],
            match[5],
            match[6],
            match[7]
          );
          if (!checkWeekday(match[1], parsedArray, config)) {
            return;
          }
          config._a = parsedArray;
          config._tzm = calculateOffset(match[8], match[9], match[10]);
          config._d = createUTCDate.apply(null, config._a);
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
          getParsingFlags(config).rfc2822 = true;
        } else {
          config._isValid = false;
        }
      }
      function configFromString(config) {
        var matched = aspNetJsonRegex.exec(config._i);
        if (matched !== null) {
          config._d = new Date(+matched[1]);
          return;
        }
        configFromISO(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        configFromRFC2822(config);
        if (config._isValid === false) {
          delete config._isValid;
        } else {
          return;
        }
        if (config._strict) {
          config._isValid = false;
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      hooks.createFromInputFallback = deprecate(
        "value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",
        function(config) {
          config._d = new Date(config._i + (config._useUTC ? " UTC" : ""));
        }
      );
      function defaults(a, b, c) {
        if (a != null) {
          return a;
        }
        if (b != null) {
          return b;
        }
        return c;
      }
      function currentDateArray(config) {
        var nowValue = new Date(hooks.now());
        if (config._useUTC) {
          return [
            nowValue.getUTCFullYear(),
            nowValue.getUTCMonth(),
            nowValue.getUTCDate()
          ];
        }
        return [nowValue.getFullYear(), nowValue.getMonth(), nowValue.getDate()];
      }
      function configFromArray(config) {
        var i, date, input = [], currentDate, expectedWeekday, yearToUse;
        if (config._d) {
          return;
        }
        currentDate = currentDateArray(config);
        if (config._w && config._a[DATE] == null && config._a[MONTH] == null) {
          dayOfYearFromWeekInfo(config);
        }
        if (config._dayOfYear != null) {
          yearToUse = defaults(config._a[YEAR], currentDate[YEAR]);
          if (config._dayOfYear > daysInYear(yearToUse) || config._dayOfYear === 0) {
            getParsingFlags(config)._overflowDayOfYear = true;
          }
          date = createUTCDate(yearToUse, 0, config._dayOfYear);
          config._a[MONTH] = date.getUTCMonth();
          config._a[DATE] = date.getUTCDate();
        }
        for (i = 0; i < 3 && config._a[i] == null; ++i) {
          config._a[i] = input[i] = currentDate[i];
        }
        for (; i < 7; i++) {
          config._a[i] = input[i] = config._a[i] == null ? i === 2 ? 1 : 0 : config._a[i];
        }
        if (config._a[HOUR] === 24 && config._a[MINUTE] === 0 && config._a[SECOND] === 0 && config._a[MILLISECOND] === 0) {
          config._nextDay = true;
          config._a[HOUR] = 0;
        }
        config._d = (config._useUTC ? createUTCDate : createDate).apply(
          null,
          input
        );
        expectedWeekday = config._useUTC ? config._d.getUTCDay() : config._d.getDay();
        if (config._tzm != null) {
          config._d.setUTCMinutes(config._d.getUTCMinutes() - config._tzm);
        }
        if (config._nextDay) {
          config._a[HOUR] = 24;
        }
        if (config._w && typeof config._w.d !== "undefined" && config._w.d !== expectedWeekday) {
          getParsingFlags(config).weekdayMismatch = true;
        }
      }
      function dayOfYearFromWeekInfo(config) {
        var w, weekYear, week, weekday, dow, doy, temp, weekdayOverflow, curWeek;
        w = config._w;
        if (w.GG != null || w.W != null || w.E != null) {
          dow = 1;
          doy = 4;
          weekYear = defaults(
            w.GG,
            config._a[YEAR],
            weekOfYear(createLocal(), 1, 4).year
          );
          week = defaults(w.W, 1);
          weekday = defaults(w.E, 1);
          if (weekday < 1 || weekday > 7) {
            weekdayOverflow = true;
          }
        } else {
          dow = config._locale._week.dow;
          doy = config._locale._week.doy;
          curWeek = weekOfYear(createLocal(), dow, doy);
          weekYear = defaults(w.gg, config._a[YEAR], curWeek.year);
          week = defaults(w.w, curWeek.week);
          if (w.d != null) {
            weekday = w.d;
            if (weekday < 0 || weekday > 6) {
              weekdayOverflow = true;
            }
          } else if (w.e != null) {
            weekday = w.e + dow;
            if (w.e < 0 || w.e > 6) {
              weekdayOverflow = true;
            }
          } else {
            weekday = dow;
          }
        }
        if (week < 1 || week > weeksInYear(weekYear, dow, doy)) {
          getParsingFlags(config)._overflowWeeks = true;
        } else if (weekdayOverflow != null) {
          getParsingFlags(config)._overflowWeekday = true;
        } else {
          temp = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy);
          config._a[YEAR] = temp.year;
          config._dayOfYear = temp.dayOfYear;
        }
      }
      hooks.ISO_8601 = function() {
      };
      hooks.RFC_2822 = function() {
      };
      function configFromStringAndFormat(config) {
        if (config._f === hooks.ISO_8601) {
          configFromISO(config);
          return;
        }
        if (config._f === hooks.RFC_2822) {
          configFromRFC2822(config);
          return;
        }
        config._a = [];
        getParsingFlags(config).empty = true;
        var string = "" + config._i, i, parsedInput, tokens2, token2, skipped, stringLength = string.length, totalParsedInputLength = 0, era, tokenLen;
        tokens2 = expandFormat(config._f, config._locale).match(formattingTokens) || [];
        tokenLen = tokens2.length;
        for (i = 0; i < tokenLen; i++) {
          token2 = tokens2[i];
          parsedInput = (string.match(getParseRegexForToken(token2, config)) || [])[0];
          if (parsedInput) {
            skipped = string.substr(0, string.indexOf(parsedInput));
            if (skipped.length > 0) {
              getParsingFlags(config).unusedInput.push(skipped);
            }
            string = string.slice(
              string.indexOf(parsedInput) + parsedInput.length
            );
            totalParsedInputLength += parsedInput.length;
          }
          if (formatTokenFunctions[token2]) {
            if (parsedInput) {
              getParsingFlags(config).empty = false;
            } else {
              getParsingFlags(config).unusedTokens.push(token2);
            }
            addTimeToArrayFromToken(token2, parsedInput, config);
          } else if (config._strict && !parsedInput) {
            getParsingFlags(config).unusedTokens.push(token2);
          }
        }
        getParsingFlags(config).charsLeftOver = stringLength - totalParsedInputLength;
        if (string.length > 0) {
          getParsingFlags(config).unusedInput.push(string);
        }
        if (config._a[HOUR] <= 12 && getParsingFlags(config).bigHour === true && config._a[HOUR] > 0) {
          getParsingFlags(config).bigHour = void 0;
        }
        getParsingFlags(config).parsedDateParts = config._a.slice(0);
        getParsingFlags(config).meridiem = config._meridiem;
        config._a[HOUR] = meridiemFixWrap(
          config._locale,
          config._a[HOUR],
          config._meridiem
        );
        era = getParsingFlags(config).era;
        if (era !== null) {
          config._a[YEAR] = config._locale.erasConvertYear(era, config._a[YEAR]);
        }
        configFromArray(config);
        checkOverflow(config);
      }
      function meridiemFixWrap(locale2, hour, meridiem2) {
        var isPm;
        if (meridiem2 == null) {
          return hour;
        }
        if (locale2.meridiemHour != null) {
          return locale2.meridiemHour(hour, meridiem2);
        } else if (locale2.isPM != null) {
          isPm = locale2.isPM(meridiem2);
          if (isPm && hour < 12) {
            hour += 12;
          }
          if (!isPm && hour === 12) {
            hour = 0;
          }
          return hour;
        } else {
          return hour;
        }
      }
      function configFromStringAndArray(config) {
        var tempConfig, bestMoment, scoreToBeat, i, currentScore, validFormatFound, bestFormatIsValid = false, configfLen = config._f.length;
        if (configfLen === 0) {
          getParsingFlags(config).invalidFormat = true;
          config._d = new Date(NaN);
          return;
        }
        for (i = 0; i < configfLen; i++) {
          currentScore = 0;
          validFormatFound = false;
          tempConfig = copyConfig({}, config);
          if (config._useUTC != null) {
            tempConfig._useUTC = config._useUTC;
          }
          tempConfig._f = config._f[i];
          configFromStringAndFormat(tempConfig);
          if (isValid(tempConfig)) {
            validFormatFound = true;
          }
          currentScore += getParsingFlags(tempConfig).charsLeftOver;
          currentScore += getParsingFlags(tempConfig).unusedTokens.length * 10;
          getParsingFlags(tempConfig).score = currentScore;
          if (!bestFormatIsValid) {
            if (scoreToBeat == null || currentScore < scoreToBeat || validFormatFound) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
              if (validFormatFound) {
                bestFormatIsValid = true;
              }
            }
          } else {
            if (currentScore < scoreToBeat) {
              scoreToBeat = currentScore;
              bestMoment = tempConfig;
            }
          }
        }
        extend(config, bestMoment || tempConfig);
      }
      function configFromObject(config) {
        if (config._d) {
          return;
        }
        var i = normalizeObjectUnits(config._i), dayOrDate = i.day === void 0 ? i.date : i.day;
        config._a = map(
          [i.year, i.month, dayOrDate, i.hour, i.minute, i.second, i.millisecond],
          function(obj) {
            return obj && parseInt(obj, 10);
          }
        );
        configFromArray(config);
      }
      function createFromConfig(config) {
        var res = new Moment(checkOverflow(prepareConfig(config)));
        if (res._nextDay) {
          res.add(1, "d");
          res._nextDay = void 0;
        }
        return res;
      }
      function prepareConfig(config) {
        var input = config._i, format2 = config._f;
        config._locale = config._locale || getLocale(config._l);
        if (input === null || format2 === void 0 && input === "") {
          return createInvalid({ nullInput: true });
        }
        if (typeof input === "string") {
          config._i = input = config._locale.preparse(input);
        }
        if (isMoment(input)) {
          return new Moment(checkOverflow(input));
        } else if (isDate(input)) {
          config._d = input;
        } else if (isArray(format2)) {
          configFromStringAndArray(config);
        } else if (format2) {
          configFromStringAndFormat(config);
        } else {
          configFromInput(config);
        }
        if (!isValid(config)) {
          config._d = null;
        }
        return config;
      }
      function configFromInput(config) {
        var input = config._i;
        if (isUndefined(input)) {
          config._d = new Date(hooks.now());
        } else if (isDate(input)) {
          config._d = new Date(input.valueOf());
        } else if (typeof input === "string") {
          configFromString(config);
        } else if (isArray(input)) {
          config._a = map(input.slice(0), function(obj) {
            return parseInt(obj, 10);
          });
          configFromArray(config);
        } else if (isObject(input)) {
          configFromObject(config);
        } else if (isNumber(input)) {
          config._d = new Date(input);
        } else {
          hooks.createFromInputFallback(config);
        }
      }
      function createLocalOrUTC(input, format2, locale2, strict, isUTC) {
        var c = {};
        if (format2 === true || format2 === false) {
          strict = format2;
          format2 = void 0;
        }
        if (locale2 === true || locale2 === false) {
          strict = locale2;
          locale2 = void 0;
        }
        if (isObject(input) && isObjectEmpty(input) || isArray(input) && input.length === 0) {
          input = void 0;
        }
        c._isAMomentObject = true;
        c._useUTC = c._isUTC = isUTC;
        c._l = locale2;
        c._i = input;
        c._f = format2;
        c._strict = strict;
        return createFromConfig(c);
      }
      function createLocal(input, format2, locale2, strict) {
        return createLocalOrUTC(input, format2, locale2, strict, false);
      }
      var prototypeMin = deprecate(
        "moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",
        function() {
          var other = createLocal.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
            return other < this ? this : other;
          } else {
            return createInvalid();
          }
        }
      ), prototypeMax = deprecate(
        "moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",
        function() {
          var other = createLocal.apply(null, arguments);
          if (this.isValid() && other.isValid()) {
            return other > this ? this : other;
          } else {
            return createInvalid();
          }
        }
      );
      function pickBy(fn, moments) {
        var res, i;
        if (moments.length === 1 && isArray(moments[0])) {
          moments = moments[0];
        }
        if (!moments.length) {
          return createLocal();
        }
        res = moments[0];
        for (i = 1; i < moments.length; ++i) {
          if (!moments[i].isValid() || moments[i][fn](res)) {
            res = moments[i];
          }
        }
        return res;
      }
      function min() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isBefore", args);
      }
      function max() {
        var args = [].slice.call(arguments, 0);
        return pickBy("isAfter", args);
      }
      var now = function() {
        return Date.now ? Date.now() : +new Date();
      };
      var ordering = [
        "year",
        "quarter",
        "month",
        "week",
        "day",
        "hour",
        "minute",
        "second",
        "millisecond"
      ];
      function isDurationValid(m) {
        var key, unitHasDecimal = false, i, orderLen = ordering.length;
        for (key in m) {
          if (hasOwnProp(m, key) && !(indexOf.call(ordering, key) !== -1 && (m[key] == null || !isNaN(m[key])))) {
            return false;
          }
        }
        for (i = 0; i < orderLen; ++i) {
          if (m[ordering[i]]) {
            if (unitHasDecimal) {
              return false;
            }
            if (parseFloat(m[ordering[i]]) !== toInt(m[ordering[i]])) {
              unitHasDecimal = true;
            }
          }
        }
        return true;
      }
      function isValid$1() {
        return this._isValid;
      }
      function createInvalid$1() {
        return createDuration(NaN);
      }
      function Duration(duration) {
        var normalizedInput = normalizeObjectUnits(duration), years2 = normalizedInput.year || 0, quarters = normalizedInput.quarter || 0, months2 = normalizedInput.month || 0, weeks2 = normalizedInput.week || normalizedInput.isoWeek || 0, days2 = normalizedInput.day || 0, hours2 = normalizedInput.hour || 0, minutes2 = normalizedInput.minute || 0, seconds2 = normalizedInput.second || 0, milliseconds2 = normalizedInput.millisecond || 0;
        this._isValid = isDurationValid(normalizedInput);
        this._milliseconds = +milliseconds2 + seconds2 * 1e3 + // 1000
        minutes2 * 6e4 + // 1000 * 60
        hours2 * 1e3 * 60 * 60;
        this._days = +days2 + weeks2 * 7;
        this._months = +months2 + quarters * 3 + years2 * 12;
        this._data = {};
        this._locale = getLocale();
        this._bubble();
      }
      function isDuration(obj) {
        return obj instanceof Duration;
      }
      function absRound(number) {
        if (number < 0) {
          return Math.round(-1 * number) * -1;
        } else {
          return Math.round(number);
        }
      }
      function compareArrays(array1, array2, dontConvert) {
        var len = Math.min(array1.length, array2.length), lengthDiff = Math.abs(array1.length - array2.length), diffs = 0, i;
        for (i = 0; i < len; i++) {
          if (dontConvert && array1[i] !== array2[i] || !dontConvert && toInt(array1[i]) !== toInt(array2[i])) {
            diffs++;
          }
        }
        return diffs + lengthDiff;
      }
      function offset(token2, separator) {
        addFormatToken(token2, 0, 0, function() {
          var offset2 = this.utcOffset(), sign2 = "+";
          if (offset2 < 0) {
            offset2 = -offset2;
            sign2 = "-";
          }
          return sign2 + zeroFill(~~(offset2 / 60), 2) + separator + zeroFill(~~offset2 % 60, 2);
        });
      }
      offset("Z", ":");
      offset("ZZ", "");
      addRegexToken("Z", matchShortOffset);
      addRegexToken("ZZ", matchShortOffset);
      addParseToken(["Z", "ZZ"], function(input, array, config) {
        config._useUTC = true;
        config._tzm = offsetFromString(matchShortOffset, input);
      });
      var chunkOffset = /([\+\-]|\d\d)/gi;
      function offsetFromString(matcher, string) {
        var matches = (string || "").match(matcher), chunk, parts, minutes2;
        if (matches === null) {
          return null;
        }
        chunk = matches[matches.length - 1] || [];
        parts = (chunk + "").match(chunkOffset) || ["-", 0, 0];
        minutes2 = +(parts[1] * 60) + toInt(parts[2]);
        return minutes2 === 0 ? 0 : parts[0] === "+" ? minutes2 : -minutes2;
      }
      function cloneWithOffset(input, model) {
        var res, diff2;
        if (model._isUTC) {
          res = model.clone();
          diff2 = (isMoment(input) || isDate(input) ? input.valueOf() : createLocal(input).valueOf()) - res.valueOf();
          res._d.setTime(res._d.valueOf() + diff2);
          hooks.updateOffset(res, false);
          return res;
        } else {
          return createLocal(input).local();
        }
      }
      function getDateOffset(m) {
        return -Math.round(m._d.getTimezoneOffset());
      }
      hooks.updateOffset = function() {
      };
      function getSetOffset(input, keepLocalTime, keepMinutes) {
        var offset2 = this._offset || 0, localAdjust;
        if (!this.isValid()) {
          return input != null ? this : NaN;
        }
        if (input != null) {
          if (typeof input === "string") {
            input = offsetFromString(matchShortOffset, input);
            if (input === null) {
              return this;
            }
          } else if (Math.abs(input) < 16 && !keepMinutes) {
            input = input * 60;
          }
          if (!this._isUTC && keepLocalTime) {
            localAdjust = getDateOffset(this);
          }
          this._offset = input;
          this._isUTC = true;
          if (localAdjust != null) {
            this.add(localAdjust, "m");
          }
          if (offset2 !== input) {
            if (!keepLocalTime || this._changeInProgress) {
              addSubtract(
                this,
                createDuration(input - offset2, "m"),
                1,
                false
              );
            } else if (!this._changeInProgress) {
              this._changeInProgress = true;
              hooks.updateOffset(this, true);
              this._changeInProgress = null;
            }
          }
          return this;
        } else {
          return this._isUTC ? offset2 : getDateOffset(this);
        }
      }
      function getSetZone(input, keepLocalTime) {
        if (input != null) {
          if (typeof input !== "string") {
            input = -input;
          }
          this.utcOffset(input, keepLocalTime);
          return this;
        } else {
          return -this.utcOffset();
        }
      }
      function setOffsetToUTC(keepLocalTime) {
        return this.utcOffset(0, keepLocalTime);
      }
      function setOffsetToLocal(keepLocalTime) {
        if (this._isUTC) {
          this.utcOffset(0, keepLocalTime);
          this._isUTC = false;
          if (keepLocalTime) {
            this.subtract(getDateOffset(this), "m");
          }
        }
        return this;
      }
      function setOffsetToParsedOffset() {
        if (this._tzm != null) {
          this.utcOffset(this._tzm, false, true);
        } else if (typeof this._i === "string") {
          var tZone = offsetFromString(matchOffset, this._i);
          if (tZone != null) {
            this.utcOffset(tZone);
          } else {
            this.utcOffset(0, true);
          }
        }
        return this;
      }
      function hasAlignedHourOffset(input) {
        if (!this.isValid()) {
          return false;
        }
        input = input ? createLocal(input).utcOffset() : 0;
        return (this.utcOffset() - input) % 60 === 0;
      }
      function isDaylightSavingTime() {
        return this.utcOffset() > this.clone().month(0).utcOffset() || this.utcOffset() > this.clone().month(5).utcOffset();
      }
      function isDaylightSavingTimeShifted() {
        if (!isUndefined(this._isDSTShifted)) {
          return this._isDSTShifted;
        }
        var c = {}, other;
        copyConfig(c, this);
        c = prepareConfig(c);
        if (c._a) {
          other = c._isUTC ? createUTC(c._a) : createLocal(c._a);
          this._isDSTShifted = this.isValid() && compareArrays(c._a, other.toArray()) > 0;
        } else {
          this._isDSTShifted = false;
        }
        return this._isDSTShifted;
      }
      function isLocal() {
        return this.isValid() ? !this._isUTC : false;
      }
      function isUtcOffset() {
        return this.isValid() ? this._isUTC : false;
      }
      function isUtc() {
        return this.isValid() ? this._isUTC && this._offset === 0 : false;
      }
      var aspNetRegex = /^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/, isoRegex = /^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;
      function createDuration(input, key) {
        var duration = input, match = null, sign2, ret, diffRes;
        if (isDuration(input)) {
          duration = {
            ms: input._milliseconds,
            d: input._days,
            M: input._months
          };
        } else if (isNumber(input) || !isNaN(+input)) {
          duration = {};
          if (key) {
            duration[key] = +input;
          } else {
            duration.milliseconds = +input;
          }
        } else if (match = aspNetRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: 0,
            d: toInt(match[DATE]) * sign2,
            h: toInt(match[HOUR]) * sign2,
            m: toInt(match[MINUTE]) * sign2,
            s: toInt(match[SECOND]) * sign2,
            ms: toInt(absRound(match[MILLISECOND] * 1e3)) * sign2
            // the millisecond decimal point is included in the match
          };
        } else if (match = isoRegex.exec(input)) {
          sign2 = match[1] === "-" ? -1 : 1;
          duration = {
            y: parseIso(match[2], sign2),
            M: parseIso(match[3], sign2),
            w: parseIso(match[4], sign2),
            d: parseIso(match[5], sign2),
            h: parseIso(match[6], sign2),
            m: parseIso(match[7], sign2),
            s: parseIso(match[8], sign2)
          };
        } else if (duration == null) {
          duration = {};
        } else if (typeof duration === "object" && ("from" in duration || "to" in duration)) {
          diffRes = momentsDifference(
            createLocal(duration.from),
            createLocal(duration.to)
          );
          duration = {};
          duration.ms = diffRes.milliseconds;
          duration.M = diffRes.months;
        }
        ret = new Duration(duration);
        if (isDuration(input) && hasOwnProp(input, "_locale")) {
          ret._locale = input._locale;
        }
        if (isDuration(input) && hasOwnProp(input, "_isValid")) {
          ret._isValid = input._isValid;
        }
        return ret;
      }
      createDuration.fn = Duration.prototype;
      createDuration.invalid = createInvalid$1;
      function parseIso(inp, sign2) {
        var res = inp && parseFloat(inp.replace(",", "."));
        return (isNaN(res) ? 0 : res) * sign2;
      }
      function positiveMomentsDifference(base, other) {
        var res = {};
        res.months = other.month() - base.month() + (other.year() - base.year()) * 12;
        if (base.clone().add(res.months, "M").isAfter(other)) {
          --res.months;
        }
        res.milliseconds = +other - +base.clone().add(res.months, "M");
        return res;
      }
      function momentsDifference(base, other) {
        var res;
        if (!(base.isValid() && other.isValid())) {
          return { milliseconds: 0, months: 0 };
        }
        other = cloneWithOffset(other, base);
        if (base.isBefore(other)) {
          res = positiveMomentsDifference(base, other);
        } else {
          res = positiveMomentsDifference(other, base);
          res.milliseconds = -res.milliseconds;
          res.months = -res.months;
        }
        return res;
      }
      function createAdder(direction, name) {
        return function(val, period) {
          var dur, tmp;
          if (period !== null && !isNaN(+period)) {
            deprecateSimple(
              name,
              "moment()." + name + "(period, number) is deprecated. Please use moment()." + name + "(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."
            );
            tmp = val;
            val = period;
            period = tmp;
          }
          dur = createDuration(val, period);
          addSubtract(this, dur, direction);
          return this;
        };
      }
      function addSubtract(mom, duration, isAdding, updateOffset) {
        var milliseconds2 = duration._milliseconds, days2 = absRound(duration._days), months2 = absRound(duration._months);
        if (!mom.isValid()) {
          return;
        }
        updateOffset = updateOffset == null ? true : updateOffset;
        if (months2) {
          setMonth(mom, get(mom, "Month") + months2 * isAdding);
        }
        if (days2) {
          set$1(mom, "Date", get(mom, "Date") + days2 * isAdding);
        }
        if (milliseconds2) {
          mom._d.setTime(mom._d.valueOf() + milliseconds2 * isAdding);
        }
        if (updateOffset) {
          hooks.updateOffset(mom, days2 || months2);
        }
      }
      var add = createAdder(1, "add"), subtract = createAdder(-1, "subtract");
      function isString(input) {
        return typeof input === "string" || input instanceof String;
      }
      function isMomentInput(input) {
        return isMoment(input) || isDate(input) || isString(input) || isNumber(input) || isNumberOrStringArray(input) || isMomentInputObject(input) || input === null || input === void 0;
      }
      function isMomentInputObject(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "years",
          "year",
          "y",
          "months",
          "month",
          "M",
          "days",
          "day",
          "d",
          "dates",
          "date",
          "D",
          "hours",
          "hour",
          "h",
          "minutes",
          "minute",
          "m",
          "seconds",
          "second",
          "s",
          "milliseconds",
          "millisecond",
          "ms"
        ], i, property, propertyLen = properties.length;
        for (i = 0; i < propertyLen; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function isNumberOrStringArray(input) {
        var arrayTest = isArray(input), dataTypeTest = false;
        if (arrayTest) {
          dataTypeTest = input.filter(function(item) {
            return !isNumber(item) && isString(input);
          }).length === 0;
        }
        return arrayTest && dataTypeTest;
      }
      function isCalendarSpec(input) {
        var objectTest = isObject(input) && !isObjectEmpty(input), propertyTest = false, properties = [
          "sameDay",
          "nextDay",
          "lastDay",
          "nextWeek",
          "lastWeek",
          "sameElse"
        ], i, property;
        for (i = 0; i < properties.length; i += 1) {
          property = properties[i];
          propertyTest = propertyTest || hasOwnProp(input, property);
        }
        return objectTest && propertyTest;
      }
      function getCalendarFormat(myMoment, now2) {
        var diff2 = myMoment.diff(now2, "days", true);
        return diff2 < -6 ? "sameElse" : diff2 < -1 ? "lastWeek" : diff2 < 0 ? "lastDay" : diff2 < 1 ? "sameDay" : diff2 < 2 ? "nextDay" : diff2 < 7 ? "nextWeek" : "sameElse";
      }
      function calendar$1(time, formats) {
        if (arguments.length === 1) {
          if (!arguments[0]) {
            time = void 0;
            formats = void 0;
          } else if (isMomentInput(arguments[0])) {
            time = arguments[0];
            formats = void 0;
          } else if (isCalendarSpec(arguments[0])) {
            formats = arguments[0];
            time = void 0;
          }
        }
        var now2 = time || createLocal(), sod = cloneWithOffset(now2, this).startOf("day"), format2 = hooks.calendarFormat(this, sod) || "sameElse", output = formats && (isFunction(formats[format2]) ? formats[format2].call(this, now2) : formats[format2]);
        return this.format(
          output || this.localeData().calendar(format2, this, createLocal(now2))
        );
      }
      function clone() {
        return new Moment(this);
      }
      function isAfter(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() > localInput.valueOf();
        } else {
          return localInput.valueOf() < this.clone().startOf(units).valueOf();
        }
      }
      function isBefore(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input);
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() < localInput.valueOf();
        } else {
          return this.clone().endOf(units).valueOf() < localInput.valueOf();
        }
      }
      function isBetween(from2, to2, units, inclusivity) {
        var localFrom = isMoment(from2) ? from2 : createLocal(from2), localTo = isMoment(to2) ? to2 : createLocal(to2);
        if (!(this.isValid() && localFrom.isValid() && localTo.isValid())) {
          return false;
        }
        inclusivity = inclusivity || "()";
        return (inclusivity[0] === "(" ? this.isAfter(localFrom, units) : !this.isBefore(localFrom, units)) && (inclusivity[1] === ")" ? this.isBefore(localTo, units) : !this.isAfter(localTo, units));
      }
      function isSame(input, units) {
        var localInput = isMoment(input) ? input : createLocal(input), inputMs;
        if (!(this.isValid() && localInput.isValid())) {
          return false;
        }
        units = normalizeUnits(units) || "millisecond";
        if (units === "millisecond") {
          return this.valueOf() === localInput.valueOf();
        } else {
          inputMs = localInput.valueOf();
          return this.clone().startOf(units).valueOf() <= inputMs && inputMs <= this.clone().endOf(units).valueOf();
        }
      }
      function isSameOrAfter(input, units) {
        return this.isSame(input, units) || this.isAfter(input, units);
      }
      function isSameOrBefore(input, units) {
        return this.isSame(input, units) || this.isBefore(input, units);
      }
      function diff(input, units, asFloat) {
        var that, zoneDelta, output;
        if (!this.isValid()) {
          return NaN;
        }
        that = cloneWithOffset(input, this);
        if (!that.isValid()) {
          return NaN;
        }
        zoneDelta = (that.utcOffset() - this.utcOffset()) * 6e4;
        units = normalizeUnits(units);
        switch (units) {
          case "year":
            output = monthDiff(this, that) / 12;
            break;
          case "month":
            output = monthDiff(this, that);
            break;
          case "quarter":
            output = monthDiff(this, that) / 3;
            break;
          case "second":
            output = (this - that) / 1e3;
            break;
          case "minute":
            output = (this - that) / 6e4;
            break;
          case "hour":
            output = (this - that) / 36e5;
            break;
          case "day":
            output = (this - that - zoneDelta) / 864e5;
            break;
          case "week":
            output = (this - that - zoneDelta) / 6048e5;
            break;
          default:
            output = this - that;
        }
        return asFloat ? output : absFloor(output);
      }
      function monthDiff(a, b) {
        if (a.date() < b.date()) {
          return -monthDiff(b, a);
        }
        var wholeMonthDiff = (b.year() - a.year()) * 12 + (b.month() - a.month()), anchor = a.clone().add(wholeMonthDiff, "months"), anchor2, adjust;
        if (b - anchor < 0) {
          anchor2 = a.clone().add(wholeMonthDiff - 1, "months");
          adjust = (b - anchor) / (anchor - anchor2);
        } else {
          anchor2 = a.clone().add(wholeMonthDiff + 1, "months");
          adjust = (b - anchor) / (anchor2 - anchor);
        }
        return -(wholeMonthDiff + adjust) || 0;
      }
      hooks.defaultFormat = "YYYY-MM-DDTHH:mm:ssZ";
      hooks.defaultFormatUtc = "YYYY-MM-DDTHH:mm:ss[Z]";
      function toString() {
        return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ");
      }
      function toISOString(keepOffset) {
        if (!this.isValid()) {
          return null;
        }
        var utc = keepOffset !== true, m = utc ? this.clone().utc() : this;
        if (m.year() < 0 || m.year() > 9999) {
          return formatMoment(
            m,
            utc ? "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"
          );
        }
        if (isFunction(Date.prototype.toISOString)) {
          if (utc) {
            return this.toDate().toISOString();
          } else {
            return new Date(this.valueOf() + this.utcOffset() * 60 * 1e3).toISOString().replace("Z", formatMoment(m, "Z"));
          }
        }
        return formatMoment(
          m,
          utc ? "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]" : "YYYY-MM-DD[T]HH:mm:ss.SSSZ"
        );
      }
      function inspect() {
        if (!this.isValid()) {
          return "moment.invalid(/* " + this._i + " */)";
        }
        var func = "moment", zone = "", prefix, year, datetime, suffix;
        if (!this.isLocal()) {
          func = this.utcOffset() === 0 ? "moment.utc" : "moment.parseZone";
          zone = "Z";
        }
        prefix = "[" + func + '("]';
        year = 0 <= this.year() && this.year() <= 9999 ? "YYYY" : "YYYYYY";
        datetime = "-MM-DD[T]HH:mm:ss.SSS";
        suffix = zone + '[")]';
        return this.format(prefix + year + datetime + suffix);
      }
      function format(inputString) {
        if (!inputString) {
          inputString = this.isUtc() ? hooks.defaultFormatUtc : hooks.defaultFormat;
        }
        var output = formatMoment(this, inputString);
        return this.localeData().postformat(output);
      }
      function from(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ to: this, from: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function fromNow(withoutSuffix) {
        return this.from(createLocal(), withoutSuffix);
      }
      function to(time, withoutSuffix) {
        if (this.isValid() && (isMoment(time) && time.isValid() || createLocal(time).isValid())) {
          return createDuration({ from: this, to: time }).locale(this.locale()).humanize(!withoutSuffix);
        } else {
          return this.localeData().invalidDate();
        }
      }
      function toNow(withoutSuffix) {
        return this.to(createLocal(), withoutSuffix);
      }
      function locale(key) {
        var newLocaleData;
        if (key === void 0) {
          return this._locale._abbr;
        } else {
          newLocaleData = getLocale(key);
          if (newLocaleData != null) {
            this._locale = newLocaleData;
          }
          return this;
        }
      }
      var lang = deprecate(
        "moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",
        function(key) {
          if (key === void 0) {
            return this.localeData();
          } else {
            return this.locale(key);
          }
        }
      );
      function localeData() {
        return this._locale;
      }
      var MS_PER_SECOND = 1e3, MS_PER_MINUTE = 60 * MS_PER_SECOND, MS_PER_HOUR = 60 * MS_PER_MINUTE, MS_PER_400_YEARS = (365 * 400 + 97) * 24 * MS_PER_HOUR;
      function mod$1(dividend, divisor) {
        return (dividend % divisor + divisor) % divisor;
      }
      function localStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return new Date(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return new Date(y, m, d).valueOf();
        }
      }
      function utcStartOfDate(y, m, d) {
        if (y < 100 && y >= 0) {
          return Date.UTC(y + 400, m, d) - MS_PER_400_YEARS;
        } else {
          return Date.UTC(y, m, d);
        }
      }
      function startOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year(), 0, 1);
            break;
          case "quarter":
            time = startOfDate(
              this.year(),
              this.month() - this.month() % 3,
              1
            );
            break;
          case "month":
            time = startOfDate(this.year(), this.month(), 1);
            break;
          case "week":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - this.weekday()
            );
            break;
          case "isoWeek":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - (this.isoWeekday() - 1)
            );
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date());
            break;
          case "hour":
            time = this._d.valueOf();
            time -= mod$1(
              time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
              MS_PER_HOUR
            );
            break;
          case "minute":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_MINUTE);
            break;
          case "second":
            time = this._d.valueOf();
            time -= mod$1(time, MS_PER_SECOND);
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function endOf(units) {
        var time, startOfDate;
        units = normalizeUnits(units);
        if (units === void 0 || units === "millisecond" || !this.isValid()) {
          return this;
        }
        startOfDate = this._isUTC ? utcStartOfDate : localStartOfDate;
        switch (units) {
          case "year":
            time = startOfDate(this.year() + 1, 0, 1) - 1;
            break;
          case "quarter":
            time = startOfDate(
              this.year(),
              this.month() - this.month() % 3 + 3,
              1
            ) - 1;
            break;
          case "month":
            time = startOfDate(this.year(), this.month() + 1, 1) - 1;
            break;
          case "week":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - this.weekday() + 7
            ) - 1;
            break;
          case "isoWeek":
            time = startOfDate(
              this.year(),
              this.month(),
              this.date() - (this.isoWeekday() - 1) + 7
            ) - 1;
            break;
          case "day":
          case "date":
            time = startOfDate(this.year(), this.month(), this.date() + 1) - 1;
            break;
          case "hour":
            time = this._d.valueOf();
            time += MS_PER_HOUR - mod$1(
              time + (this._isUTC ? 0 : this.utcOffset() * MS_PER_MINUTE),
              MS_PER_HOUR
            ) - 1;
            break;
          case "minute":
            time = this._d.valueOf();
            time += MS_PER_MINUTE - mod$1(time, MS_PER_MINUTE) - 1;
            break;
          case "second":
            time = this._d.valueOf();
            time += MS_PER_SECOND - mod$1(time, MS_PER_SECOND) - 1;
            break;
        }
        this._d.setTime(time);
        hooks.updateOffset(this, true);
        return this;
      }
      function valueOf() {
        return this._d.valueOf() - (this._offset || 0) * 6e4;
      }
      function unix() {
        return Math.floor(this.valueOf() / 1e3);
      }
      function toDate() {
        return new Date(this.valueOf());
      }
      function toArray() {
        var m = this;
        return [
          m.year(),
          m.month(),
          m.date(),
          m.hour(),
          m.minute(),
          m.second(),
          m.millisecond()
        ];
      }
      function toObject() {
        var m = this;
        return {
          years: m.year(),
          months: m.month(),
          date: m.date(),
          hours: m.hours(),
          minutes: m.minutes(),
          seconds: m.seconds(),
          milliseconds: m.milliseconds()
        };
      }
      function toJSON() {
        return this.isValid() ? this.toISOString() : null;
      }
      function isValid$2() {
        return isValid(this);
      }
      function parsingFlags() {
        return extend({}, getParsingFlags(this));
      }
      function invalidAt() {
        return getParsingFlags(this).overflow;
      }
      function creationData() {
        return {
          input: this._i,
          format: this._f,
          locale: this._locale,
          isUTC: this._isUTC,
          strict: this._strict
        };
      }
      addFormatToken("N", 0, 0, "eraAbbr");
      addFormatToken("NN", 0, 0, "eraAbbr");
      addFormatToken("NNN", 0, 0, "eraAbbr");
      addFormatToken("NNNN", 0, 0, "eraName");
      addFormatToken("NNNNN", 0, 0, "eraNarrow");
      addFormatToken("y", ["y", 1], "yo", "eraYear");
      addFormatToken("y", ["yy", 2], 0, "eraYear");
      addFormatToken("y", ["yyy", 3], 0, "eraYear");
      addFormatToken("y", ["yyyy", 4], 0, "eraYear");
      addRegexToken("N", matchEraAbbr);
      addRegexToken("NN", matchEraAbbr);
      addRegexToken("NNN", matchEraAbbr);
      addRegexToken("NNNN", matchEraName);
      addRegexToken("NNNNN", matchEraNarrow);
      addParseToken(
        ["N", "NN", "NNN", "NNNN", "NNNNN"],
        function(input, array, config, token2) {
          var era = config._locale.erasParse(input, token2, config._strict);
          if (era) {
            getParsingFlags(config).era = era;
          } else {
            getParsingFlags(config).invalidEra = input;
          }
        }
      );
      addRegexToken("y", matchUnsigned);
      addRegexToken("yy", matchUnsigned);
      addRegexToken("yyy", matchUnsigned);
      addRegexToken("yyyy", matchUnsigned);
      addRegexToken("yo", matchEraYearOrdinal);
      addParseToken(["y", "yy", "yyy", "yyyy"], YEAR);
      addParseToken(["yo"], function(input, array, config, token2) {
        var match;
        if (config._locale._eraYearOrdinalRegex) {
          match = input.match(config._locale._eraYearOrdinalRegex);
        }
        if (config._locale.eraYearOrdinalParse) {
          array[YEAR] = config._locale.eraYearOrdinalParse(input, match);
        } else {
          array[YEAR] = parseInt(input, 10);
        }
      });
      function localeEras(m, format2) {
        var i, l, date, eras = this._eras || getLocale("en")._eras;
        for (i = 0, l = eras.length; i < l; ++i) {
          switch (typeof eras[i].since) {
            case "string":
              date = hooks(eras[i].since).startOf("day");
              eras[i].since = date.valueOf();
              break;
          }
          switch (typeof eras[i].until) {
            case "undefined":
              eras[i].until = Infinity;
              break;
            case "string":
              date = hooks(eras[i].until).startOf("day").valueOf();
              eras[i].until = date.valueOf();
              break;
          }
        }
        return eras;
      }
      function localeErasParse(eraName, format2, strict) {
        var i, l, eras = this.eras(), name, abbr, narrow;
        eraName = eraName.toUpperCase();
        for (i = 0, l = eras.length; i < l; ++i) {
          name = eras[i].name.toUpperCase();
          abbr = eras[i].abbr.toUpperCase();
          narrow = eras[i].narrow.toUpperCase();
          if (strict) {
            switch (format2) {
              case "N":
              case "NN":
              case "NNN":
                if (abbr === eraName) {
                  return eras[i];
                }
                break;
              case "NNNN":
                if (name === eraName) {
                  return eras[i];
                }
                break;
              case "NNNNN":
                if (narrow === eraName) {
                  return eras[i];
                }
                break;
            }
          } else if ([name, abbr, narrow].indexOf(eraName) >= 0) {
            return eras[i];
          }
        }
      }
      function localeErasConvertYear(era, year) {
        var dir = era.since <= era.until ? 1 : -1;
        if (year === void 0) {
          return hooks(era.since).year();
        } else {
          return hooks(era.since).year() + (year - era.offset) * dir;
        }
      }
      function getEraName() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].name;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].name;
          }
        }
        return "";
      }
      function getEraNarrow() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].narrow;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].narrow;
          }
        }
        return "";
      }
      function getEraAbbr() {
        var i, l, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until) {
            return eras[i].abbr;
          }
          if (eras[i].until <= val && val <= eras[i].since) {
            return eras[i].abbr;
          }
        }
        return "";
      }
      function getEraYear() {
        var i, l, dir, val, eras = this.localeData().eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          dir = eras[i].since <= eras[i].until ? 1 : -1;
          val = this.clone().startOf("day").valueOf();
          if (eras[i].since <= val && val <= eras[i].until || eras[i].until <= val && val <= eras[i].since) {
            return (this.year() - hooks(eras[i].since).year()) * dir + eras[i].offset;
          }
        }
        return this.year();
      }
      function erasNameRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNameRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNameRegex : this._erasRegex;
      }
      function erasAbbrRegex(isStrict) {
        if (!hasOwnProp(this, "_erasAbbrRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasAbbrRegex : this._erasRegex;
      }
      function erasNarrowRegex(isStrict) {
        if (!hasOwnProp(this, "_erasNarrowRegex")) {
          computeErasParse.call(this);
        }
        return isStrict ? this._erasNarrowRegex : this._erasRegex;
      }
      function matchEraAbbr(isStrict, locale2) {
        return locale2.erasAbbrRegex(isStrict);
      }
      function matchEraName(isStrict, locale2) {
        return locale2.erasNameRegex(isStrict);
      }
      function matchEraNarrow(isStrict, locale2) {
        return locale2.erasNarrowRegex(isStrict);
      }
      function matchEraYearOrdinal(isStrict, locale2) {
        return locale2._eraYearOrdinalRegex || matchUnsigned;
      }
      function computeErasParse() {
        var abbrPieces = [], namePieces = [], narrowPieces = [], mixedPieces = [], i, l, erasName, erasAbbr, erasNarrow, eras = this.eras();
        for (i = 0, l = eras.length; i < l; ++i) {
          erasName = regexEscape(eras[i].name);
          erasAbbr = regexEscape(eras[i].abbr);
          erasNarrow = regexEscape(eras[i].narrow);
          namePieces.push(erasName);
          abbrPieces.push(erasAbbr);
          narrowPieces.push(erasNarrow);
          mixedPieces.push(erasName);
          mixedPieces.push(erasAbbr);
          mixedPieces.push(erasNarrow);
        }
        this._erasRegex = new RegExp("^(" + mixedPieces.join("|") + ")", "i");
        this._erasNameRegex = new RegExp("^(" + namePieces.join("|") + ")", "i");
        this._erasAbbrRegex = new RegExp("^(" + abbrPieces.join("|") + ")", "i");
        this._erasNarrowRegex = new RegExp(
          "^(" + narrowPieces.join("|") + ")",
          "i"
        );
      }
      addFormatToken(0, ["gg", 2], 0, function() {
        return this.weekYear() % 100;
      });
      addFormatToken(0, ["GG", 2], 0, function() {
        return this.isoWeekYear() % 100;
      });
      function addWeekYearFormatToken(token2, getter) {
        addFormatToken(0, [token2, token2.length], 0, getter);
      }
      addWeekYearFormatToken("gggg", "weekYear");
      addWeekYearFormatToken("ggggg", "weekYear");
      addWeekYearFormatToken("GGGG", "isoWeekYear");
      addWeekYearFormatToken("GGGGG", "isoWeekYear");
      addRegexToken("G", matchSigned);
      addRegexToken("g", matchSigned);
      addRegexToken("GG", match1to2, match2);
      addRegexToken("gg", match1to2, match2);
      addRegexToken("GGGG", match1to4, match4);
      addRegexToken("gggg", match1to4, match4);
      addRegexToken("GGGGG", match1to6, match6);
      addRegexToken("ggggg", match1to6, match6);
      addWeekParseToken(
        ["gggg", "ggggg", "GGGG", "GGGGG"],
        function(input, week, config, token2) {
          week[token2.substr(0, 2)] = toInt(input);
        }
      );
      addWeekParseToken(["gg", "GG"], function(input, week, config, token2) {
        week[token2] = hooks.parseTwoDigitYear(input);
      });
      function getSetWeekYear(input) {
        return getSetWeekYearHelper.call(
          this,
          input,
          this.week(),
          this.weekday() + this.localeData()._week.dow,
          this.localeData()._week.dow,
          this.localeData()._week.doy
        );
      }
      function getSetISOWeekYear(input) {
        return getSetWeekYearHelper.call(
          this,
          input,
          this.isoWeek(),
          this.isoWeekday(),
          1,
          4
        );
      }
      function getISOWeeksInYear() {
        return weeksInYear(this.year(), 1, 4);
      }
      function getISOWeeksInISOWeekYear() {
        return weeksInYear(this.isoWeekYear(), 1, 4);
      }
      function getWeeksInYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.year(), weekInfo.dow, weekInfo.doy);
      }
      function getWeeksInWeekYear() {
        var weekInfo = this.localeData()._week;
        return weeksInYear(this.weekYear(), weekInfo.dow, weekInfo.doy);
      }
      function getSetWeekYearHelper(input, week, weekday, dow, doy) {
        var weeksTarget;
        if (input == null) {
          return weekOfYear(this, dow, doy).year;
        } else {
          weeksTarget = weeksInYear(input, dow, doy);
          if (week > weeksTarget) {
            week = weeksTarget;
          }
          return setWeekAll.call(this, input, week, weekday, dow, doy);
        }
      }
      function setWeekAll(weekYear, week, weekday, dow, doy) {
        var dayOfYearData = dayOfYearFromWeeks(weekYear, week, weekday, dow, doy), date = createUTCDate(dayOfYearData.year, 0, dayOfYearData.dayOfYear);
        this.year(date.getUTCFullYear());
        this.month(date.getUTCMonth());
        this.date(date.getUTCDate());
        return this;
      }
      addFormatToken("Q", 0, "Qo", "quarter");
      addRegexToken("Q", match1);
      addParseToken("Q", function(input, array) {
        array[MONTH] = (toInt(input) - 1) * 3;
      });
      function getSetQuarter(input) {
        return input == null ? Math.ceil((this.month() + 1) / 3) : this.month((input - 1) * 3 + this.month() % 3);
      }
      addFormatToken("D", ["DD", 2], "Do", "date");
      addRegexToken("D", match1to2, match1to2NoLeadingZero);
      addRegexToken("DD", match1to2, match2);
      addRegexToken("Do", function(isStrict, locale2) {
        return isStrict ? locale2._dayOfMonthOrdinalParse || locale2._ordinalParse : locale2._dayOfMonthOrdinalParseLenient;
      });
      addParseToken(["D", "DD"], DATE);
      addParseToken("Do", function(input, array) {
        array[DATE] = toInt(input.match(match1to2)[0]);
      });
      var getSetDayOfMonth = makeGetSet("Date", true);
      addFormatToken("DDD", ["DDDD", 3], "DDDo", "dayOfYear");
      addRegexToken("DDD", match1to3);
      addRegexToken("DDDD", match3);
      addParseToken(["DDD", "DDDD"], function(input, array, config) {
        config._dayOfYear = toInt(input);
      });
      function getSetDayOfYear(input) {
        var dayOfYear = Math.round(
          (this.clone().startOf("day") - this.clone().startOf("year")) / 864e5
        ) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
      }
      addFormatToken("m", ["mm", 2], 0, "minute");
      addRegexToken("m", match1to2, match1to2HasZero);
      addRegexToken("mm", match1to2, match2);
      addParseToken(["m", "mm"], MINUTE);
      var getSetMinute = makeGetSet("Minutes", false);
      addFormatToken("s", ["ss", 2], 0, "second");
      addRegexToken("s", match1to2, match1to2HasZero);
      addRegexToken("ss", match1to2, match2);
      addParseToken(["s", "ss"], SECOND);
      var getSetSecond = makeGetSet("Seconds", false);
      addFormatToken("S", 0, 0, function() {
        return ~~(this.millisecond() / 100);
      });
      addFormatToken(0, ["SS", 2], 0, function() {
        return ~~(this.millisecond() / 10);
      });
      addFormatToken(0, ["SSS", 3], 0, "millisecond");
      addFormatToken(0, ["SSSS", 4], 0, function() {
        return this.millisecond() * 10;
      });
      addFormatToken(0, ["SSSSS", 5], 0, function() {
        return this.millisecond() * 100;
      });
      addFormatToken(0, ["SSSSSS", 6], 0, function() {
        return this.millisecond() * 1e3;
      });
      addFormatToken(0, ["SSSSSSS", 7], 0, function() {
        return this.millisecond() * 1e4;
      });
      addFormatToken(0, ["SSSSSSSS", 8], 0, function() {
        return this.millisecond() * 1e5;
      });
      addFormatToken(0, ["SSSSSSSSS", 9], 0, function() {
        return this.millisecond() * 1e6;
      });
      addRegexToken("S", match1to3, match1);
      addRegexToken("SS", match1to3, match2);
      addRegexToken("SSS", match1to3, match3);
      var token, getSetMillisecond;
      for (token = "SSSS"; token.length <= 9; token += "S") {
        addRegexToken(token, matchUnsigned);
      }
      function parseMs(input, array) {
        array[MILLISECOND] = toInt(("0." + input) * 1e3);
      }
      for (token = "S"; token.length <= 9; token += "S") {
        addParseToken(token, parseMs);
      }
      getSetMillisecond = makeGetSet("Milliseconds", false);
      addFormatToken("z", 0, 0, "zoneAbbr");
      addFormatToken("zz", 0, 0, "zoneName");
      function getZoneAbbr() {
        return this._isUTC ? "UTC" : "";
      }
      function getZoneName() {
        return this._isUTC ? "Coordinated Universal Time" : "";
      }
      var proto = Moment.prototype;
      proto.add = add;
      proto.calendar = calendar$1;
      proto.clone = clone;
      proto.diff = diff;
      proto.endOf = endOf;
      proto.format = format;
      proto.from = from;
      proto.fromNow = fromNow;
      proto.to = to;
      proto.toNow = toNow;
      proto.get = stringGet;
      proto.invalidAt = invalidAt;
      proto.isAfter = isAfter;
      proto.isBefore = isBefore;
      proto.isBetween = isBetween;
      proto.isSame = isSame;
      proto.isSameOrAfter = isSameOrAfter;
      proto.isSameOrBefore = isSameOrBefore;
      proto.isValid = isValid$2;
      proto.lang = lang;
      proto.locale = locale;
      proto.localeData = localeData;
      proto.max = prototypeMax;
      proto.min = prototypeMin;
      proto.parsingFlags = parsingFlags;
      proto.set = stringSet;
      proto.startOf = startOf;
      proto.subtract = subtract;
      proto.toArray = toArray;
      proto.toObject = toObject;
      proto.toDate = toDate;
      proto.toISOString = toISOString;
      proto.inspect = inspect;
      if (typeof Symbol !== "undefined" && Symbol.for != null) {
        proto[Symbol.for("nodejs.util.inspect.custom")] = function() {
          return "Moment<" + this.format() + ">";
        };
      }
      proto.toJSON = toJSON;
      proto.toString = toString;
      proto.unix = unix;
      proto.valueOf = valueOf;
      proto.creationData = creationData;
      proto.eraName = getEraName;
      proto.eraNarrow = getEraNarrow;
      proto.eraAbbr = getEraAbbr;
      proto.eraYear = getEraYear;
      proto.year = getSetYear;
      proto.isLeapYear = getIsLeapYear;
      proto.weekYear = getSetWeekYear;
      proto.isoWeekYear = getSetISOWeekYear;
      proto.quarter = proto.quarters = getSetQuarter;
      proto.month = getSetMonth;
      proto.daysInMonth = getDaysInMonth;
      proto.week = proto.weeks = getSetWeek;
      proto.isoWeek = proto.isoWeeks = getSetISOWeek;
      proto.weeksInYear = getWeeksInYear;
      proto.weeksInWeekYear = getWeeksInWeekYear;
      proto.isoWeeksInYear = getISOWeeksInYear;
      proto.isoWeeksInISOWeekYear = getISOWeeksInISOWeekYear;
      proto.date = getSetDayOfMonth;
      proto.day = proto.days = getSetDayOfWeek;
      proto.weekday = getSetLocaleDayOfWeek;
      proto.isoWeekday = getSetISODayOfWeek;
      proto.dayOfYear = getSetDayOfYear;
      proto.hour = proto.hours = getSetHour;
      proto.minute = proto.minutes = getSetMinute;
      proto.second = proto.seconds = getSetSecond;
      proto.millisecond = proto.milliseconds = getSetMillisecond;
      proto.utcOffset = getSetOffset;
      proto.utc = setOffsetToUTC;
      proto.local = setOffsetToLocal;
      proto.parseZone = setOffsetToParsedOffset;
      proto.hasAlignedHourOffset = hasAlignedHourOffset;
      proto.isDST = isDaylightSavingTime;
      proto.isLocal = isLocal;
      proto.isUtcOffset = isUtcOffset;
      proto.isUtc = isUtc;
      proto.isUTC = isUtc;
      proto.zoneAbbr = getZoneAbbr;
      proto.zoneName = getZoneName;
      proto.dates = deprecate(
        "dates accessor is deprecated. Use date instead.",
        getSetDayOfMonth
      );
      proto.months = deprecate(
        "months accessor is deprecated. Use month instead",
        getSetMonth
      );
      proto.years = deprecate(
        "years accessor is deprecated. Use year instead",
        getSetYear
      );
      proto.zone = deprecate(
        "moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",
        getSetZone
      );
      proto.isDSTShifted = deprecate(
        "isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",
        isDaylightSavingTimeShifted
      );
      function createUnix(input) {
        return createLocal(input * 1e3);
      }
      function createInZone() {
        return createLocal.apply(null, arguments).parseZone();
      }
      function preParsePostFormat(string) {
        return string;
      }
      var proto$1 = Locale.prototype;
      proto$1.calendar = calendar;
      proto$1.longDateFormat = longDateFormat;
      proto$1.invalidDate = invalidDate;
      proto$1.ordinal = ordinal;
      proto$1.preparse = preParsePostFormat;
      proto$1.postformat = preParsePostFormat;
      proto$1.relativeTime = relativeTime;
      proto$1.pastFuture = pastFuture;
      proto$1.set = set;
      proto$1.eras = localeEras;
      proto$1.erasParse = localeErasParse;
      proto$1.erasConvertYear = localeErasConvertYear;
      proto$1.erasAbbrRegex = erasAbbrRegex;
      proto$1.erasNameRegex = erasNameRegex;
      proto$1.erasNarrowRegex = erasNarrowRegex;
      proto$1.months = localeMonths;
      proto$1.monthsShort = localeMonthsShort;
      proto$1.monthsParse = localeMonthsParse;
      proto$1.monthsRegex = monthsRegex;
      proto$1.monthsShortRegex = monthsShortRegex;
      proto$1.week = localeWeek;
      proto$1.firstDayOfYear = localeFirstDayOfYear;
      proto$1.firstDayOfWeek = localeFirstDayOfWeek;
      proto$1.weekdays = localeWeekdays;
      proto$1.weekdaysMin = localeWeekdaysMin;
      proto$1.weekdaysShort = localeWeekdaysShort;
      proto$1.weekdaysParse = localeWeekdaysParse;
      proto$1.weekdaysRegex = weekdaysRegex;
      proto$1.weekdaysShortRegex = weekdaysShortRegex;
      proto$1.weekdaysMinRegex = weekdaysMinRegex;
      proto$1.isPM = localeIsPM;
      proto$1.meridiem = localeMeridiem;
      function get$1(format2, index, field, setter) {
        var locale2 = getLocale(), utc = createUTC().set(setter, index);
        return locale2[field](utc, format2);
      }
      function listMonthsImpl(format2, index, field) {
        if (isNumber(format2)) {
          index = format2;
          format2 = void 0;
        }
        format2 = format2 || "";
        if (index != null) {
          return get$1(format2, index, field, "month");
        }
        var i, out = [];
        for (i = 0; i < 12; i++) {
          out[i] = get$1(format2, i, field, "month");
        }
        return out;
      }
      function listWeekdaysImpl(localeSorted, format2, index, field) {
        if (typeof localeSorted === "boolean") {
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        } else {
          format2 = localeSorted;
          index = format2;
          localeSorted = false;
          if (isNumber(format2)) {
            index = format2;
            format2 = void 0;
          }
          format2 = format2 || "";
        }
        var locale2 = getLocale(), shift = localeSorted ? locale2._week.dow : 0, i, out = [];
        if (index != null) {
          return get$1(format2, (index + shift) % 7, field, "day");
        }
        for (i = 0; i < 7; i++) {
          out[i] = get$1(format2, (i + shift) % 7, field, "day");
        }
        return out;
      }
      function listMonths(format2, index) {
        return listMonthsImpl(format2, index, "months");
      }
      function listMonthsShort(format2, index) {
        return listMonthsImpl(format2, index, "monthsShort");
      }
      function listWeekdays(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdays");
      }
      function listWeekdaysShort(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdaysShort");
      }
      function listWeekdaysMin(localeSorted, format2, index) {
        return listWeekdaysImpl(localeSorted, format2, index, "weekdaysMin");
      }
      getSetGlobalLocale("en", {
        eras: [
          {
            since: "0001-01-01",
            until: Infinity,
            offset: 1,
            name: "Anno Domini",
            narrow: "AD",
            abbr: "AD"
          },
          {
            since: "0000-12-31",
            until: -Infinity,
            offset: 1,
            name: "Before Christ",
            narrow: "BC",
            abbr: "BC"
          }
        ],
        dayOfMonthOrdinalParse: /\d{1,2}(th|st|nd|rd)/,
        ordinal: function(number) {
          var b = number % 10, output = toInt(number % 100 / 10) === 1 ? "th" : b === 1 ? "st" : b === 2 ? "nd" : b === 3 ? "rd" : "th";
          return number + output;
        }
      });
      hooks.lang = deprecate(
        "moment.lang is deprecated. Use moment.locale instead.",
        getSetGlobalLocale
      );
      hooks.langData = deprecate(
        "moment.langData is deprecated. Use moment.localeData instead.",
        getLocale
      );
      var mathAbs = Math.abs;
      function abs() {
        var data = this._data;
        this._milliseconds = mathAbs(this._milliseconds);
        this._days = mathAbs(this._days);
        this._months = mathAbs(this._months);
        data.milliseconds = mathAbs(data.milliseconds);
        data.seconds = mathAbs(data.seconds);
        data.minutes = mathAbs(data.minutes);
        data.hours = mathAbs(data.hours);
        data.months = mathAbs(data.months);
        data.years = mathAbs(data.years);
        return this;
      }
      function addSubtract$1(duration, input, value, direction) {
        var other = createDuration(input, value);
        duration._milliseconds += direction * other._milliseconds;
        duration._days += direction * other._days;
        duration._months += direction * other._months;
        return duration._bubble();
      }
      function add$1(input, value) {
        return addSubtract$1(this, input, value, 1);
      }
      function subtract$1(input, value) {
        return addSubtract$1(this, input, value, -1);
      }
      function absCeil(number) {
        if (number < 0) {
          return Math.floor(number);
        } else {
          return Math.ceil(number);
        }
      }
      function bubble() {
        var milliseconds2 = this._milliseconds, days2 = this._days, months2 = this._months, data = this._data, seconds2, minutes2, hours2, years2, monthsFromDays;
        if (!(milliseconds2 >= 0 && days2 >= 0 && months2 >= 0 || milliseconds2 <= 0 && days2 <= 0 && months2 <= 0)) {
          milliseconds2 += absCeil(monthsToDays(months2) + days2) * 864e5;
          days2 = 0;
          months2 = 0;
        }
        data.milliseconds = milliseconds2 % 1e3;
        seconds2 = absFloor(milliseconds2 / 1e3);
        data.seconds = seconds2 % 60;
        minutes2 = absFloor(seconds2 / 60);
        data.minutes = minutes2 % 60;
        hours2 = absFloor(minutes2 / 60);
        data.hours = hours2 % 24;
        days2 += absFloor(hours2 / 24);
        monthsFromDays = absFloor(daysToMonths(days2));
        months2 += monthsFromDays;
        days2 -= absCeil(monthsToDays(monthsFromDays));
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        data.days = days2;
        data.months = months2;
        data.years = years2;
        return this;
      }
      function daysToMonths(days2) {
        return days2 * 4800 / 146097;
      }
      function monthsToDays(months2) {
        return months2 * 146097 / 4800;
      }
      function as(units) {
        if (!this.isValid()) {
          return NaN;
        }
        var days2, months2, milliseconds2 = this._milliseconds;
        units = normalizeUnits(units);
        if (units === "month" || units === "quarter" || units === "year") {
          days2 = this._days + milliseconds2 / 864e5;
          months2 = this._months + daysToMonths(days2);
          switch (units) {
            case "month":
              return months2;
            case "quarter":
              return months2 / 3;
            case "year":
              return months2 / 12;
          }
        } else {
          days2 = this._days + Math.round(monthsToDays(this._months));
          switch (units) {
            case "week":
              return days2 / 7 + milliseconds2 / 6048e5;
            case "day":
              return days2 + milliseconds2 / 864e5;
            case "hour":
              return days2 * 24 + milliseconds2 / 36e5;
            case "minute":
              return days2 * 1440 + milliseconds2 / 6e4;
            case "second":
              return days2 * 86400 + milliseconds2 / 1e3;
            case "millisecond":
              return Math.floor(days2 * 864e5) + milliseconds2;
            default:
              throw new Error("Unknown unit " + units);
          }
        }
      }
      function makeAs(alias) {
        return function() {
          return this.as(alias);
        };
      }
      var asMilliseconds = makeAs("ms"), asSeconds = makeAs("s"), asMinutes = makeAs("m"), asHours = makeAs("h"), asDays = makeAs("d"), asWeeks = makeAs("w"), asMonths = makeAs("M"), asQuarters = makeAs("Q"), asYears = makeAs("y"), valueOf$1 = asMilliseconds;
      function clone$1() {
        return createDuration(this);
      }
      function get$2(units) {
        units = normalizeUnits(units);
        return this.isValid() ? this[units + "s"]() : NaN;
      }
      function makeGetter(name) {
        return function() {
          return this.isValid() ? this._data[name] : NaN;
        };
      }
      var milliseconds = makeGetter("milliseconds"), seconds = makeGetter("seconds"), minutes = makeGetter("minutes"), hours = makeGetter("hours"), days = makeGetter("days"), months = makeGetter("months"), years = makeGetter("years");
      function weeks() {
        return absFloor(this.days() / 7);
      }
      var round = Math.round, thresholds = {
        ss: 44,
        // a few seconds to seconds
        s: 45,
        // seconds to minute
        m: 45,
        // minutes to hour
        h: 22,
        // hours to day
        d: 26,
        // days to month/week
        w: null,
        // weeks to month
        M: 11
        // months to year
      };
      function substituteTimeAgo(string, number, withoutSuffix, isFuture, locale2) {
        return locale2.relativeTime(number || 1, !!withoutSuffix, string, isFuture);
      }
      function relativeTime$1(posNegDuration, withoutSuffix, thresholds2, locale2) {
        var duration = createDuration(posNegDuration).abs(), seconds2 = round(duration.as("s")), minutes2 = round(duration.as("m")), hours2 = round(duration.as("h")), days2 = round(duration.as("d")), months2 = round(duration.as("M")), weeks2 = round(duration.as("w")), years2 = round(duration.as("y")), a = seconds2 <= thresholds2.ss && ["s", seconds2] || seconds2 < thresholds2.s && ["ss", seconds2] || minutes2 <= 1 && ["m"] || minutes2 < thresholds2.m && ["mm", minutes2] || hours2 <= 1 && ["h"] || hours2 < thresholds2.h && ["hh", hours2] || days2 <= 1 && ["d"] || days2 < thresholds2.d && ["dd", days2];
        if (thresholds2.w != null) {
          a = a || weeks2 <= 1 && ["w"] || weeks2 < thresholds2.w && ["ww", weeks2];
        }
        a = a || months2 <= 1 && ["M"] || months2 < thresholds2.M && ["MM", months2] || years2 <= 1 && ["y"] || ["yy", years2];
        a[2] = withoutSuffix;
        a[3] = +posNegDuration > 0;
        a[4] = locale2;
        return substituteTimeAgo.apply(null, a);
      }
      function getSetRelativeTimeRounding(roundingFunction) {
        if (roundingFunction === void 0) {
          return round;
        }
        if (typeof roundingFunction === "function") {
          round = roundingFunction;
          return true;
        }
        return false;
      }
      function getSetRelativeTimeThreshold(threshold, limit) {
        if (thresholds[threshold] === void 0) {
          return false;
        }
        if (limit === void 0) {
          return thresholds[threshold];
        }
        thresholds[threshold] = limit;
        if (threshold === "s") {
          thresholds.ss = limit - 1;
        }
        return true;
      }
      function humanize(argWithSuffix, argThresholds) {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var withSuffix = false, th = thresholds, locale2, output;
        if (typeof argWithSuffix === "object") {
          argThresholds = argWithSuffix;
          argWithSuffix = false;
        }
        if (typeof argWithSuffix === "boolean") {
          withSuffix = argWithSuffix;
        }
        if (typeof argThresholds === "object") {
          th = Object.assign({}, thresholds, argThresholds);
          if (argThresholds.s != null && argThresholds.ss == null) {
            th.ss = argThresholds.s - 1;
          }
        }
        locale2 = this.localeData();
        output = relativeTime$1(this, !withSuffix, th, locale2);
        if (withSuffix) {
          output = locale2.pastFuture(+this, output);
        }
        return locale2.postformat(output);
      }
      var abs$1 = Math.abs;
      function sign(x) {
        return (x > 0) - (x < 0) || +x;
      }
      function toISOString$1() {
        if (!this.isValid()) {
          return this.localeData().invalidDate();
        }
        var seconds2 = abs$1(this._milliseconds) / 1e3, days2 = abs$1(this._days), months2 = abs$1(this._months), minutes2, hours2, years2, s, total = this.asSeconds(), totalSign, ymSign, daysSign, hmsSign;
        if (!total) {
          return "P0D";
        }
        minutes2 = absFloor(seconds2 / 60);
        hours2 = absFloor(minutes2 / 60);
        seconds2 %= 60;
        minutes2 %= 60;
        years2 = absFloor(months2 / 12);
        months2 %= 12;
        s = seconds2 ? seconds2.toFixed(3).replace(/\.?0+$/, "") : "";
        totalSign = total < 0 ? "-" : "";
        ymSign = sign(this._months) !== sign(total) ? "-" : "";
        daysSign = sign(this._days) !== sign(total) ? "-" : "";
        hmsSign = sign(this._milliseconds) !== sign(total) ? "-" : "";
        return totalSign + "P" + (years2 ? ymSign + years2 + "Y" : "") + (months2 ? ymSign + months2 + "M" : "") + (days2 ? daysSign + days2 + "D" : "") + (hours2 || minutes2 || seconds2 ? "T" : "") + (hours2 ? hmsSign + hours2 + "H" : "") + (minutes2 ? hmsSign + minutes2 + "M" : "") + (seconds2 ? hmsSign + s + "S" : "");
      }
      var proto$2 = Duration.prototype;
      proto$2.isValid = isValid$1;
      proto$2.abs = abs;
      proto$2.add = add$1;
      proto$2.subtract = subtract$1;
      proto$2.as = as;
      proto$2.asMilliseconds = asMilliseconds;
      proto$2.asSeconds = asSeconds;
      proto$2.asMinutes = asMinutes;
      proto$2.asHours = asHours;
      proto$2.asDays = asDays;
      proto$2.asWeeks = asWeeks;
      proto$2.asMonths = asMonths;
      proto$2.asQuarters = asQuarters;
      proto$2.asYears = asYears;
      proto$2.valueOf = valueOf$1;
      proto$2._bubble = bubble;
      proto$2.clone = clone$1;
      proto$2.get = get$2;
      proto$2.milliseconds = milliseconds;
      proto$2.seconds = seconds;
      proto$2.minutes = minutes;
      proto$2.hours = hours;
      proto$2.days = days;
      proto$2.weeks = weeks;
      proto$2.months = months;
      proto$2.years = years;
      proto$2.humanize = humanize;
      proto$2.toISOString = toISOString$1;
      proto$2.toString = toISOString$1;
      proto$2.toJSON = toISOString$1;
      proto$2.locale = locale;
      proto$2.localeData = localeData;
      proto$2.toIsoString = deprecate(
        "toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",
        toISOString$1
      );
      proto$2.lang = lang;
      addFormatToken("X", 0, 0, "unix");
      addFormatToken("x", 0, 0, "valueOf");
      addRegexToken("x", matchSigned);
      addRegexToken("X", matchTimestamp);
      addParseToken("X", function(input, array, config) {
        config._d = new Date(parseFloat(input) * 1e3);
      });
      addParseToken("x", function(input, array, config) {
        config._d = new Date(toInt(input));
      });
      hooks.version = "2.30.1";
      setHookCallback(createLocal);
      hooks.fn = proto;
      hooks.min = min;
      hooks.max = max;
      hooks.now = now;
      hooks.utc = createUTC;
      hooks.unix = createUnix;
      hooks.months = listMonths;
      hooks.isDate = isDate;
      hooks.locale = getSetGlobalLocale;
      hooks.invalid = createInvalid;
      hooks.duration = createDuration;
      hooks.isMoment = isMoment;
      hooks.weekdays = listWeekdays;
      hooks.parseZone = createInZone;
      hooks.localeData = getLocale;
      hooks.isDuration = isDuration;
      hooks.monthsShort = listMonthsShort;
      hooks.weekdaysMin = listWeekdaysMin;
      hooks.defineLocale = defineLocale;
      hooks.updateLocale = updateLocale;
      hooks.locales = listLocales;
      hooks.weekdaysShort = listWeekdaysShort;
      hooks.normalizeUnits = normalizeUnits;
      hooks.relativeTimeRounding = getSetRelativeTimeRounding;
      hooks.relativeTimeThreshold = getSetRelativeTimeThreshold;
      hooks.calendarFormat = getCalendarFormat;
      hooks.prototype = proto;
      hooks.HTML5_FMT = {
        DATETIME_LOCAL: "YYYY-MM-DDTHH:mm",
        // <input type="datetime-local" />
        DATETIME_LOCAL_SECONDS: "YYYY-MM-DDTHH:mm:ss",
        // <input type="datetime-local" step="1" />
        DATETIME_LOCAL_MS: "YYYY-MM-DDTHH:mm:ss.SSS",
        // <input type="datetime-local" step="0.001" />
        DATE: "YYYY-MM-DD",
        // <input type="date" />
        TIME: "HH:mm",
        // <input type="time" />
        TIME_SECONDS: "HH:mm:ss",
        // <input type="time" step="1" />
        TIME_MS: "HH:mm:ss.SSS",
        // <input type="time" step="0.001" />
        WEEK: "GGGG-[W]WW",
        // <input type="week" />
        MONTH: "YYYY-MM"
        // <input type="month" />
      };
      return hooks;
    });
  }
});

// node_modules/moment-jalaali/index.js
var require_moment_jalaali = __commonJS({
  "node_modules/moment-jalaali/index.js"(exports, module2) {
    module2.exports = jMoment;
    var moment5 = require_moment();
    var jalaali3 = require_jalaali_js();
    var formattingTokens = /(\[[^\[]*\])|(\\)?j(Mo|MM?M?M?|Do|DDDo|DD?D?D?|w[o|w]?|YYYYY|YYYY|YY|gg(ggg?)?|)|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g;
    var localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS?|LL?L?L?|l{1,4})/g;
    var parseTokenOneOrTwoDigits = /\d\d?/;
    var parseTokenOneToThreeDigits = /\d{1,3}/;
    var parseTokenThreeDigits = /\d{3}/;
    var parseTokenFourDigits = /\d{1,4}/;
    var parseTokenSixDigits = /[+\-]?\d{1,6}/;
    var parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i;
    var parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/i;
    var parseTokenT = /T/i;
    var parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/;
    var symbolMap = {
      "1": "\u06F1",
      "2": "\u06F2",
      "3": "\u06F3",
      "4": "\u06F4",
      "5": "\u06F5",
      "6": "\u06F6",
      "7": "\u06F7",
      "8": "\u06F8",
      "9": "\u06F9",
      "0": "\u06F0"
    };
    var numberMap = {
      "\u06F1": "1",
      "\u06F2": "2",
      "\u06F3": "3",
      "\u06F4": "4",
      "\u06F5": "5",
      "\u06F6": "6",
      "\u06F7": "7",
      "\u06F8": "8",
      "\u06F9": "9",
      "\u06F0": "0"
    };
    var unitAliases = {
      jm: "jmonth",
      jmonths: "jmonth",
      jy: "jyear",
      jyears: "jyear"
    };
    var formatFunctions = {};
    var ordinalizeTokens = "DDD w M D".split(" ");
    var paddedTokens = "M D w".split(" ");
    var formatTokenFunctions = {
      jM: function() {
        return this.jMonth() + 1;
      },
      jMMM: function(format) {
        return this.localeData().jMonthsShort(this, format);
      },
      jMMMM: function(format) {
        return this.localeData().jMonths(this, format);
      },
      jD: function() {
        return this.jDate();
      },
      jDDD: function() {
        return this.jDayOfYear();
      },
      jw: function() {
        return this.jWeek();
      },
      jYY: function() {
        return leftZeroFill(this.jYear() % 100, 2);
      },
      jYYYY: function() {
        return leftZeroFill(this.jYear(), 4);
      },
      jYYYYY: function() {
        return leftZeroFill(this.jYear(), 5);
      },
      jgg: function() {
        return leftZeroFill(this.jWeekYear() % 100, 2);
      },
      jgggg: function() {
        return this.jWeekYear();
      },
      jggggg: function() {
        return leftZeroFill(this.jWeekYear(), 5);
      }
    };
    function padToken(func, count) {
      return function(a) {
        return leftZeroFill(func.call(this, a), count);
      };
    }
    function ordinalizeToken(func, period) {
      return function(a) {
        return this.localeData().ordinal(func.call(this, a), period);
      };
    }
    (function() {
      var i;
      while (ordinalizeTokens.length) {
        i = ordinalizeTokens.pop();
        formatTokenFunctions["j" + i + "o"] = ordinalizeToken(formatTokenFunctions["j" + i], i);
      }
      while (paddedTokens.length) {
        i = paddedTokens.pop();
        formatTokenFunctions["j" + i + i] = padToken(formatTokenFunctions["j" + i], 2);
      }
      formatTokenFunctions.jDDDD = padToken(formatTokenFunctions.jDDD, 3);
    })();
    function extend(a, b) {
      var key;
      for (key in b)
        if (b.hasOwnProperty(key))
          a[key] = b[key];
      return a;
    }
    function leftZeroFill(number, targetLength) {
      var output = number + "";
      while (output.length < targetLength)
        output = "0" + output;
      return output;
    }
    function isArray(input) {
      return Object.prototype.toString.call(input) === "[object Array]";
    }
    function normalizeUnits(units) {
      if (units) {
        var lowered = units.toLowerCase();
        units = unitAliases[lowered] || lowered;
      }
      return units;
    }
    function setDate(m, year, month, date) {
      var d = m._d;
      if (isNaN(year)) {
        m._isValid = false;
      }
      if (m._isUTC) {
        m._d = new Date(Date.UTC(
          year,
          month,
          date,
          d.getUTCHours(),
          d.getUTCMinutes(),
          d.getUTCSeconds(),
          d.getUTCMilliseconds()
        ));
      } else {
        m._d = new Date(
          year,
          month,
          date,
          d.getHours(),
          d.getMinutes(),
          d.getSeconds(),
          d.getMilliseconds()
        );
      }
    }
    function objectCreate(parent) {
      function F() {
      }
      F.prototype = parent;
      return new F();
    }
    function getPrototypeOf(object) {
      if (Object.getPrototypeOf)
        return Object.getPrototypeOf(object);
      else if ("".__proto__)
        return object.__proto__;
      else
        return object.constructor.prototype;
    }
    extend(
      getPrototypeOf(moment5.localeData()),
      {
        _jMonths: [
          "Farvardin",
          "Ordibehesht",
          "Khordaad",
          "Tir",
          "Amordaad",
          "Shahrivar",
          "Mehr",
          "Aabaan",
          "Aazar",
          "Dey",
          "Bahman",
          "Esfand"
        ],
        jMonths: function(m) {
          return this._jMonths[m.jMonth()];
        },
        _jMonthsShort: [
          "Far",
          "Ord",
          "Kho",
          "Tir",
          "Amo",
          "Sha",
          "Meh",
          "Aab",
          "Aaz",
          "Dey",
          "Bah",
          "Esf"
        ],
        jMonthsShort: function(m) {
          return this._jMonthsShort[m.jMonth()];
        },
        jMonthsParse: function(monthName) {
          var i, mom, regex;
          if (!this._jMonthsParse)
            this._jMonthsParse = [];
          for (i = 0; i < 12; i += 1) {
            if (!this._jMonthsParse[i]) {
              mom = jMoment([2e3, (2 + i) % 12, 25]);
              regex = "^" + this.jMonths(mom, "") + "|^" + this.jMonthsShort(mom, "");
              this._jMonthsParse[i] = new RegExp(regex.replace(".", ""), "i");
            }
            if (this._jMonthsParse[i].test(monthName))
              return i;
          }
        }
      }
    );
    function makeFormatFunction(format) {
      var array = format.match(formattingTokens), length = array.length, i;
      for (i = 0; i < length; i += 1)
        if (formatTokenFunctions[array[i]])
          array[i] = formatTokenFunctions[array[i]];
      return function(mom) {
        var output = "";
        for (i = 0; i < length; i += 1)
          output += array[i] instanceof Function ? "[" + array[i].call(mom, format) + "]" : array[i];
        return output;
      };
    }
    function getParseRegexForToken(token, config) {
      switch (token) {
        case "jDDDD":
          return parseTokenThreeDigits;
        case "jYYYY":
          return parseTokenFourDigits;
        case "jYYYYY":
          return parseTokenSixDigits;
        case "jDDD":
          return parseTokenOneToThreeDigits;
        case "jMMM":
        case "jMMMM":
          return parseTokenWord;
        case "jMM":
        case "jDD":
        case "jYY":
        case "jM":
        case "jD":
          return parseTokenOneOrTwoDigits;
        case "DDDD":
          return parseTokenThreeDigits;
        case "YYYY":
          return parseTokenFourDigits;
        case "YYYYY":
          return parseTokenSixDigits;
        case "S":
        case "SS":
        case "SSS":
        case "DDD":
          return parseTokenOneToThreeDigits;
        case "MMM":
        case "MMMM":
        case "dd":
        case "ddd":
        case "dddd":
          return parseTokenWord;
        case "a":
        case "A":
          return moment5.localeData(config._l)._meridiemParse;
        case "X":
          return parseTokenTimestampMs;
        case "Z":
        case "ZZ":
          return parseTokenTimezone;
        case "T":
          return parseTokenT;
        case "MM":
        case "DD":
        case "YY":
        case "HH":
        case "hh":
        case "mm":
        case "ss":
        case "M":
        case "D":
        case "d":
        case "H":
        case "h":
        case "m":
        case "s":
          return parseTokenOneOrTwoDigits;
        default:
          return new RegExp(token.replace("\\", ""));
      }
    }
    function addTimeToArrayFromToken(token, input, config) {
      var a, datePartArray = config._a;
      switch (token) {
        case "jM":
        case "jMM":
          datePartArray[1] = input == null ? 0 : ~~input - 1;
          break;
        case "jMMM":
        case "jMMMM":
          a = moment5.localeData(config._l).jMonthsParse(input);
          if (a != null)
            datePartArray[1] = a;
          else
            config._isValid = false;
          break;
        case "jD":
        case "jDD":
        case "jDDD":
        case "jDDDD":
          if (input != null)
            datePartArray[2] = ~~input;
          break;
        case "jYY":
          datePartArray[0] = ~~input + (~~input > 47 ? 1300 : 1400);
          break;
        case "jYYYY":
        case "jYYYYY":
          datePartArray[0] = ~~input;
      }
      if (input == null)
        config._isValid = false;
    }
    function dateFromArray(config) {
      var g, j, jy = config._a[0], jm = config._a[1], jd = config._a[2];
      if (jy == null && jm == null && jd == null)
        return [0, 0, 1];
      jy = jy != null ? jy : 0;
      jm = jm != null ? jm : 0;
      jd = jd != null ? jd : 1;
      if (jd < 1 || jd > jMoment.jDaysInMonth(jy, jm) || jm < 0 || jm > 11)
        config._isValid = false;
      g = toGregorian5(jy, jm, jd);
      j = toJalaali5(g.gy, g.gm, g.gd);
      if (isNaN(g.gy))
        config._isValid = false;
      config._jDiff = 0;
      if (~~j.jy !== jy)
        config._jDiff += 1;
      if (~~j.jm !== jm)
        config._jDiff += 1;
      if (~~j.jd !== jd)
        config._jDiff += 1;
      return [g.gy, g.gm, g.gd];
    }
    function makeDateFromStringAndFormat(config) {
      var tokens = config._f.match(formattingTokens), string = config._i + "", len = tokens.length, i, token, parsedInput;
      config._a = [];
      for (i = 0; i < len; i += 1) {
        token = tokens[i];
        parsedInput = (getParseRegexForToken(token, config).exec(string) || [])[0];
        if (parsedInput)
          string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
        if (formatTokenFunctions[token])
          addTimeToArrayFromToken(token, parsedInput, config);
      }
      if (string)
        config._il = string;
      return dateFromArray(config);
    }
    function makeDateFromStringAndArray(config, utc) {
      var len = config._f.length, i, format, tempMoment, bestMoment, currentScore, scoreToBeat;
      if (len === 0) {
        return makeMoment(new Date(NaN));
      }
      for (i = 0; i < len; i += 1) {
        format = config._f[i];
        currentScore = 0;
        tempMoment = makeMoment(config._i, format, config._l, config._strict, utc);
        if (!tempMoment.isValid())
          continue;
        currentScore += tempMoment._jDiff;
        if (tempMoment._il)
          currentScore += tempMoment._il.length;
        if (scoreToBeat == null || currentScore < scoreToBeat) {
          scoreToBeat = currentScore;
          bestMoment = tempMoment;
        }
      }
      return bestMoment;
    }
    function removeParsedTokens(config) {
      var string = config._i + "", input = "", format = "", array = config._f.match(formattingTokens), len = array.length, i, match, parsed;
      for (i = 0; i < len; i += 1) {
        match = array[i];
        parsed = (getParseRegexForToken(match, config).exec(string) || [])[0];
        if (parsed)
          string = string.slice(string.indexOf(parsed) + parsed.length);
        if (!(formatTokenFunctions[match] instanceof Function)) {
          format += match;
          if (parsed)
            input += parsed;
        }
      }
      config._i = input;
      config._f = format;
    }
    function jWeekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
      var end = firstDayOfWeekOfYear - firstDayOfWeek, daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(), adjustedMoment;
      if (daysToDayOfWeek > end) {
        daysToDayOfWeek -= 7;
      }
      if (daysToDayOfWeek < end - 7) {
        daysToDayOfWeek += 7;
      }
      adjustedMoment = jMoment(mom).add(daysToDayOfWeek, "d");
      return {
        week: Math.ceil(adjustedMoment.jDayOfYear() / 7),
        year: adjustedMoment.jYear()
      };
    }
    var maxTimestamp = 57724432199999;
    function makeMoment(input, format, lang, strict, utc) {
      if (typeof lang === "boolean") {
        strict = lang;
        lang = void 0;
      }
      if (format && typeof format === "string")
        format = fixFormat(format, moment5);
      var config = {
        _i: input,
        _f: format,
        _l: lang,
        _strict: strict,
        _isUTC: utc
      }, date, m, jm, origInput = input, origFormat = format;
      if (format) {
        if (isArray(format)) {
          return makeDateFromStringAndArray(config, utc);
        } else {
          date = makeDateFromStringAndFormat(config);
          removeParsedTokens(config);
          format = "YYYY-MM-DD-" + config._f;
          input = leftZeroFill(date[0], 4) + "-" + leftZeroFill(date[1] + 1, 2) + "-" + leftZeroFill(date[2], 2) + "-" + config._i;
        }
      }
      if (utc)
        m = moment5.utc(input, format, lang, strict);
      else
        m = moment5(input, format, lang, strict);
      if (config._isValid === false)
        m._isValid = false;
      m._jDiff = config._jDiff || 0;
      jm = objectCreate(jMoment.fn);
      extend(jm, m);
      if (strict && format && jm.isValid()) {
        jm._isValid = jm.format(origFormat) === origInput;
      }
      if (m._d.getTime() > maxTimestamp) {
        jm._isValid = false;
      }
      return jm;
    }
    function jMoment(input, format, lang, strict) {
      return makeMoment(input, format, lang, strict, false);
    }
    extend(jMoment, moment5);
    jMoment.fn = objectCreate(moment5.fn);
    jMoment.utc = function(input, format, lang, strict) {
      return makeMoment(input, format, lang, strict, true);
    };
    jMoment.unix = function(input) {
      return makeMoment(input * 1e3);
    };
    function fixFormat(format, _moment) {
      var i = 5;
      var replace = function(input) {
        return _moment.localeData().longDateFormat(input) || input;
      };
      while (i > 0 && localFormattingTokens.test(format)) {
        i -= 1;
        format = format.replace(localFormattingTokens, replace);
      }
      return format;
    }
    jMoment.fn.format = function(format) {
      if (format) {
        format = fixFormat(format, this);
        if (!formatFunctions[format]) {
          formatFunctions[format] = makeFormatFunction(format);
        }
        format = formatFunctions[format](this);
      }
      return moment5.fn.format.call(this, format);
    };
    jMoment.fn.jYear = function(input) {
      var lastDay, j, g;
      if (typeof input === "number") {
        j = toJalaali5(this.year(), this.month(), this.date());
        lastDay = Math.min(j.jd, jMoment.jDaysInMonth(input, j.jm));
        g = toGregorian5(input, j.jm, lastDay);
        setDate(this, g.gy, g.gm, g.gd);
        moment5.updateOffset(this);
        return this;
      } else {
        return toJalaali5(this.year(), this.month(), this.date()).jy;
      }
    };
    jMoment.fn.jMonth = function(input) {
      var lastDay, j, g;
      if (input != null) {
        if (typeof input === "string") {
          input = this.localeData().jMonthsParse(input);
          if (typeof input !== "number")
            return this;
        }
        j = toJalaali5(this.year(), this.month(), this.date());
        lastDay = Math.min(j.jd, jMoment.jDaysInMonth(j.jy, input));
        this.jYear(j.jy + div(input, 12));
        input = mod(input, 12);
        if (input < 0) {
          input += 12;
          this.jYear(this.jYear() - 1);
        }
        g = toGregorian5(this.jYear(), input, lastDay);
        setDate(this, g.gy, g.gm, g.gd);
        moment5.updateOffset(this);
        return this;
      } else {
        return toJalaali5(this.year(), this.month(), this.date()).jm;
      }
    };
    jMoment.fn.jDate = function(input) {
      var j, g;
      if (typeof input === "number") {
        j = toJalaali5(this.year(), this.month(), this.date());
        g = toGregorian5(j.jy, j.jm, input);
        setDate(this, g.gy, g.gm, g.gd);
        moment5.updateOffset(this);
        return this;
      } else {
        return toJalaali5(this.year(), this.month(), this.date()).jd;
      }
    };
    jMoment.fn.jDayOfYear = function(input) {
      var dayOfYear = Math.round((jMoment(this).startOf("day") - jMoment(this).startOf("jYear")) / 864e5) + 1;
      return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
    };
    jMoment.fn.jWeek = function(input) {
      var week = jWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).week;
      return input == null ? week : this.add((input - week) * 7, "d");
    };
    jMoment.fn.jWeekYear = function(input) {
      var year = jWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
      return input == null ? year : this.add(input - year, "y");
    };
    jMoment.fn.add = function(val, units) {
      var temp;
      if (units !== null && !isNaN(+units)) {
        temp = val;
        val = units;
        units = temp;
      }
      units = normalizeUnits(units);
      if (units === "jyear") {
        this.jYear(this.jYear() + val);
      } else if (units === "jmonth") {
        this.jMonth(this.jMonth() + val);
      } else {
        moment5.fn.add.call(this, val, units);
        if (isNaN(this.jYear())) {
          this._isValid = false;
        }
      }
      return this;
    };
    jMoment.fn.subtract = function(val, units) {
      var temp;
      if (units !== null && !isNaN(+units)) {
        temp = val;
        val = units;
        units = temp;
      }
      units = normalizeUnits(units);
      if (units === "jyear") {
        this.jYear(this.jYear() - val);
      } else if (units === "jmonth") {
        this.jMonth(this.jMonth() - val);
      } else {
        moment5.fn.subtract.call(this, val, units);
      }
      return this;
    };
    jMoment.fn.startOf = function(units) {
      units = normalizeUnits(units);
      if (units === "jyear" || units === "jmonth") {
        if (units === "jyear") {
          this.jMonth(0);
        }
        this.jDate(1);
        this.hours(0);
        this.minutes(0);
        this.seconds(0);
        this.milliseconds(0);
        return this;
      } else {
        return moment5.fn.startOf.call(this, units);
      }
    };
    jMoment.fn.endOf = function(units) {
      units = normalizeUnits(units);
      if (units === void 0 || units === "milisecond") {
        return this;
      }
      return this.startOf(units).add(1, units === "isoweek" ? "week" : units).subtract(1, "ms");
    };
    jMoment.fn.isSame = function(other, units) {
      units = normalizeUnits(units);
      if (units === "jyear" || units === "jmonth") {
        return moment5.fn.isSame.call(this.startOf(units), other.startOf(units));
      }
      return moment5.fn.isSame.call(this, other, units);
    };
    jMoment.fn.clone = function() {
      return jMoment(this);
    };
    jMoment.fn.jYears = jMoment.fn.jYear;
    jMoment.fn.jMonths = jMoment.fn.jMonth;
    jMoment.fn.jDates = jMoment.fn.jDate;
    jMoment.fn.jWeeks = jMoment.fn.jWeek;
    jMoment.jDaysInMonth = function(year, month) {
      year += div(month, 12);
      month = mod(month, 12);
      if (month < 0) {
        month += 12;
        year -= 1;
      }
      if (month < 6) {
        return 31;
      } else if (month < 11) {
        return 30;
      } else if (jMoment.jIsLeapYear(year)) {
        return 30;
      } else {
        return 29;
      }
    };
    jMoment.jIsLeapYear = jalaali3.isLeapJalaaliYear;
    jMoment.loadPersian = function(args) {
      var usePersianDigits = args !== void 0 && args.hasOwnProperty("usePersianDigits") ? args.usePersianDigits : false;
      var dialect = args !== void 0 && args.hasOwnProperty("dialect") ? args.dialect : "persian";
      moment5.locale("fa");
      moment5.updateLocale(
        "fa",
        {
          months: "\u0698\u0627\u0646\u0648\u06CC\u0647_\u0641\u0648\u0631\u06CC\u0647_\u0645\u0627\u0631\u0633_\u0622\u0648\u0631\u06CC\u0644_\u0645\u0647_\u0698\u0648\u0626\u0646_\u0698\u0648\u0626\u06CC\u0647_\u0627\u0648\u062A_\u0633\u067E\u062A\u0627\u0645\u0628\u0631_\u0627\u06A9\u062A\u0628\u0631_\u0646\u0648\u0627\u0645\u0628\u0631_\u062F\u0633\u0627\u0645\u0628\u0631".split("_"),
          monthsShort: "\u0698\u0627\u0646\u0648\u06CC\u0647_\u0641\u0648\u0631\u06CC\u0647_\u0645\u0627\u0631\u0633_\u0622\u0648\u0631\u06CC\u0644_\u0645\u0647_\u0698\u0648\u0626\u0646_\u0698\u0648\u0626\u06CC\u0647_\u0627\u0648\u062A_\u0633\u067E\u062A\u0627\u0645\u0628\u0631_\u0627\u06A9\u062A\u0628\u0631_\u0646\u0648\u0627\u0645\u0628\u0631_\u062F\u0633\u0627\u0645\u0628\u0631".split("_"),
          weekdays: {
            "persian": "\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u0622\u062F\u06CC\u0646\u0647_\u0634\u0646\u0628\u0647".split("_"),
            "persian-modern": "\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647".split("_")
          }[dialect],
          weekdaysShort: {
            "persian": "\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u0622\u062F\u06CC\u0646\u0647_\u0634\u0646\u0628\u0647".split("_"),
            "persian-modern": "\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647".split("_")
          }[dialect],
          weekdaysMin: {
            "persian": "\u06CC_\u062F_\u0633_\u0686_\u067E_\u0622_\u0634".split("_"),
            "persian-modern": "\u06CC_\u062F_\u0633_\u0686_\u067E_\u062C_\u0634".split("_")
          }[dialect],
          longDateFormat: {
            LT: "HH:mm",
            L: "jYYYY/jMM/jDD",
            LL: "jD jMMMM jYYYY",
            LLL: "jD jMMMM jYYYY LT",
            LLLL: "dddd\u060C jD jMMMM jYYYY LT"
          },
          calendar: {
            sameDay: "[\u0627\u0645\u0631\u0648\u0632 \u0633\u0627\u0639\u062A] LT",
            nextDay: "[\u0641\u0631\u062F\u0627 \u0633\u0627\u0639\u062A] LT",
            nextWeek: "dddd [\u0633\u0627\u0639\u062A] LT",
            lastDay: "[\u062F\u06CC\u0631\u0648\u0632 \u0633\u0627\u0639\u062A] LT",
            lastWeek: "dddd [\u06CC \u067E\u06CC\u0634 \u0633\u0627\u0639\u062A] LT",
            sameElse: "L"
          },
          relativeTime: {
            future: "\u062F\u0631 %s",
            past: "%s \u067E\u06CC\u0634",
            s: "\u0686\u0646\u062F \u062B\u0627\u0646\u06CC\u0647",
            m: "1 \u062F\u0642\u06CC\u0642\u0647",
            mm: "%d \u062F\u0642\u06CC\u0642\u0647",
            h: "1 \u0633\u0627\u0639\u062A",
            hh: "%d \u0633\u0627\u0639\u062A",
            d: "1 \u0631\u0648\u0632",
            dd: "%d \u0631\u0648\u0632",
            M: "1 \u0645\u0627\u0647",
            MM: "%d \u0645\u0627\u0647",
            y: "1 \u0633\u0627\u0644",
            yy: "%d \u0633\u0627\u0644"
          },
          preparse: function(string) {
            if (usePersianDigits) {
              return string.replace(/[۰-۹]/g, function(match) {
                return numberMap[match];
              }).replace(/،/g, ",");
            }
            return string;
          },
          postformat: function(string) {
            if (usePersianDigits) {
              return string.replace(/\d/g, function(match) {
                return symbolMap[match];
              }).replace(/,/g, "\u060C");
            }
            return string;
          },
          ordinal: "%d\u0645",
          week: {
            dow: 6,
            doy: 12
            // The week that contains Jan 1st is the first week of the year.
          },
          meridiem: function(hour) {
            return hour < 12 ? "\u0642.\u0638" : "\u0628.\u0638";
          },
          jMonths: {
            "persian": "\u0641\u0631\u0648\u0631\u062F\u06CC\u0646_\u0627\u0631\u062F\u06CC\u0628\u0647\u0634\u062A_\u062E\u0631\u062F\u0627\u062F_\u062A\u06CC\u0631_\u0627\u0645\u0631\u062F\u0627\u062F_\u0634\u0647\u0631\u06CC\u0648\u0631_\u0645\u0647\u0631_\u0622\u0628\u0627\u0646_\u0622\u0630\u0631_\u062F\u06CC_\u0628\u0647\u0645\u0646_\u0627\u0633\u0641\u0646\u062F".split("_"),
            "persian-modern": "\u0641\u0631\u0648\u0631\u062F\u06CC\u0646_\u0627\u0631\u062F\u06CC\u0628\u0647\u0634\u062A_\u062E\u0631\u062F\u0627\u062F_\u062A\u06CC\u0631_\u0645\u0631\u062F\u0627\u062F_\u0634\u0647\u0631\u06CC\u0648\u0631_\u0645\u0647\u0631_\u0622\u0628\u0627\u0646_\u0622\u0630\u0631_\u062F\u06CC_\u0628\u0647\u0645\u0646_\u0627\u0633\u0641\u0646\u062F".split("_")
          }[dialect],
          jMonthsShort: {
            "persian": "\u0641\u0631\u0648_\u0627\u0631\u062F_\u062E\u0631\u062F_\u062A\u06CC\u0631_\u0627\u0645\u0631_\u0634\u0647\u0631_\u0645\u0647\u0631_\u0622\u0628\u0627_\u0622\u0630\u0631_\u062F\u06CC_\u0628\u0647\u0645_\u0627\u0633\u0641".split("_"),
            "persian-modern": "\u0641\u0631\u0648_\u0627\u0631\u062F_\u062E\u0631\u062F_\u062A\u06CC\u0631_\u0645\u0631\u062F_\u0634\u0647\u0631_\u0645\u0647\u0631_\u0622\u0628\u0627_\u0622\u0630\u0631_\u062F\u06CC_\u0628\u0647\u0645_\u0627\u0633\u0641".split("_")
          }[dialect]
        }
      );
    };
    jMoment.loadPersian_dari = function(args) {
      var usePersianDigits = args !== void 0 && args.hasOwnProperty("usePersianDigits") ? args.usePersianDigits : false;
      var dialect = args !== void 0 && args.hasOwnProperty("dialect") ? args.dialect : "persian-dari";
      moment5.locale("fa-af");
      moment5.updateLocale(
        "fa-af",
        {
          months: "\u062C\u0646\u0648\u0631\u06CC_\u0641\u0628\u0631\u0648\u0631\u06CC_\u0645\u0627\u0631\u0686_\u0627\u067E\u0631\u06CC\u0644_\u0645\u06CC_\u062C\u0648\u0646_\u062C\u0648\u0644\u0627\u06CC_\u0622\u06AF\u0633\u062A_\u0633\u067E\u062A\u0645\u0628\u0631_\u0627\u06A9\u062A\u0648\u0628\u0631_\u0646\u0648\u0645\u0628\u0631_\u062F\u06CC\u0633\u0645\u0628\u0631".split("_"),
          monthsShort: "\u062C\u0646\u0648\u0631\u06CC_\u0641\u0628\u0631\u0648\u0631\u06CC_\u0645\u0627\u0631\u0686_\u0627\u067E\u0631\u06CC\u0644_\u0645\u06CC_\u062C\u0648\u0646_\u062C\u0648\u0644\u0627\u06CC_\u0622\u06AF\u0633\u062A_\u0633\u067E\u062A\u0645\u0628\u0631_\u0627\u06A9\u062A\u0648\u0628\u0631_\u0646\u0648\u0645\u0628\u0631_\u062F\u06CC\u0633\u0645\u0628\u0631".split("_"),
          weekdays: {
            "persian": "\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u0622\u062F\u06CC\u0646\u0647_\u0634\u0646\u0628\u0647".split("_"),
            "persian-modern": "\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647".split("_")
          }[dialect],
          weekdaysShort: {
            "persian": "\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u0622\u062F\u06CC\u0646\u0647_\u0634\u0646\u0628\u0647".split("_"),
            "persian-modern": "\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647".split("_")
          }[dialect],
          weekdaysMin: {
            "persian": "\u06CC_\u062F_\u0633_\u0686_\u067E_\u0622_\u0634".split("_"),
            "persian-modern": "\u06CC_\u062F_\u0633_\u0686_\u067E_\u062C_\u0634".split("_")
          }[dialect],
          longDateFormat: {
            LT: "HH:mm",
            L: "jYYYY/jMM/jDD",
            LL: "jD jMMMM jYYYY",
            LLL: "jD jMMMM jYYYY LT",
            LLLL: "dddd\u060C jD jMMMM jYYYY LT"
          },
          calendar: {
            sameDay: "[\u0627\u0645\u0631\u0648\u0632 \u0633\u0627\u0639\u062A] LT",
            nextDay: "[\u0641\u0631\u062F\u0627 \u0633\u0627\u0639\u062A] LT",
            nextWeek: "dddd [\u0633\u0627\u0639\u062A] LT",
            lastDay: "[\u062F\u06CC\u0631\u0648\u0632 \u0633\u0627\u0639\u062A] LT",
            lastWeek: "dddd [\u06CC \u067E\u06CC\u0634 \u0633\u0627\u0639\u062A] LT",
            sameElse: "L"
          },
          relativeTime: {
            future: "\u062F\u0631 %s",
            past: "%s \u067E\u06CC\u0634",
            s: "\u0686\u0646\u062F \u062B\u0627\u0646\u06CC\u0647",
            m: "1 \u062F\u0642\u06CC\u0642\u0647",
            mm: "%d \u062F\u0642\u06CC\u0642\u0647",
            h: "1 \u0633\u0627\u0639\u062A",
            hh: "%d \u0633\u0627\u0639\u062A",
            d: "1 \u0631\u0648\u0632",
            dd: "%d \u0631\u0648\u0632",
            M: "1 \u0645\u0627\u0647",
            MM: "%d \u0645\u0627\u0647",
            y: "1 \u0633\u0627\u0644",
            yy: "%d \u0633\u0627\u0644"
          },
          preparse: function(string) {
            if (usePersianDigits) {
              return string.replace(/[۰-۹]/g, function(match) {
                return numberMap[match];
              }).replace(/،/g, ",");
            }
            return string;
          },
          postformat: function(string) {
            if (usePersianDigits) {
              return string.replace(/\d/g, function(match) {
                return symbolMap[match];
              }).replace(/,/g, "\u060C");
            }
            return string;
          },
          ordinal: "%d\u0645",
          week: {
            dow: 6,
            doy: 12
            // The week that contains Jan 1st is the first week of the year.
          },
          meridiem: function(hour) {
            return hour < 12 ? "\u0642.\u0638" : "\u0628.\u0638";
          },
          jMonths: {
            "persian-dari": "\u062D\u0645\u0644_\u062B\u0648\u0631_\u062C\u0648\u0632\u0627_\u0633\u0631\u0637\u0627\u0646_\u0627\u0633\u062F_\u0633\u0646\u0628\u0644\u0647_\u0645\u06CC\u0632\u0627\u0646_\u0639\u0642\u0631\u0628_\u0642\u0648\u0633_\u062C\u062F\u06CC_\u062F\u0644\u0648_\u062D\u0648\u062A".split("_"),
            "persian-modern-dari": "\u062D\u0645\u0644_\u062B\u0648\u0631_\u062C\u0648\u0632\u0627_\u0633\u0631\u0637\u0627\u0646_\u0627\u0633\u062F_\u0633\u0646\u0628\u0644\u0647_\u0645\u06CC\u0632\u0627\u0646_\u0639\u0642\u0631\u0628_\u0642\u0648\u0633_\u062C\u062F\u06CC_\u062F\u0644\u0648_\u062D\u0648\u062A".split("_")
          }[dialect],
          jMonthsShort: {
            "persian-dari": "\u062D\u0645\u0644_\u062B\u0648\u0631_\u062C\u0648\u0632\u0627_\u0633\u0631\u0637_\u0627\u0633\u062F_\u0633\u0646\u0628_\u0645\u06CC\u0632_\u0639\u0642\u0631_\u0642\u0648\u0633_\u062C\u062F\u06CC_\u062F\u0644\u0648_\u062D\u0648\u062A".split("_"),
            "persian-modern-dari": "\u062D\u0645\u0644_\u062B\u0648\u0631_\u062C\u0648\u0632\u0627_\u0633\u0631\u0637_\u0627\u0633\u062F_\u0633\u0646\u0628_\u0645\u06CC\u0632_\u0639\u0642\u0631_\u0642\u0648\u0633_\u062C\u062F\u06CC_\u062F\u0644\u0648_\u062D\u0648\u062A".split("_")
          }[dialect]
        }
      );
    };
    jMoment.loadPashto = function(args) {
      var usePersianDigits = args !== void 0 && args.hasOwnProperty("usePersianDigits") ? args.usePersianDigits : false;
      var dialect = args !== void 0 && args.hasOwnProperty("dialect") ? args.dialect : "pashto";
      moment5.locale("ps-af");
      moment5.updateLocale(
        "ps-af",
        {
          months: "\u062C\u0646\u0648\u0631\u06CC_\u0641\u0628\u0631\u0648\u0631\u06CC_\u0645\u0627\u0631\u0686_\u0627\u067E\u0631\u06CC\u0644_\u0645\u06CC_\u062C\u0648\u0646_\u062C\u0648\u0644\u0627\u06CC_\u0622\u06AF\u0633\u062A_\u0633\u067E\u062A\u0645\u0628\u0631_\u0627\u06A9\u062A\u0648\u0628\u0631_\u0646\u0648\u0645\u0628\u0631_\u062F\u06CC\u0633\u0645\u0628\u0631".split("_"),
          monthsShort: "\u062C\u0646\u0648\u0631\u06CC_\u0641\u0628\u0631\u0648\u0631\u06CC_\u0645\u0627\u0631\u0686_\u0627\u067E\u0631\u06CC\u0644_\u0645\u06CC_\u062C\u0648\u0646_\u062C\u0648\u0644\u0627\u06CC_\u0622\u06AF\u0633\u062A_\u0633\u067E\u062A\u0645\u0628\u0631_\u0627\u06A9\u062A\u0648\u0628\u0631_\u0646\u0648\u0645\u0628\u0631_\u062F\u06CC\u0633\u0645\u0628\u0631".split("_"),
          weekdays: {
            "pashto": "\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u0622\u062F\u06CC\u0646\u0647_\u0634\u0646\u0628\u0647".split("_"),
            "pashto-modern": "\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647".split("_")
          }[dialect],
          weekdaysShort: {
            "pashto": "\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u0622\u062F\u06CC\u0646\u0647_\u0634\u0646\u0628\u0647".split("_"),
            "pashto-modern": "\u06CC\u06A9\u200C\u0634\u0646\u0628\u0647_\u062F\u0648\u0634\u0646\u0628\u0647_\u0633\u0647\u200C\u0634\u0646\u0628\u0647_\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647_\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647_\u062C\u0645\u0639\u0647_\u0634\u0646\u0628\u0647".split("_")
          }[dialect],
          weekdaysMin: {
            "pashto": "\u06CC_\u062F_\u0633_\u0686_\u067E_\u0622_\u0634".split("_"),
            "pashto-modern": "\u06CC_\u062F_\u0633_\u0686_\u067E_\u062C_\u0634".split("_")
          }[dialect],
          longDateFormat: {
            LT: "HH:mm",
            L: "jYYYY/jMM/jDD",
            LL: "jD jMMMM jYYYY",
            LLL: "jD jMMMM jYYYY LT",
            LLLL: "dddd\u060C jD jMMMM jYYYY LT"
          },
          calendar: {
            sameDay: "[\u0627\u0645\u0631\u0648\u0632 \u0633\u0627\u0639\u062A] LT",
            nextDay: "[\u0641\u0631\u062F\u0627 \u0633\u0627\u0639\u062A] LT",
            nextWeek: "dddd [\u0633\u0627\u0639\u062A] LT",
            lastDay: "[\u062F\u06CC\u0631\u0648\u0632 \u0633\u0627\u0639\u062A] LT",
            lastWeek: "dddd [\u06CC \u067E\u06CC\u0634 \u0633\u0627\u0639\u062A] LT",
            sameElse: "L"
          },
          relativeTime: {
            future: "\u062F\u0631 %s",
            past: "%s \u067E\u06CC\u0634",
            s: "\u0686\u0646\u062F \u062B\u0627\u0646\u06CC\u0647",
            m: "1 \u062F\u0642\u06CC\u0642\u0647",
            mm: "%d \u062F\u0642\u06CC\u0642\u0647",
            h: "1 \u0633\u0627\u0639\u062A",
            hh: "%d \u0633\u0627\u0639\u062A",
            d: "1 \u0631\u0648\u0632",
            dd: "%d \u0631\u0648\u0632",
            M: "1 \u0645\u0627\u0647",
            MM: "%d \u0645\u0627\u0647",
            y: "1 \u0633\u0627\u0644",
            yy: "%d \u0633\u0627\u0644"
          },
          preparse: function(string) {
            if (usePersianDigits) {
              return string.replace(/[۰-۹]/g, function(match) {
                return numberMap[match];
              }).replace(/،/g, ",");
            }
            return string;
          },
          postformat: function(string) {
            if (usePersianDigits) {
              return string.replace(/\d/g, function(match) {
                return symbolMap[match];
              }).replace(/,/g, "\u060C");
            }
            return string;
          },
          ordinal: "%d\u0645",
          week: {
            dow: 6,
            doy: 12
            // The week that contains Jan 1st is the first week of the year.
          },
          meridiem: function(hour) {
            return hour < 12 ? "\u0642.\u0638" : "\u0628.\u0638";
          },
          jMonths: {
            "pashto": "\u0648\u0631\u06CC_\u063A\u0648\u06CC\u06CC_\u063A\u0628\u0631\u06AB\u0648\u0644\u06CC_\u0686\u0646\u06AB\u0627\u069A_\u0632\u0645\u0631\u06CC_\u0648\u0696\u06CC_\u062A\u0644\u0647_\u0644\u0693\u0645_\u0644\u06CC\u0646\u062F\u06CC_\u0645\u0631\u063A\u0648\u0645\u06CC_\u0633\u0644\u0648\u0627\u063A\u0647_\u06A9\u0628".split("_"),
            "pashto-modern": "\u0648\u0631\u06CC_\u063A\u0648\u06CC\u06CC_\u063A\u0628\u0631\u06AB\u0648\u0644\u06CC_\u0686\u0646\u06AB\u0627\u069A_\u0632\u0645\u0631\u06CC_\u0648\u0696\u06CC_\u062A\u0644\u0647_\u0644\u0693\u0645_\u0644\u06CC\u0646\u062F\u06CC_\u0645\u0631\u063A\u0648\u0645\u06CC_\u0633\u0644\u0648\u0627\u063A\u0647_\u06A9\u0628".split("_")
          }[dialect],
          jMonthsShort: {
            "pashto": "\u0648\u0631\u06CC_\u063A\u0648\u06CC_\u063A\u0628\u0631_\u0686\u0646\u06AB_\u0632\u0645\u0631_\u0648\u0696\u06CC_\u0644\u0693\u0645_\u0644\u06CC\u0646_\u0645\u0631\u063A_\u0633\u0644\u0648_\u06A9\u0628".split("_"),
            "pashto-modern": "\u0648\u0631\u06CC_\u063A\u0648\u06CC_\u063A\u0628\u0631_\u0686\u0646\u06AB_\u0632\u0645\u0631_\u0648\u0696\u06CC_\u0644\u0693\u0645_\u0644\u06CC\u0646_\u0645\u0631\u063A_\u0633\u0644\u0648_\u06A9\u0628".split("_")
          }[dialect]
        }
      );
    };
    jMoment.jConvert = {
      toJalaali: toJalaali5,
      toGregorian: toGregorian5
    };
    function toJalaali5(gy, gm, gd) {
      try {
        var j = jalaali3.toJalaali(gy, gm + 1, gd);
        j.jm -= 1;
        return j;
      } catch (e) {
        return {
          jy: NaN,
          jm: NaN,
          jd: NaN
        };
      }
    }
    function toGregorian5(jy, jm, jd) {
      try {
        var g = jalaali3.toGregorian(jy, jm + 1, jd);
        g.gm -= 1;
        return g;
      } catch (e) {
        return {
          gy: NaN,
          gm: NaN,
          gd: NaN
        };
      }
    }
    function div(a, b) {
      return ~~(a / b);
    }
    function mod(a, b) {
      return a - ~~(a / b) * b;
    }
  }
});

// node_modules/moment-hijri/moment-hijri.js
var require_moment_hijri = __commonJS({
  "node_modules/moment-hijri/moment-hijri.js"(exports, module2) {
    "use strict";
    (function(root, factory) {
      if (typeof define === "function" && define.amd) {
        define(["moment"], function(moment5) {
          root.moment = factory(moment5);
          return root.moment;
        });
      } else if (typeof exports === "object") {
        module2.exports = factory(require_moment());
      } else {
        root.moment = factory(root.moment);
      }
    })(exports, function(moment5) {
      if (moment5 == null) {
        throw new Error("Cannot find moment");
      }
      var ummalqura = {
        ummalquraData: [
          28607,
          28636,
          28665,
          28695,
          28724,
          28754,
          28783,
          28813,
          28843,
          28872,
          28901,
          28931,
          28960,
          28990,
          29019,
          29049,
          29078,
          29108,
          29137,
          29167,
          29196,
          29226,
          29255,
          29285,
          29315,
          29345,
          29375,
          29404,
          29434,
          29463,
          29492,
          29522,
          29551,
          29580,
          29610,
          29640,
          29669,
          29699,
          29729,
          29759,
          29788,
          29818,
          29847,
          29876,
          29906,
          29935,
          29964,
          29994,
          30023,
          30053,
          30082,
          30112,
          30141,
          30171,
          30200,
          30230,
          30259,
          30289,
          30318,
          30348,
          30378,
          30408,
          30437,
          30467,
          30496,
          30526,
          30555,
          30585,
          30614,
          30644,
          30673,
          30703,
          30732,
          30762,
          30791,
          30821,
          30850,
          30880,
          30909,
          30939,
          30968,
          30998,
          31027,
          31057,
          31086,
          31116,
          31145,
          31175,
          31204,
          31234,
          31263,
          31293,
          31322,
          31352,
          31381,
          31411,
          31441,
          31471,
          31500,
          31530,
          31559,
          31589,
          31618,
          31648,
          31676,
          31706,
          31736,
          31766,
          31795,
          31825,
          31854,
          31884,
          31913,
          31943,
          31972,
          32002,
          32031,
          32061,
          32090,
          32120,
          32150,
          32180,
          32209,
          32239,
          32268,
          32298,
          32327,
          32357,
          32386,
          32416,
          32445,
          32475,
          32504,
          32534,
          32563,
          32593,
          32622,
          32652,
          32681,
          32711,
          32740,
          32770,
          32799,
          32829,
          32858,
          32888,
          32917,
          32947,
          32976,
          33006,
          33035,
          33065,
          33094,
          33124,
          33153,
          33183,
          33213,
          33243,
          33272,
          33302,
          33331,
          33361,
          33390,
          33420,
          33450,
          33479,
          33509,
          33539,
          33568,
          33598,
          33627,
          33657,
          33686,
          33716,
          33745,
          33775,
          33804,
          33834,
          33863,
          33893,
          33922,
          33952,
          33981,
          34011,
          34040,
          34069,
          34099,
          34128,
          34158,
          34187,
          34217,
          34247,
          34277,
          34306,
          34336,
          34365,
          34395,
          34424,
          34454,
          34483,
          34512,
          34542,
          34571,
          34601,
          34631,
          34660,
          34690,
          34719,
          34749,
          34778,
          34808,
          34837,
          34867,
          34896,
          34926,
          34955,
          34985,
          35015,
          35044,
          35074,
          35103,
          35133,
          35162,
          35192,
          35222,
          35251,
          35280,
          35310,
          35340,
          35370,
          35399,
          35429,
          35458,
          35488,
          35517,
          35547,
          35576,
          35605,
          35635,
          35665,
          35694,
          35723,
          35753,
          35782,
          35811,
          35841,
          35871,
          35901,
          35930,
          35960,
          35989,
          36019,
          36048,
          36078,
          36107,
          36136,
          36166,
          36195,
          36225,
          36254,
          36284,
          36314,
          36343,
          36373,
          36403,
          36433,
          36462,
          36492,
          36521,
          36551,
          36580,
          36610,
          36639,
          36669,
          36698,
          36728,
          36757,
          36786,
          36816,
          36845,
          36875,
          36904,
          36934,
          36963,
          36993,
          37022,
          37052,
          37081,
          37111,
          37141,
          37170,
          37200,
          37229,
          37259,
          37288,
          37318,
          37347,
          37377,
          37406,
          37436,
          37465,
          37495,
          37524,
          37554,
          37584,
          37613,
          37643,
          37672,
          37701,
          37731,
          37760,
          37790,
          37819,
          37849,
          37878,
          37908,
          37938,
          37967,
          37997,
          38027,
          38056,
          38085,
          38115,
          38144,
          38174,
          38203,
          38233,
          38262,
          38292,
          38322,
          38351,
          38381,
          38410,
          38440,
          38469,
          38499,
          38528,
          38558,
          38587,
          38617,
          38646,
          38676,
          38705,
          38735,
          38764,
          38794,
          38823,
          38853,
          38882,
          38912,
          38941,
          38971,
          39001,
          39030,
          39059,
          39089,
          39118,
          39148,
          39178,
          39208,
          39237,
          39267,
          39297,
          39326,
          39355,
          39385,
          39414,
          39444,
          39473,
          39503,
          39532,
          39562,
          39592,
          39621,
          39650,
          39680,
          39709,
          39739,
          39768,
          39798,
          39827,
          39857,
          39886,
          39916,
          39946,
          39975,
          40005,
          40035,
          40064,
          40094,
          40123,
          40153,
          40182,
          40212,
          40241,
          40271,
          40300,
          40330,
          40359,
          40389,
          40418,
          40448,
          40477,
          40507,
          40536,
          40566,
          40595,
          40625,
          40655,
          40685,
          40714,
          40744,
          40773,
          40803,
          40832,
          40862,
          40892,
          40921,
          40951,
          40980,
          41009,
          41039,
          41068,
          41098,
          41127,
          41157,
          41186,
          41216,
          41245,
          41275,
          41304,
          41334,
          41364,
          41393,
          41422,
          41452,
          41481,
          41511,
          41540,
          41570,
          41599,
          41629,
          41658,
          41688,
          41718,
          41748,
          41777,
          41807,
          41836,
          41865,
          41894,
          41924,
          41953,
          41983,
          42012,
          42042,
          42072,
          42102,
          42131,
          42161,
          42190,
          42220,
          42249,
          42279,
          42308,
          42337,
          42367,
          42397,
          42426,
          42456,
          42485,
          42515,
          42545,
          42574,
          42604,
          42633,
          42662,
          42692,
          42721,
          42751,
          42780,
          42810,
          42839,
          42869,
          42899,
          42929,
          42958,
          42988,
          43017,
          43046,
          43076,
          43105,
          43135,
          43164,
          43194,
          43223,
          43253,
          43283,
          43312,
          43342,
          43371,
          43401,
          43430,
          43460,
          43489,
          43519,
          43548,
          43578,
          43607,
          43637,
          43666,
          43696,
          43726,
          43755,
          43785,
          43814,
          43844,
          43873,
          43903,
          43932,
          43962,
          43991,
          44021,
          44050,
          44080,
          44109,
          44139,
          44169,
          44198,
          44228,
          44258,
          44287,
          44317,
          44346,
          44375,
          44405,
          44434,
          44464,
          44493,
          44523,
          44553,
          44582,
          44612,
          44641,
          44671,
          44700,
          44730,
          44759,
          44788,
          44818,
          44847,
          44877,
          44906,
          44936,
          44966,
          44996,
          45025,
          45055,
          45084,
          45114,
          45143,
          45172,
          45202,
          45231,
          45261,
          45290,
          45320,
          45350,
          45380,
          45409,
          45439,
          45468,
          45498,
          45527,
          45556,
          45586,
          45615,
          45644,
          45674,
          45704,
          45733,
          45763,
          45793,
          45823,
          45852,
          45882,
          45911,
          45940,
          45970,
          45999,
          46028,
          46058,
          46088,
          46117,
          46147,
          46177,
          46206,
          46236,
          46265,
          46295,
          46324,
          46354,
          46383,
          46413,
          46442,
          46472,
          46501,
          46531,
          46560,
          46590,
          46620,
          46649,
          46679,
          46708,
          46738,
          46767,
          46797,
          46826,
          46856,
          46885,
          46915,
          46944,
          46974,
          47003,
          47033,
          47063,
          47092,
          47122,
          47151,
          47181,
          47210,
          47240,
          47269,
          47298,
          47328,
          47357,
          47387,
          47417,
          47446,
          47476,
          47506,
          47535,
          47565,
          47594,
          47624,
          47653,
          47682,
          47712,
          47741,
          47771,
          47800,
          47830,
          47860,
          47890,
          47919,
          47949,
          47978,
          48008,
          48037,
          48066,
          48096,
          48125,
          48155,
          48184,
          48214,
          48244,
          48273,
          48303,
          48333,
          48362,
          48392,
          48421,
          48450,
          48480,
          48509,
          48538,
          48568,
          48598,
          48627,
          48657,
          48687,
          48717,
          48746,
          48776,
          48805,
          48834,
          48864,
          48893,
          48922,
          48952,
          48982,
          49011,
          49041,
          49071,
          49100,
          49130,
          49160,
          49189,
          49218,
          49248,
          49277,
          49306,
          49336,
          49365,
          49395,
          49425,
          49455,
          49484,
          49514,
          49543,
          49573,
          49602,
          49632,
          49661,
          49690,
          49720,
          49749,
          49779,
          49809,
          49838,
          49868,
          49898,
          49927,
          49957,
          49986,
          50016,
          50045,
          50075,
          50104,
          50133,
          50163,
          50192,
          50222,
          50252,
          50281,
          50311,
          50340,
          50370,
          50400,
          50429,
          50459,
          50488,
          50518,
          50547,
          50576,
          50606,
          50635,
          50665,
          50694,
          50724,
          50754,
          50784,
          50813,
          50843,
          50872,
          50902,
          50931,
          50960,
          50990,
          51019,
          51049,
          51078,
          51108,
          51138,
          51167,
          51197,
          51227,
          51256,
          51286,
          51315,
          51345,
          51374,
          51403,
          51433,
          51462,
          51492,
          51522,
          51552,
          51582,
          51611,
          51641,
          51670,
          51699,
          51729,
          51758,
          51787,
          51816,
          51846,
          51876,
          51906,
          51936,
          51965,
          51995,
          52025,
          52054,
          52083,
          52113,
          52142,
          52171,
          52200,
          52230,
          52260,
          52290,
          52319,
          52349,
          52379,
          52408,
          52438,
          52467,
          52497,
          52526,
          52555,
          52585,
          52614,
          52644,
          52673,
          52703,
          52733,
          52762,
          52792,
          52822,
          52851,
          52881,
          52910,
          52939,
          52969,
          52998,
          53028,
          53057,
          53087,
          53116,
          53146,
          53176,
          53205,
          53235,
          53264,
          53294,
          53324,
          53353,
          53383,
          53412,
          53441,
          53471,
          53500,
          53530,
          53559,
          53589,
          53619,
          53648,
          53678,
          53708,
          53737,
          53767,
          53796,
          53825,
          53855,
          53884,
          53913,
          53943,
          53973,
          54003,
          54032,
          54062,
          54092,
          54121,
          54151,
          54180,
          54209,
          54239,
          54268,
          54297,
          54327,
          54357,
          54387,
          54416,
          54446,
          54476,
          54505,
          54535,
          54564,
          54593,
          54623,
          54652,
          54681,
          54711,
          54741,
          54770,
          54800,
          54830,
          54859,
          54889,
          54919,
          54948,
          54977,
          55007,
          55036,
          55066,
          55095,
          55125,
          55154,
          55184,
          55213,
          55243,
          55273,
          55302,
          55332,
          55361,
          55391,
          55420,
          55450,
          55479,
          55508,
          55538,
          55567,
          55597,
          55627,
          55657,
          55686,
          55716,
          55745,
          55775,
          55804,
          55834,
          55863,
          55892,
          55922,
          55951,
          55981,
          56011,
          56040,
          56070,
          56100,
          56129,
          56159,
          56188,
          56218,
          56247,
          56276,
          56306,
          56335,
          56365,
          56394,
          56424,
          56454,
          56483,
          56513,
          56543,
          56572,
          56601,
          56631,
          56660,
          56690,
          56719,
          56749,
          56778,
          56808,
          56837,
          56867,
          56897,
          56926,
          56956,
          56985,
          57015,
          57044,
          57074,
          57103,
          57133,
          57162,
          57192,
          57221,
          57251,
          57280,
          57310,
          57340,
          57369,
          57399,
          57429,
          57458,
          57487,
          57517,
          57546,
          57576,
          57605,
          57634,
          57664,
          57694,
          57723,
          57753,
          57783,
          57813,
          57842,
          57871,
          57901,
          57930,
          57959,
          57989,
          58018,
          58048,
          58077,
          58107,
          58137,
          58167,
          58196,
          58226,
          58255,
          58285,
          58314,
          58343,
          58373,
          58402,
          58432,
          58461,
          58491,
          58521,
          58551,
          58580,
          58610,
          58639,
          58669,
          58698,
          58727,
          58757,
          58786,
          58816,
          58845,
          58875,
          58905,
          58934,
          58964,
          58994,
          59023,
          59053,
          59082,
          59111,
          59141,
          59170,
          59200,
          59229,
          59259,
          59288,
          59318,
          59348,
          59377,
          59407,
          59436,
          59466,
          59495,
          59525,
          59554,
          59584,
          59613,
          59643,
          59672,
          59702,
          59731,
          59761,
          59791,
          59820,
          59850,
          59879,
          59909,
          59939,
          59968,
          59997,
          60027,
          60056,
          60086,
          60115,
          60145,
          60174,
          60204,
          60234,
          60264,
          60293,
          60323,
          60352,
          60381,
          60411,
          60440,
          60469,
          60499,
          60528,
          60558,
          60588,
          60618,
          60648,
          60677,
          60707,
          60736,
          60765,
          60795,
          60824,
          60853,
          60883,
          60912,
          60942,
          60972,
          61002,
          61031,
          61061,
          61090,
          61120,
          61149,
          61179,
          61208,
          61237,
          61267,
          61296,
          61326,
          61356,
          61385,
          61415,
          61445,
          61474,
          61504,
          61533,
          61563,
          61592,
          61621,
          61651,
          61680,
          61710,
          61739,
          61769,
          61799,
          61828,
          61858,
          61888,
          61917,
          61947,
          61976,
          62006,
          62035,
          62064,
          62094,
          62123,
          62153,
          62182,
          62212,
          62242,
          62271,
          62301,
          62331,
          62360,
          62390,
          62419,
          62448,
          62478,
          62507,
          62537,
          62566,
          62596,
          62625,
          62655,
          62685,
          62715,
          62744,
          62774,
          62803,
          62832,
          62862,
          62891,
          62921,
          62950,
          62980,
          63009,
          63039,
          63069,
          63099,
          63128,
          63157,
          63187,
          63216,
          63246,
          63275,
          63305,
          63334,
          63363,
          63393,
          63423,
          63453,
          63482,
          63512,
          63541,
          63571,
          63600,
          63630,
          63659,
          63689,
          63718,
          63747,
          63777,
          63807,
          63836,
          63866,
          63895,
          63925,
          63955,
          63984,
          64014,
          64043,
          64073,
          64102,
          64131,
          64161,
          64190,
          64220,
          64249,
          64279,
          64309,
          64339,
          64368,
          64398,
          64427,
          64457,
          64486,
          64515,
          64545,
          64574,
          64603,
          64633,
          64663,
          64692,
          64722,
          64752,
          64782,
          64811,
          64841,
          64870,
          64899,
          64929,
          64958,
          64987,
          65017,
          65047,
          65076,
          65106,
          65136,
          65166,
          65195,
          65225,
          65254,
          65283,
          65313,
          65342,
          65371,
          65401,
          65431,
          65460,
          65490,
          65520,
          65549,
          65579,
          65608,
          65638,
          65667,
          65697,
          65726,
          65755,
          65785,
          65815,
          65844,
          65874,
          65903,
          65933,
          65963,
          65992,
          66022,
          66051,
          66081,
          66110,
          66140,
          66169,
          66199,
          66228,
          66258,
          66287,
          66317,
          66346,
          66376,
          66405,
          66435,
          66465,
          66494,
          66524,
          66553,
          66583,
          66612,
          66641,
          66671,
          66700,
          66730,
          66760,
          66789,
          66819,
          66849,
          66878,
          66908,
          66937,
          66967,
          66996,
          67025,
          67055,
          67084,
          67114,
          67143,
          67173,
          67203,
          67233,
          67262,
          67292,
          67321,
          67351,
          67380,
          67409,
          67439,
          67468,
          67497,
          67527,
          67557,
          67587,
          67617,
          67646,
          67676,
          67705,
          67735,
          67764,
          67793,
          67823,
          67852,
          67882,
          67911,
          67941,
          67971,
          68e3,
          68030,
          68060,
          68089,
          68119,
          68148,
          68177,
          68207,
          68236,
          68266,
          68295,
          68325,
          68354,
          68384,
          68414,
          68443,
          68473,
          68502,
          68532,
          68561,
          68591,
          68620,
          68650,
          68679,
          68708,
          68738,
          68768,
          68797,
          68827,
          68857,
          68886,
          68916,
          68946,
          68975,
          69004,
          69034,
          69063,
          69092,
          69122,
          69152,
          69181,
          69211,
          69240,
          69270,
          69300,
          69330,
          69359,
          69388,
          69418,
          69447,
          69476,
          69506,
          69535,
          69565,
          69595,
          69624,
          69654,
          69684,
          69713,
          69743,
          69772,
          69802,
          69831,
          69861,
          69890,
          69919,
          69949,
          69978,
          70008,
          70038,
          70067,
          70097,
          70126,
          70156,
          70186,
          70215,
          70245,
          70274,
          70303,
          70333,
          70362,
          70392,
          70421,
          70451,
          70481,
          70510,
          70540,
          70570,
          70599,
          70629,
          70658,
          70687,
          70717,
          70746,
          70776,
          70805,
          70835,
          70864,
          70894,
          70924,
          70954,
          70983,
          71013,
          71042,
          71071,
          71101,
          71130,
          71159,
          71189,
          71218,
          71248,
          71278,
          71308,
          71337,
          71367,
          71397,
          71426,
          71455,
          71485,
          71514,
          71543,
          71573,
          71602,
          71632,
          71662,
          71691,
          71721,
          71751,
          71781,
          71810,
          71839,
          71869,
          71898,
          71927,
          71957,
          71986,
          72016,
          72046,
          72075,
          72105,
          72135,
          72164,
          72194,
          72223,
          72253,
          72282,
          72311,
          72341,
          72370,
          72400,
          72429,
          72459,
          72489,
          72518,
          72548,
          72577,
          72607,
          72637,
          72666,
          72695,
          72725,
          72754,
          72784,
          72813,
          72843,
          72872,
          72902,
          72931,
          72961,
          72991,
          73020,
          73050,
          73080,
          73109,
          73139,
          73168,
          73197,
          73227,
          73256,
          73286,
          73315,
          73345,
          73375,
          73404,
          73434,
          73464,
          73493,
          73523,
          73552,
          73581,
          73611,
          73640,
          73669,
          73699,
          73729,
          73758,
          73788,
          73818,
          73848,
          73877,
          73907,
          73936,
          73965,
          73995,
          74024,
          74053,
          74083,
          74113,
          74142,
          74172,
          74202,
          74231,
          74261,
          74291,
          74320,
          74349,
          74379,
          74408,
          74437,
          74467,
          74497,
          74526,
          74556,
          74586,
          74615,
          74645,
          74675,
          74704,
          74733,
          74763,
          74792,
          74822,
          74851,
          74881,
          74910,
          74940,
          74969,
          74999,
          75029,
          75058,
          75088,
          75117,
          75147,
          75176,
          75206,
          75235,
          75264,
          75294,
          75323,
          75353,
          75383,
          75412,
          75442,
          75472,
          75501,
          75531,
          75560,
          75590,
          75619,
          75648,
          75678,
          75707,
          75737,
          75766,
          75796,
          75826,
          75856,
          75885,
          75915,
          75944,
          75974,
          76003,
          76032,
          76062,
          76091,
          76121,
          76150,
          76180,
          76210,
          76239,
          76269,
          76299,
          76328,
          76358,
          76387,
          76416,
          76446,
          76475,
          76505,
          76534,
          76564,
          76593,
          76623,
          76653,
          76682,
          76712,
          76741,
          76771,
          76801,
          76830,
          76859,
          76889,
          76918,
          76948,
          76977,
          77007,
          77036,
          77066,
          77096,
          77125,
          77155,
          77185,
          77214,
          77243,
          77273,
          77302,
          77332,
          77361,
          77390,
          77420,
          77450,
          77479,
          77509,
          77539,
          77569,
          77598,
          77627,
          77657,
          77686,
          77715,
          77745,
          77774,
          77804,
          77833,
          77863,
          77893,
          77923,
          77952,
          77982,
          78011,
          78041,
          78070,
          78099,
          78129,
          78158,
          78188,
          78217,
          78247,
          78277,
          78307,
          78336,
          78366,
          78395,
          78425,
          78454,
          78483,
          78513,
          78542,
          78572,
          78601,
          78631,
          78661,
          78690,
          78720,
          78750,
          78779,
          78808,
          78838,
          78867,
          78897,
          78926,
          78956,
          78985,
          79015,
          79044,
          79074,
          79104,
          79133,
          79163,
          79192,
          79222,
          79251,
          79281,
          79310,
          79340,
          79369,
          79399,
          79428,
          79458,
          79487,
          79517,
          79546,
          79576,
          79606,
          79635,
          79665,
          79695,
          79724,
          79753,
          79783,
          79812,
          79841,
          79871,
          79900,
          79930,
          79960,
          79990
        ]
      };
      var formattingTokens = /(\[[^\[]*\])|(\\)?i(Mo|MM?M?M?|Do|DDDo|DD?D?D?|w[o|w]?|YYYYY|YYYY|YY|gg(ggg?)?)|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|SS?S?|X|zz?|ZZ?|.)/g, localFormattingTokens = /(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g, parseTokenOneOrTwoDigits = /\d\d?/, parseTokenOneToThreeDigits = /\d{1,3}/, parseTokenThreeDigits = /\d{3}/, parseTokenFourDigits = /\d{1,4}/, parseTokenSixDigits = /[+\-]?\d{1,6}/, parseTokenWord = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+(\.?)|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/i, parseTokenT = /T/i, parseTokenTimestampMs = /[\+\-]?\d+(\.\d{1,3})?/, unitAliases = {
        hd: "idate",
        hm: "imonth",
        hy: "iyear"
      }, formatFunctions = {}, ordinalizeTokens = "DDD w M D".split(" "), paddedTokens = "M D w".split(" "), formatTokenFunctions = {
        iM: function() {
          return this.iMonth() + 1;
        },
        iMMM: function(format) {
          return this.localeData().iMonthsShort(this, format);
        },
        iMMMM: function(format) {
          return this.localeData().iMonths(this, format);
        },
        iD: function() {
          return this.iDate();
        },
        iDDD: function() {
          return this.iDayOfYear();
        },
        iw: function() {
          return this.iWeek();
        },
        iYY: function() {
          return leftZeroFill(this.iYear() % 100, 2);
        },
        iYYYY: function() {
          return leftZeroFill(this.iYear(), 4);
        },
        iYYYYY: function() {
          return leftZeroFill(this.iYear(), 5);
        },
        igg: function() {
          return leftZeroFill(this.iWeekYear() % 100, 2);
        },
        igggg: function() {
          return this.iWeekYear();
        },
        iggggg: function() {
          return leftZeroFill(this.iWeekYear(), 5);
        }
      }, i;
      function padToken(func, count) {
        return function(a) {
          return leftZeroFill(func.call(this, a), count);
        };
      }
      function ordinalizeToken(func, period) {
        return function(a) {
          return this.localeData().ordinal(func.call(this, a), period);
        };
      }
      while (ordinalizeTokens.length) {
        i = ordinalizeTokens.pop();
        formatTokenFunctions["i" + i + "o"] = ordinalizeToken(formatTokenFunctions["i" + i], i);
      }
      while (paddedTokens.length) {
        i = paddedTokens.pop();
        formatTokenFunctions["i" + i + i] = padToken(formatTokenFunctions["i" + i], 2);
      }
      formatTokenFunctions.iDDDD = padToken(formatTokenFunctions.iDDD, 3);
      function extend(a, b) {
        var key;
        for (key in b)
          if (b.hasOwnProperty(key))
            a[key] = b[key];
        return a;
      }
      function leftZeroFill(number, targetLength) {
        var output = number + "";
        while (output.length < targetLength)
          output = "0" + output;
        return output;
      }
      function isArray(input) {
        return Object.prototype.toString.call(input) === "[object Array]";
      }
      function normalizeUnits(units) {
        return units ? unitAliases[units] || units.toLowerCase().replace(/(.)s$/, "$1") : units;
      }
      function setDate(moment6, year, month, date) {
        var utc = moment6._isUTC ? "UTC" : "";
        moment6._d["set" + utc + "FullYear"](year);
        moment6._d["set" + utc + "Month"](month);
        moment6._d["set" + utc + "Date"](date);
      }
      function objectCreate(parent) {
        function F() {
        }
        F.prototype = parent;
        return new F();
      }
      function getPrototypeOf(object) {
        if (Object.getPrototypeOf)
          return Object.getPrototypeOf(object);
        else if ("".__proto__)
          return object.__proto__;
        else
          return object.constructor.prototype;
      }
      extend(getPrototypeOf(moment5.localeData()), {
        _iMonths: [
          "Muharram",
          "Safar",
          "Rabi' al-Awwal",
          "Rabi' al-Thani",
          "Jumada al-Ula",
          "Jumada al-Alkhirah",
          "Rajab",
          "Sha\u2019ban",
          "Ramadhan",
          "Shawwal",
          "Thul-Qi\u2019dah",
          "Thul-Hijjah"
        ],
        iMonths: function(m) {
          return this._iMonths[m.iMonth()];
        },
        _iMonthsShort: [
          "Muh",
          "Saf",
          "Rab-I",
          "Rab-II",
          "Jum-I",
          "Jum-II",
          "Raj",
          "Sha",
          "Ram",
          "Shw",
          "Dhu-Q",
          "Dhu-H"
        ],
        iMonthsShort: function(m) {
          return this._iMonthsShort[m.iMonth()];
        },
        iMonthsParse: function(monthName) {
          var i2, mom, regex;
          if (!this._iMonthsParse)
            this._iMonthsParse = [];
          for (i2 = 0; i2 < 12; i2 += 1) {
            if (!this._iMonthsParse[i2]) {
              mom = hMoment([2e3, (2 + i2) % 12, 25]);
              regex = "^" + this.iMonths(mom, "") + "$|^" + this.iMonthsShort(mom, "") + "$";
              this._iMonthsParse[i2] = new RegExp(regex.replace(".", ""), "i");
            }
            if (this._iMonthsParse[i2].test(monthName))
              return i2;
          }
        }
      });
      var iMonthNames = {
        iMonths: "\u0645\u062D\u0631\u0645_\u0635\u0641\u0631_\u0631\u0628\u064A\u0639 \u0627\u0644\u0623\u0648\u0644_\u0631\u0628\u064A\u0639 \u0627\u0644\u062B\u0627\u0646\u064A_\u062C\u0645\u0627\u062F\u0649 \u0627\u0644\u0623\u0648\u0644\u0649_\u062C\u0645\u0627\u062F\u0649 \u0627\u0644\u0622\u062E\u0631\u0629_\u0631\u062C\u0628_\u0634\u0639\u0628\u0627\u0646_\u0631\u0645\u0636\u0627\u0646_\u0634\u0648\u0627\u0644_\u0630\u0648 \u0627\u0644\u0642\u0639\u062F\u0629_\u0630\u0648 \u0627\u0644\u062D\u062C\u0629".split("_"),
        iMonthsShort: "\u0645\u062D\u0631\u0645_\u0635\u0641\u0631_\u0631\u0628\u064A\u0639 \u0661_\u0631\u0628\u064A\u0639 \u0662_\u062C\u0645\u0627\u062F\u0649 \u0661_\u062C\u0645\u0627\u062F\u0649 \u0662_\u0631\u062C\u0628_\u0634\u0639\u0628\u0627\u0646_\u0631\u0645\u0636\u0627\u0646_\u0634\u0648\u0627\u0644_\u0630\u0648 \u0627\u0644\u0642\u0639\u062F\u0629_\u0630\u0648 \u0627\u0644\u062D\u062C\u0629".split("_")
      };
      if (typeof moment5.updateLocale === "function") {
        moment5.updateLocale("ar-sa", iMonthNames);
      } else {
        var oldLocale = moment5.locale();
        moment5.defineLocale("ar-sa", iMonthNames);
        moment5.locale(oldLocale);
      }
      function makeFormatFunction(format) {
        var array = format.match(formattingTokens), length = array.length, i2;
        for (i2 = 0; i2 < length; i2 += 1)
          if (formatTokenFunctions[array[i2]])
            array[i2] = formatTokenFunctions[array[i2]];
        return function(mom) {
          var output = "";
          for (i2 = 0; i2 < length; i2 += 1)
            output += array[i2] instanceof Function ? "[" + array[i2].call(mom, format) + "]" : array[i2];
          return output;
        };
      }
      function getParseRegexForToken(token, config) {
        switch (token) {
          case "iDDDD":
            return parseTokenThreeDigits;
          case "iYYYY":
            return parseTokenFourDigits;
          case "iYYYYY":
            return parseTokenSixDigits;
          case "iDDD":
            return parseTokenOneToThreeDigits;
          case "iMMM":
          case "iMMMM":
            return parseTokenWord;
          case "iMM":
          case "iDD":
          case "iYY":
          case "iM":
          case "iD":
            return parseTokenOneOrTwoDigits;
          case "DDDD":
            return parseTokenThreeDigits;
          case "YYYY":
            return parseTokenFourDigits;
          case "YYYYY":
            return parseTokenSixDigits;
          case "S":
          case "SS":
          case "SSS":
          case "DDD":
            return parseTokenOneToThreeDigits;
          case "MMM":
          case "MMMM":
          case "dd":
          case "ddd":
          case "dddd":
            return parseTokenWord;
          case "a":
          case "A":
            return moment5.localeData(config._l)._meridiemParse;
          case "X":
            return parseTokenTimestampMs;
          case "Z":
          case "ZZ":
            return parseTokenTimezone;
          case "T":
            return parseTokenT;
          case "MM":
          case "DD":
          case "YY":
          case "HH":
          case "hh":
          case "mm":
          case "ss":
          case "M":
          case "D":
          case "d":
          case "H":
          case "h":
          case "m":
          case "s":
            return parseTokenOneOrTwoDigits;
          default:
            return new RegExp(token.replace("\\", ""));
        }
      }
      function addTimeToArrayFromToken(token, input, config) {
        var a, datePartArray = config._a;
        switch (token) {
          case "iM":
          case "iMM":
            datePartArray[1] = input == null ? 0 : ~~input - 1;
            break;
          case "iMMM":
          case "iMMMM":
            a = moment5.localeData(config._l).iMonthsParse(input);
            if (a != null)
              datePartArray[1] = a;
            else
              config._isValid = false;
            break;
          case "iD":
          case "iDD":
          case "iDDD":
          case "iDDDD":
            if (input != null)
              datePartArray[2] = ~~input;
            break;
          case "iYY":
            datePartArray[0] = ~~input + (~~input > 47 ? 1300 : 1400);
            break;
          case "iYYYY":
          case "iYYYYY":
            datePartArray[0] = ~~input;
        }
        if (input == null)
          config._isValid = false;
      }
      function dateFromArray(config) {
        var g, h, hy = config._a[0], hm = config._a[1], hd = config._a[2];
        if (hy == null && hm == null && hd == null)
          return [0, 0, 1];
        hy = hy || 0;
        hm = hm || 0;
        hd = hd || 1;
        if (hd < 1 || hd > hMoment.iDaysInMonth(hy, hm))
          config._isValid = false;
        g = toGregorian5(hy, hm, hd);
        h = toHijri(g.gy, g.gm, g.gd);
        config._hDiff = 0;
        if (~~h.hy !== hy)
          config._hDiff += 1;
        if (~~h.hm !== hm)
          config._hDiff += 1;
        if (~~h.hd !== hd)
          config._hDiff += 1;
        return [g.gy, g.gm, g.gd];
      }
      function makeDateFromStringAndFormat(config) {
        var tokens = config._f.match(formattingTokens), string = config._i, len = tokens.length, i2, token, parsedInput;
        config._a = [];
        for (i2 = 0; i2 < len; i2 += 1) {
          token = tokens[i2];
          parsedInput = (getParseRegexForToken(token, config).exec(string) || [])[0];
          if (parsedInput)
            string = string.slice(string.indexOf(parsedInput) + parsedInput.length);
          if (formatTokenFunctions[token])
            addTimeToArrayFromToken(token, parsedInput, config);
        }
        if (string)
          config._il = string;
        return dateFromArray(config);
      }
      function makeDateFromStringAndArray(config, utc) {
        var len = config._f.length, i2, format, tempMoment, bestMoment, currentScore, scoreToBeat;
        if (len === 0) {
          return makeMoment(new Date(NaN));
        }
        for (i2 = 0; i2 < len; i2 += 1) {
          format = config._f[i2];
          currentScore = 0;
          tempMoment = makeMoment(config._i, format, config._l, utc);
          if (!tempMoment.isValid())
            continue;
          currentScore += tempMoment._hDiff;
          if (tempMoment._il)
            currentScore += tempMoment._il.length;
          if (scoreToBeat == null || currentScore < scoreToBeat) {
            scoreToBeat = currentScore;
            bestMoment = tempMoment;
          }
        }
        return bestMoment;
      }
      function removeParsedTokens(config) {
        var string = config._i, input = "", format = "", array = config._f.match(formattingTokens), len = array.length, i2, match, parsed;
        for (i2 = 0; i2 < len; i2 += 1) {
          match = array[i2];
          parsed = (getParseRegexForToken(match, config).exec(string) || [])[0];
          if (parsed)
            string = string.slice(string.indexOf(parsed) + parsed.length);
          if (!(formatTokenFunctions[match] instanceof Function)) {
            format += match;
            if (parsed)
              input += parsed;
          }
        }
        config._i = input;
        config._f = format;
      }
      function iWeekOfYear(mom, firstDayOfWeek, firstDayOfWeekOfYear) {
        var end = firstDayOfWeekOfYear - firstDayOfWeek, daysToDayOfWeek = firstDayOfWeekOfYear - mom.day(), adjustedMoment;
        if (daysToDayOfWeek > end) {
          daysToDayOfWeek -= 7;
        }
        if (daysToDayOfWeek < end - 7) {
          daysToDayOfWeek += 7;
        }
        adjustedMoment = hMoment(mom).add(daysToDayOfWeek, "d");
        return {
          week: Math.ceil(adjustedMoment.iDayOfYear() / 7),
          year: adjustedMoment.iYear()
        };
      }
      function makeMoment(input, format, lang, utc) {
        var config = {
          _i: input,
          _f: format,
          _l: lang
        }, date, m, hm;
        if (format) {
          if (isArray(format)) {
            return makeDateFromStringAndArray(config, utc);
          } else {
            date = makeDateFromStringAndFormat(config);
            removeParsedTokens(config);
            format = "YYYY-MM-DD-" + config._f;
            input = leftZeroFill(date[0], 4) + "-" + leftZeroFill(date[1] + 1, 2) + "-" + leftZeroFill(date[2], 2) + "-" + config._i;
          }
        }
        if (utc)
          m = moment5.utc(input, format, lang);
        else
          m = moment5(input, format, lang);
        if (config._isValid === false)
          m._isValid = false;
        m._hDiff = config._hDiff || 0;
        hm = objectCreate(hMoment.fn);
        extend(hm, m);
        return hm;
      }
      function hMoment(input, format, lang) {
        return makeMoment(input, format, lang, false);
      }
      extend(hMoment, moment5);
      hMoment.fn = objectCreate(moment5.fn);
      hMoment.utc = function(input, format, lang) {
        return makeMoment(input, format, lang, true);
      };
      hMoment.fn.format = function(format) {
        var i2, replace, me = this;
        if (format) {
          i2 = 5;
          replace = function(input) {
            return me.localeData().longDateFormat(input) || input;
          };
          while (i2 > 0 && localFormattingTokens.test(format)) {
            i2 -= 1;
            format = format.replace(localFormattingTokens, replace);
          }
          if (!formatFunctions[format]) {
            formatFunctions[format] = makeFormatFunction(format);
          }
          format = formatFunctions[format](this);
        }
        return moment5.fn.format.call(this, format);
      };
      hMoment.fn.iYear = function(input) {
        var lastDay, h, g;
        if (typeof input === "number") {
          h = toHijri(this.year(), this.month(), this.date());
          lastDay = Math.min(h.hd, hMoment.iDaysInMonth(input, h.hm));
          g = toGregorian5(input, h.hm, lastDay);
          setDate(this, g.gy, g.gm, g.gd);
          if (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {
            setDate(this, g.gy, g.gm, g.gd);
          }
          moment5.updateOffset(this);
          return this;
        } else {
          return toHijri(this.year(), this.month(), this.date()).hy;
        }
      };
      hMoment.fn.iMonth = function(input) {
        var lastDay, h, g;
        if (input != null) {
          if (typeof input === "string") {
            input = this.localeData().iMonthsParse(input);
            if (input >= 0) {
              input -= 1;
            } else {
              return this;
            }
          }
          h = toHijri(this.year(), this.month(), this.date());
          lastDay = Math.min(h.hd, hMoment.iDaysInMonth(h.hy, input));
          this.iYear(h.hy + div(input, 12));
          input = mod(input, 12);
          if (input < 0) {
            input += 12;
            this.iYear(this.iYear() - 1);
          }
          g = toGregorian5(this.iYear(), input, lastDay);
          setDate(this, g.gy, g.gm, g.gd);
          if (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {
            setDate(this, g.gy, g.gm, g.gd);
          }
          moment5.updateOffset(this);
          return this;
        } else {
          return toHijri(this.year(), this.month(), this.date()).hm;
        }
      };
      hMoment.fn.iDate = function(input) {
        var h, g;
        if (typeof input === "number") {
          h = toHijri(this.year(), this.month(), this.date());
          g = toGregorian5(h.hy, h.hm, input);
          setDate(this, g.gy, g.gm, g.gd);
          if (this.month() !== g.gm || this.date() !== g.gd || this.year() !== g.gy) {
            setDate(this, g.gy, g.gm, g.gd);
          }
          moment5.updateOffset(this);
          return this;
        } else {
          return toHijri(this.year(), this.month(), this.date()).hd;
        }
      };
      hMoment.fn.iDayOfYear = function(input) {
        var dayOfYear = Math.round((hMoment(this).startOf("day") - hMoment(this).startOf("iYear")) / 864e5) + 1;
        return input == null ? dayOfYear : this.add(input - dayOfYear, "d");
      };
      hMoment.fn.iDaysInMonth = function() {
        return parseInt(hMoment(this).endOf("iMonth").format("iDD"));
      };
      hMoment.fn.iWeek = function(input) {
        var week = iWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).week;
        return input == null ? week : this.add((input - week) * 7, "d");
      };
      hMoment.fn.iWeekYear = function(input) {
        var year = iWeekOfYear(this, this.localeData()._week.dow, this.localeData()._week.doy).year;
        return input == null ? year : this.add(input - year, "y");
      };
      hMoment.fn.add = function(val, units) {
        var temp;
        if (units !== null && !isNaN(+units)) {
          temp = val;
          val = units;
          units = temp;
        }
        units = normalizeUnits(units);
        if (units === "iyear") {
          this.iYear(this.iYear() + val);
        } else if (units === "imonth") {
          this.iMonth(this.iMonth() + val);
        } else if (units === "idate") {
          this.iDate(this.iDate() + val);
        } else {
          moment5.fn.add.call(this, val, units);
        }
        return this;
      };
      hMoment.fn.subtract = function(val, units) {
        var temp;
        if (units !== null && !isNaN(+units)) {
          temp = val;
          val = units;
          units = temp;
        }
        units = normalizeUnits(units);
        if (units === "iyear") {
          this.iYear(this.iYear() - val);
        } else if (units === "imonth") {
          this.iMonth(this.iMonth() - val);
        } else if (units === "idate") {
          this.iDate(this.iDate() - val);
        } else {
          moment5.fn.subtract.call(this, val, units);
        }
        return this;
      };
      hMoment.fn.startOf = function(units) {
        units = normalizeUnits(units);
        if (units === "iyear" || units === "imonth") {
          if (units === "iyear") {
            this.iMonth(0);
          }
          this.iDate(1);
          this.hours(0);
          this.minutes(0);
          this.seconds(0);
          this.milliseconds(0);
          return this;
        } else {
          return moment5.fn.startOf.call(this, units);
        }
      };
      hMoment.fn.endOf = function(units) {
        units = normalizeUnits(units);
        if (units === void 0 || units === "milisecond") {
          return this;
        }
        return this.startOf(units).add(1, units === "isoweek" ? "week" : units).subtract(1, "milliseconds");
      };
      hMoment.fn.clone = function() {
        return hMoment(this);
      };
      hMoment.fn.iYears = hMoment.fn.iYear;
      hMoment.fn.iMonths = hMoment.fn.iMonth;
      hMoment.fn.iDates = hMoment.fn.iDate;
      hMoment.fn.iWeeks = hMoment.fn.iWeek;
      hMoment.iDaysInMonth = function(year, month) {
        var i2 = getNewMoonMJDNIndex(year, month + 1), daysInMonth = ummalqura.ummalquraData[i2] - ummalqura.ummalquraData[i2 - 1];
        return daysInMonth;
      };
      function toHijri(gy, gm, gd) {
        var h = d2h(g2d(gy, gm + 1, gd));
        h.hm -= 1;
        return h;
      }
      function toGregorian5(hy, hm, hd) {
        var g = d2g(h2d(hy, hm + 1, hd));
        g.gm -= 1;
        return g;
      }
      hMoment.iConvert = {
        toHijri,
        toGregorian: toGregorian5
      };
      return hMoment;
      function div(a, b) {
        return ~~(a / b);
      }
      function mod(a, b) {
        return a - ~~(a / b) * b;
      }
      function h2d(hy, hm, hd) {
        var i2 = getNewMoonMJDNIndex(hy, hm), mjdn = hd + ummalqura.ummalquraData[i2 - 1] - 1, jdn = mjdn + 24e5;
        return jdn;
      }
      function d2h(jdn) {
        var mjdn = jdn - 24e5, i2 = getNewMoonMJDNIndexByJDN(mjdn), totalMonths = i2 + 16260, cYears = Math.floor((totalMonths - 1) / 12), hy = cYears + 1, hm = totalMonths - 12 * cYears, hd = mjdn - ummalqura.ummalquraData[i2 - 1] + 1;
        return {
          hy,
          hm,
          hd
        };
      }
      function g2d(gy, gm, gd) {
        var d = div((gy + div(gm - 8, 6) + 100100) * 1461, 4) + div(153 * mod(gm + 9, 12) + 2, 5) + gd - 34840408;
        d = d - div(div(gy + 100100 + div(gm - 8, 6), 100) * 3, 4) + 752;
        return d;
      }
      function d2g(jdn) {
        var j, i2, gd, gm, gy;
        j = 4 * jdn + 139361631;
        j = j + div(div(4 * jdn + 183187720, 146097) * 3, 4) * 4 - 3908;
        i2 = div(mod(j, 1461), 4) * 5 + 308;
        gd = div(mod(i2, 153), 5) + 1;
        gm = mod(div(i2, 153), 12) + 1;
        gy = div(j, 1461) - 100100 + div(8 - gm, 6);
        return {
          gy,
          gm,
          gd
        };
      }
      function getNewMoonMJDNIndex(hy, hm) {
        var cYears = hy - 1, totalMonths = cYears * 12 + 1 + (hm - 1), i2 = totalMonths - 16260;
        return i2;
      }
      function getNewMoonMJDNIndexByJDN(mjdn) {
        for (var i2 = 0; i2 < ummalqura.ummalquraData.length; i2 = i2 + 1) {
          if (ummalqura.ummalquraData[i2] > mjdn)
            return i2;
        }
      }
    });
  }
});

// src/main.ts
var main_exports = {};
__export(main_exports, {
  default: () => PersianCalendarPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian5 = require("obsidian");

// src/view.ts
var import_obsidian = require("obsidian");

// src/calendar.ts
var import_jalaali_js = __toESM(require_jalaali_js());
function getTodayJalaali() {
  const today = new Date();
  return (0, import_jalaali_js.toJalaali)(today.getFullYear(), today.getMonth() + 1, today.getDate());
}

// src/view.ts
var import_jalaali_js2 = __toESM(require_jalaali_js());
var jalaali = __toESM(require_jalaali_js());
var import_moment_jalaali = __toESM(require_moment_jalaali());
var import_moment_hijri = __toESM(require_moment_hijri());

// src/holidays.ts
var PersianCalendarHolidays = [
  { holiday: true, month: 1, day: 1, type: "Iran", title: "\u0622\u063A\u0627\u0632 \u0639\u06CC\u062F \u0646\u0648\u0631\u0648\u0632" },
  { holiday: true, month: 1, day: 2, type: "Iran", title: "\u0639\u06CC\u062F \u0646\u0648\u0631\u0648\u0632" },
  { holiday: false, month: 1, day: 2, type: "Iran", title: "\u0647\u062C\u0648\u0645 \u0628\u0647 \u0645\u062F\u0631\u0633\u0647\u0654 \u0641\u06CC\u0636\u06CC\u0647\u0654 \u0642\u0645 (\u06F1\u06F3\u06F4\u06F2 \u0647\u200D.\u0634)" },
  { holiday: false, month: 1, day: 2, type: "Iran", title: "\u0622\u063A\u0627\u0632 \u0639\u0645\u0644\u06CC\u0627\u062A \u0641\u062A\u062D\u200C\u0627\u0644\u0645\u0628\u06CC\u0646 (\u06F1\u06F3\u06F6\u06F1 \u0647\u200D.\u0634)" },
  { holiday: true, month: 1, day: 3, type: "Iran", title: "\u0639\u06CC\u062F \u0646\u0648\u0631\u0648\u0632" },
  { holiday: true, month: 1, day: 4, type: "Iran", title: "\u0639\u06CC\u062F \u0646\u0648\u0631\u0648\u0632" },
  { holiday: false, month: 1, day: 7, type: "Iran", title: "\u0631\u0648\u0632 \u0647\u0646\u0631\u0647\u0627\u06CC \u0646\u0645\u0627\u06CC\u0634\u06CC" },
  { holiday: true, month: 1, day: 12, type: "Iran", title: "\u0631\u0648\u0632 \u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0627\u0645\u06CC \u0627\u06CC\u0631\u0627\u0646" },
  { holiday: true, month: 1, day: 13, type: "Iran", title: "\u0631\u0648\u0632 \u0637\u0628\u06CC\u0639\u062A" },
  { holiday: false, month: 1, day: 18, type: "Iran", title: "\u0631\u0648\u0632 \u0633\u0644\u0627\u0645\u062A\u06CC" },
  { holiday: false, month: 1, day: 20, type: "Iran", title: "\u0631\u0648\u0632 \u0645\u0644\u06CC \u0641\u0646\u0627\u0648\u0631\u06CC \u0647\u0633\u062A\u0647\u200C\u0627\u06CC" },
  { holiday: false, month: 1, day: 20, type: "Iran", title: "\u0631\u0648\u0632 \u0647\u0646\u0631 \u0627\u0646\u0642\u0644\u0627\u0628 \u0627\u0633\u0644\u0627\u0645\u06CC" },
  { holiday: false, month: 1, day: 20, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0633\u06CC\u062F \u0645\u0631\u062A\u0636\u06CC \u0622\u0648\u06CC\u0646\u06CC (\u06F1\u06F3\u06F7\u06F2 \u0647\u200D.\u0634)" },
  { holiday: false, month: 1, day: 21, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0627\u0645\u06CC\u0631 \u0633\u067E\u0647\u0628\u062F \u0639\u0644\u06CC \u0635\u06CC\u0627\u062F \u0634\u06CC\u0631\u0627\u0632\u06CC (\u06F1\u06F3\u06F7\u06F8 \u0647\u200D.\u0634)" },
  { holiday: false, month: 1, day: 21, type: "Iran", title: "\u0633\u0627\u0644\u0631\u0648\u0632 \u0627\u0641\u062A\u062A\u0627\u062D \u062D\u0633\u0627\u0628 \u0634\u0645\u0627\u0631\u0647\u0654 \u06F1\u06F0\u06F0 \u0648 \u062A\u0623\u0633\u06CC\u0633 \u0628\u0646\u06CC\u0627\u062F \u0645\u0633\u06A9\u0646 \u0627\u0646\u0642\u0644\u0627\u0628 \u0627\u0633\u0644\u0627\u0645\u06CC (\u06F1\u06F3\u06F5\u06F8 \u0647\u200D.\u0634)" },
  { holiday: false, month: 1, day: 25, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0639\u0637\u0627\u0631 \u0646\u06CC\u0634\u0627\u0628\u0648\u0631\u06CC" },
  { holiday: false, month: 1, day: 29, type: "Iran", title: "\u0631\u0648\u0632 \u0627\u0631\u062A\u0634 \u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0627\u0645\u06CC \u0648 \u0646\u06CC\u0631\u0648\u06CC \u0632\u0645\u06CC\u0646\u06CC" },
  { holiday: false, month: 2, day: 1, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0633\u0639\u062F\u06CC" },
  { holiday: false, month: 2, day: 2, type: "Iran", title: "\u062A\u0623\u0633\u06CC\u0633 \u0633\u067E\u0627\u0647 \u067E\u0627\u0633\u062F\u0627\u0631\u0627\u0646 \u0627\u0646\u0642\u0644\u0627\u0628 \u0627\u0633\u0644\u0627\u0645\u06CC (\u06F1\u06F3\u06F5\u06F8 \u0647\u200D.\u0634)" },
  { holiday: false, month: 2, day: 2, type: "Iran", title: "\u0627\u0639\u0644\u0627\u0645 \u0627\u0646\u0642\u0644\u0627\u0628 \u0641\u0631\u0647\u0646\u06AF\u06CC (\u06F1\u06F3\u06F5\u06F9 \u0647\u200D.\u0634)" },
  { holiday: false, month: 2, day: 3, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0634\u06CC\u062E \u0628\u0647\u0627\u06CC\u06CC" },
  { holiday: false, month: 2, day: 5, type: "Iran", title: "\u0634\u06A9\u0633\u062A \u062D\u0645\u0644\u0647\u0654 \u0646\u0638\u0627\u0645\u06CC \u0622\u0645\u0631\u06CC\u06A9\u0627 \u0628\u0647 \u0627\u06CC\u0631\u0627\u0646 \u062F\u0631 \u0637\u0628\u0633 (\u06F1\u06F3\u06F5\u06F9 \u0647\u200D.\u0634)" },
  { holiday: false, month: 2, day: 9, type: "Iran", title: "\u0631\u0648\u0632 \u0634\u0648\u0631\u0627\u0647\u0627" },
  { holiday: false, month: 2, day: 10, type: "Iran", title: "\u0631\u0648\u0632 \u0645\u0644\u06CC \u062E\u0644\u06CC\u062C \u0641\u0627\u0631\u0633" },
  { holiday: false, month: 2, day: 12, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0627\u0633\u062A\u0627\u062F \u0645\u0631\u062A\u0636\u06CC \u0645\u0637\u0647\u0631\u06CC (\u06F1\u06F3\u06F5\u06F8 \u0647\u200D.\u0634)" },
  { holiday: false, month: 2, day: 12, type: "Iran", title: "\u0631\u0648\u0632 \u0645\u0639\u0644\u0645" },
  { holiday: false, month: 2, day: 15, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0634\u06CC\u062E \u0635\u062F\u0648\u0642" },
  { holiday: false, month: 2, day: 18, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u06CC\u0645\u0627\u0631\u06CC\u200C\u0647\u0627\u06CC \u062E\u0627\u0635 \u0648 \u0635\u0639\u0628\u200C\u0627\u0644\u0639\u0644\u0627\u062C" },
  { holiday: false, month: 2, day: 19, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0634\u06CC\u062E \u06A9\u0644\u06CC\u0646\u06CC" },
  { holiday: false, month: 2, day: 24, type: "Iran", title: "\u0644\u063A\u0648 \u0627\u0645\u062A\u06CC\u0627\u0632 \u062A\u0646\u0628\u0627\u06A9\u0648 \u0628\u0647 \u0641\u062A\u0648\u0627\u06CC \u0622\u06CC\u062A\u200C\u0627\u0644\u0644\u0647 \u0645\u06CC\u0631\u0632\u0627 \u062D\u0633\u0646 \u0634\u06CC\u0631\u0627\u0632\u06CC (\u06F1\u06F2\u06F7\u06F0 \u0647\u200D.\u0634)" },
  { holiday: false, month: 2, day: 25, type: "Iran", title: "\u0631\u0648\u0632 \u067E\u0627\u0633\u062F\u0627\u0634\u062A \u0632\u0628\u0627\u0646 \u0641\u0627\u0631\u0633\u06CC \u0648 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u062D\u06A9\u06CC\u0645 \u0627\u0628\u0648\u0627\u0644\u0642\u0627\u0633\u0645 \u0641\u0631\u062F\u0648\u0633\u06CC" },
  { holiday: false, month: 2, day: 28, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u062D\u06A9\u06CC\u0645 \u0639\u0645\u0631 \u062E\u06CC\u0627\u0645" },
  { holiday: false, month: 2, day: 30, type: "Iran", title: "\u0631\u0648\u0632 \u0645\u0644\u06CC \u062C\u0645\u0639\u06CC\u062A" },
  { holiday: false, month: 2, day: 31, type: "Iran", title: "\u0631\u0648\u0632 \u0627\u0647\u062F\u0627\u06CC \u0639\u0636\u0648\u060C \u0627\u0647\u062F\u0627\u06CC \u0632\u0646\u062F\u06AF\u06CC" },
  { holiday: false, month: 3, day: 1, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0647\u0631\u0647\u200C\u0648\u0631\u06CC \u0648 \u0628\u0647\u06CC\u0646\u0647\u200C\u0633\u0627\u0632\u06CC \u0645\u0635\u0631\u0641" },
  { holiday: false, month: 3, day: 1, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0645\u0644\u0627\u0635\u062F\u0631\u0627 (\u0635\u062F\u0631\u0627\u0644\u0645\u062A\u0623\u0644\u0647\u06CC\u0646)" },
  { holiday: false, month: 3, day: 3, type: "Iran", title: "\u0641\u062A\u062D \u062E\u0631\u0645\u0634\u0647\u0631 \u062F\u0631 \u0639\u0645\u0644\u06CC\u0627\u062A \u0628\u06CC\u062A\u200C\u0627\u0644\u0645\u0642\u062F\u0633 (\u06F1\u06F3\u06F6\u06F1 \u0647\u200D.\u0634) \u0648 \u0631\u0648\u0632 \u0645\u0642\u0627\u0648\u0645\u062A\u060C \u0627\u06CC\u062B\u0627\u0631 \u0648 \u067E\u06CC\u0631\u0648\u0632\u06CC" },
  { holiday: false, month: 3, day: 4, type: "Iran", title: "\u0631\u0648\u0632 \u062F\u0632\u0641\u0648\u0644" },
  { holiday: false, month: 3, day: 4, type: "Iran", title: " \u0631\u0648\u0632 \u0645\u0642\u0627\u0648\u0645\u062A \u0648 \u067E\u0627\u06CC\u062F\u0627\u0631\u06CC" },
  { holiday: true, month: 3, day: 14, type: "Iran", title: "\u0631\u062D\u0644\u062A \u0627\u0645\u0627\u0645 \u062E\u0645\u06CC\u0646\u06CC \u0631\u0647\u0628\u0631 \u0627\u0646\u0642\u0644\u0627\u0628 \u0627\u0633\u0644\u0627\u0645\u06CC (\u06F1\u06F3\u06F6\u06F8 \u0647\u200D.\u0634)" },
  { holiday: false, month: 3, day: 14, type: "Iran", title: "\u0627\u0646\u062A\u062E\u0627\u0628 \u0622\u06CC\u062A\u200C\u0627\u0644\u0644\u0647 \u062E\u0627\u0645\u0646\u0647\u200C\u0627\u06CC \u0628\u0647 \u0631\u0647\u0628\u0631\u06CC (\u06F1\u06F3\u06F6\u06F8 \u0647\u200D.\u0634)" },
  { holiday: true, month: 3, day: 15, type: "Iran", title: "\u0642\u06CC\u0627\u0645 \u062E\u0648\u0646\u06CC\u0646 \u06F1\u06F5 \u062E\u0631\u062F\u0627\u062F (\u06F1\u06F3\u06F4\u06F2 \u0647\u200D.\u0634)" },
  { holiday: false, month: 3, day: 26, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0628\u062E\u0627\u0631\u0627\u06CC\u06CC\u060C \u0627\u0645\u0627\u0646\u06CC\u060C \u0635\u0641\u0627\u0631 \u0647\u0631\u0646\u062F\u06CC \u0648 \u0646\u06CC\u06A9\u200C\u0646\u0698\u0627\u062F \u0627\u0632 \u0627\u0639\u0636\u0627\u06CC \u0641\u062F\u0627\u0626\u06CC\u0627\u0646 \u0627\u0633\u0644\u0627\u0645 (\u06F1\u06F3\u06F4\u06F4 \u0647\u200D.\u0634)" },
  { holiday: false, month: 3, day: 27, type: "Iran", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u062F \u06A9\u0634\u0627\u0648\u0631\u0632\u06CC (\u062A\u0634\u06A9\u06CC\u0644 \u062C\u0647\u0627\u062F \u0633\u0627\u0632\u0646\u062F\u06AF\u06CC\u060C \u06F1\u06F3\u06F5\u06F8 \u0647\u200D.\u0634)" },
  { holiday: false, month: 3, day: 29, type: "Iran", title: "\u062F\u0631\u06AF\u0630\u0634\u062A \u062F\u06A9\u062A\u0631 \u0639\u0644\u06CC \u0634\u0631\u06CC\u0639\u062A\u06CC (\u06F1\u06F3\u06F5\u06F6 \u0647\u200D.\u0634)" },
  { holiday: false, month: 3, day: 31, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u062F\u06A9\u062A\u0631 \u0645\u0635\u0637\u0641\u06CC \u0686\u0645\u0631\u0627\u0646 (\u06F1\u06F3\u06F6\u06F0 \u0647\u200D.\u0634)" },
  { holiday: false, month: 3, day: 31, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0633\u06CC\u062C \u0627\u0633\u062A\u0627\u062F\u0627\u0646" },
  { holiday: false, month: 4, day: 1, type: "Iran", title: "\u0631\u0648\u0632 \u062A\u0628\u0644\u06CC\u063A \u0648 \u0627\u0637\u0644\u0627\u0639\u200C\u0631\u0633\u0627\u0646\u06CC \u062F\u06CC\u0646\u06CC (\u062A\u0623\u0633\u06CC\u0633 \u0633\u0627\u0632\u0645\u0627\u0646 \u062A\u0628\u0644\u06CC\u063A\u0627\u062A \u0627\u0633\u0644\u0627\u0645\u06CC \u06F1\u06F3\u06F6\u06F0 \u0647\u200D.\u0634)" },
  { holiday: false, month: 4, day: 1, type: "Iran", title: "\u0631\u0648\u0632 \u0627\u0635\u0646\u0627\u0641" },
  { holiday: false, month: 4, day: 7, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0622\u06CC\u062A\u200C\u0627\u0644\u0644\u0647 \u062F\u06A9\u062A\u0631 \u0628\u0647\u0634\u062A\u06CC \u0648 \u06F7\u06F2 \u062A\u0646 \u0627\u0632 \u06CC\u0627\u0631\u0627\u0646 (\u06F1\u06F3\u06F6\u06F0 \u0647\u200D.\u0634)" },
  { holiday: false, month: 4, day: 7, type: "Iran", title: "\u0631\u0648\u0632 \u0642\u0648\u0647\u0654 \u0642\u0636\u0627\u06CC\u06CC\u0647" },
  { holiday: false, month: 4, day: 8, type: "Iran", title: "\u0631\u0648\u0632 \u0645\u0628\u0627\u0631\u0632\u0647 \u0628\u0627 \u0633\u0644\u0627\u062D\u200C\u0647\u0627\u06CC \u0634\u06CC\u0645\u06CC\u0627\u06CC\u06CC \u0648 \u0645\u06CC\u06A9\u0631\u0648\u0628\u06CC" },
  { holiday: false, month: 4, day: 10, type: "Iran", title: "\u0631\u0648\u0632 \u0635\u0646\u0639\u062A \u0648 \u0645\u0639\u062F\u0646" },
  { holiday: false, month: 4, day: 11, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0622\u06CC\u062A\u200C\u0627\u0644\u0644\u0647 \u0635\u062F\u0648\u0642\u06CC (\u06F1\u06F3\u06F6\u06F1 \u0647\u200D.\u0634)" },
  { holiday: false, month: 4, day: 12, type: "Iran", title: "\u062D\u0645\u0644\u0647\u0654 \u0646\u0627\u0648\u06AF\u0627\u0646 \u0622\u0645\u0631\u06CC\u06A9\u0627 \u0628\u0647 \u0647\u0648\u0627\u067E\u06CC\u0645\u0627\u06CC \u0645\u0633\u0627\u0641\u0631\u0628\u0631\u06CC \u0627\u06CC\u0631\u0627\u0646 (\u06F1\u06F3\u06F6\u06F7 \u0647\u200D.\u0634)" },
  { holiday: false, month: 4, day: 12, type: "Iran", title: "\u0631\u0648\u0632 \u0627\u0641\u0634\u0627\u06CC \u062D\u0642\u0648\u0642 \u0628\u0634\u0631 \u0622\u0645\u0631\u06CC\u06A9\u0627\u06CC\u06CC" },
  { holiday: false, month: 4, day: 14, type: "Iran", title: "\u0631\u0648\u0632 \u0634\u0647\u0631\u062F\u0627\u0631\u06CC \u0648 \u062F\u0647\u06CC\u0627\u0631\u06CC" },
  { holiday: false, month: 4, day: 14, type: "Iran", title: "\u0631\u0648\u0632 \u0642\u0644\u0645" },
  { holiday: false, month: 4, day: 18, type: "Iran", title: "\u0631\u0648\u0632 \u0627\u062F\u0628\u06CC\u0627\u062A \u06A9\u0648\u062F\u06A9\u0627\u0646 \u0648 \u0646\u0648\u062C\u0648\u0627\u0646\u0627\u0646" },
  { holiday: false, month: 4, day: 21, type: "Iran", title: "\u0631\u0648\u0632 \u0639\u0641\u0627\u0641 \u0648 \u062D\u062C\u0627\u0628" },
  { holiday: false, month: 4, day: 23, type: "Iran", title: "\u0631\u0648\u0632 \u06AF\u0641\u062A\u200C\u0648\u06AF\u0648 \u0648 \u062A\u0639\u0627\u0645\u0644 \u0633\u0627\u0632\u0646\u062F\u0647 \u0628\u0627 \u062C\u0647\u0627\u0646" },
  { holiday: false, month: 4, day: 25, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0647\u0632\u06CC\u0633\u062A\u06CC \u0648 \u062A\u0627\u0645\u06CC\u0646 \u0627\u062C\u062A\u0645\u0627\u0639\u06CC" },
  { holiday: false, month: 4, day: 26, type: "Iran", title: "\u0633\u0627\u0644\u0631\u0648\u0632 \u062A\u0623\u0633\u06CC\u0633 \u0646\u0647\u0627\u062F \u0634\u0648\u0631\u0627\u06CC \u0646\u06AF\u0647\u0628\u0627\u0646" },
  { holiday: false, month: 5, day: 5, type: "Iran", title: "\u0633\u0627\u0644\u0631\u0648\u0632 \u0639\u0645\u0644\u06CC\u0627\u062A \u0645\u0631\u0635\u0627\u062F (\u06F1\u06F3\u06F6\u06F7 \u0647\u200D.\u0634)" },
  { holiday: false, month: 5, day: 9, type: "Iran", title: "\u0631\u0648\u0632 \u0627\u0647\u062F\u0627\u06CC \u062E\u0648\u0646" },
  { holiday: false, month: 5, day: 14, type: "Iran", title: "\u0635\u062F\u0648\u0631 \u0641\u0631\u0645\u0627\u0646 \u0645\u0634\u0631\u0648\u0637\u06CC\u062A (\u06F1\u06F2\u06F8\u06F5 \u0647\u200D.\u0634)" },
  { holiday: false, month: 5, day: 14, type: "Iran", title: "\u0631\u0648\u0632 \u062D\u0642\u0648\u0642 \u0628\u0634\u0631 \u0627\u0633\u0644\u0627\u0645\u06CC \u0648 \u06A9\u0631\u0627\u0645\u062A \u0627\u0646\u0633\u0627\u0646\u06CC" },
  { holiday: false, month: 5, day: 16, type: "Iran", title: "\u062A\u0634\u06A9\u06CC\u0644 \u062C\u0647\u0627\u062F \u062F\u0627\u0646\u0634\u06AF\u0627\u0647\u06CC (\u06F1\u06F3\u06F5\u06F9 \u0647\u200D.\u0634)" },
  { holiday: false, month: 5, day: 17, type: "Iran", title: "\u0631\u0648\u0632 \u062E\u0628\u0631\u0646\u06AF\u0627\u0631" },
  { holiday: false, month: 5, day: 21, type: "Iran", title: "\u0631\u0648\u0632 \u062D\u0645\u0627\u06CC\u062A \u0627\u0632 \u0635\u0646\u0627\u06CC\u0639 \u06A9\u0648\u0686\u06A9" },
  { holiday: false, month: 5, day: 22, type: "Iran", title: "\u0631\u0648\u0632 \u062A\u0634\u06A9\u0644\u200C\u0647\u0627 \u0648 \u0645\u0634\u0627\u0631\u06A9\u062A\u200C\u0647\u0627\u06CC \u0627\u062C\u062A\u0645\u0627\u0639\u06CC" },
  { holiday: false, month: 5, day: 23, type: "Iran", title: "\u0631\u0648\u0632 \u0645\u0642\u0627\u0648\u0645\u062A \u0627\u0633\u0644\u0627\u0645\u06CC" },
  { holiday: false, month: 5, day: 26, type: "Iran", title: "\u0622\u063A\u0627\u0632 \u0628\u0627\u0632\u06AF\u0634\u062A \u0622\u0632\u0627\u062F\u06AF\u0627\u0646 \u0628\u0647 \u0627\u06CC\u0631\u0627\u0646 (\u06F1\u06F3\u06F6\u06F9 \u0647\u200D.\u0634)" },
  { holiday: false, month: 5, day: 28, type: "Iran", title: "\u06A9\u0648\u062F\u062A\u0627\u06CC \u06F2\u06F8 \u0645\u0631\u062F\u0627\u062F (\u06F1\u06F3\u06F3\u06F2 \u0647\u200D.\u0634)" },
  { holiday: false, month: 5, day: 28, type: "Iran", title: "\u0622\u062A\u0634\u200C\u0633\u0648\u0632\u06CC \u0633\u06CC\u0646\u0645\u0627 \u0631\u06A9\u0633 \u0622\u0628\u0627\u062F\u0627\u0646 (\u06F1\u06F3\u06F5\u06F7 \u0647\u200D.\u0634)" },
  { holiday: false, month: 5, day: 30, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0639\u0644\u0627\u0645\u0647 \u0645\u062C\u0644\u0633\u06CC" },
  { holiday: false, month: 6, day: 1, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0627\u0628\u0648\u0639\u0644\u06CC \u0633\u06CC\u0646\u0627" },
  { holiday: false, month: 6, day: 1, type: "Iran", title: "\u0631\u0648\u0632 \u067E\u0632\u0634\u06A9" },
  { holiday: false, month: 6, day: 2, type: "Iran", title: "\u0622\u063A\u0627\u0632 \u0647\u0641\u062A\u0647\u0654 \u062F\u0648\u0644\u062A" },
  { holiday: false, month: 6, day: 2, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0633\u06CC\u062F \u0639\u0644\u06CC \u0627\u0646\u062F\u0631\u0632\u06AF\u0648 (\u06F1\u06F3\u06F5\u06F7 \u0647\u200D.\u0634)" },
  { holiday: false, month: 6, day: 4, type: "Iran", title: "\u0631\u0648\u0632 \u06A9\u0627\u0631\u0645\u0646\u062F" },
  { holiday: false, month: 6, day: 5, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0645\u062D\u0645\u062F \u0628\u0646 \u0632\u06A9\u0631\u06CC\u0627\u06CC \u0631\u0627\u0632\u06CC" },
  { holiday: false, month: 6, day: 5, type: "Iran", title: "\u0631\u0648\u0632 \u062F\u0627\u0631\u0648\u0633\u0627\u0632\u06CC" },
  { holiday: false, month: 6, day: 5, type: "Iran", title: "\u0631\u0648\u0632 \u06A9\u0634\u062A\u06CC" },
  { holiday: false, month: 6, day: 8, type: "Iran", title: "\u0631\u0648\u0632 \u0645\u0628\u0627\u0631\u0632\u0647 \u0628\u0627 \u062A\u0631\u0648\u0631\u06CC\u0633\u0645 (\u0627\u0646\u0641\u062C\u0627\u0631 \u062F\u0641\u062A\u0631 \u0646\u062E\u0633\u062A\u200C\u0648\u0632\u06CC\u0631\u06CC \u0648 \u0634\u0647\u0627\u062F\u062A \u0631\u062C\u0627\u06CC\u06CC \u0648 \u0628\u0627\u0647\u0646\u0631 - \u06F1\u06F3\u06F6\u06F0 \u0647\u200D.\u0634)" },
  { holiday: false, month: 6, day: 12, type: "Iran", title: "\u0631\u0648\u0632 \u0645\u0628\u0627\u0631\u0632\u0647 \u0628\u0627 \u0627\u0633\u062A\u0639\u0645\u0627\u0631 \u0627\u0646\u06AF\u0644\u06CC\u0633 (\u0633\u0627\u0644\u0631\u0648\u0632 \u0634\u0647\u0627\u062F\u062A \u0631\u0626\u06CC\u0633\u200C\u0639\u0644\u06CC \u062F\u0644\u0648\u0627\u0631\u06CC)" },
  { holiday: false, month: 6, day: 13, type: "Iran", title: "\u0631\u0648\u0632 \u062A\u0639\u0627\u0648\u0646" },
  { holiday: false, month: 6, day: 13, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0627\u0628\u0648\u0631\u06CC\u062D\u0627\u0646 \u0628\u06CC\u0631\u0648\u0646\u06CC" },
  { holiday: false, month: 6, day: 14, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0622\u06CC\u062A\u200C\u0627\u0644\u0644\u0647 \u0642\u062F\u0648\u0633\u06CC \u0648 \u0633\u0631\u062A\u06CC\u067E \u0648\u062D\u06CC\u062F \u062F\u0633\u062A\u062C\u0631\u062F\u06CC (\u06F1\u06F3\u06F6\u06F0 \u0647\u200D.\u0634)" },
  { holiday: false, month: 6, day: 17, type: "Iran", title: "\u0642\u06CC\u0627\u0645 \u06F1\u06F7 \u0634\u0647\u0631\u06CC\u0648\u0631 \u0648 \u06A9\u0634\u062A\u0627\u0631 \u062C\u0645\u0639\u06CC \u0627\u0632 \u0645\u0631\u062F\u0645 \u0628\u0647 \u062F\u0633\u062A \u0645\u0623\u0645\u0648\u0631\u0627\u0646 \u067E\u0647\u0644\u0648\u06CC (\u06F1\u06F3\u06F5\u06F7 \u0647\u200D.\u0634)" },
  { holiday: false, month: 6, day: 19, type: "Iran", title: "\u0648\u0641\u0627\u062A \u0622\u06CC\u062A\u200C\u0627\u0644\u0644\u0647 \u0633\u06CC\u062F \u0645\u062D\u0645\u0648\u062F \u0637\u0627\u0644\u0642\u0627\u0646\u06CC \u0627\u0648\u0644\u06CC\u0646 \u0627\u0645\u0627\u0645 \u062C\u0645\u0639\u0647\u0654 \u062A\u0647\u0631\u0627\u0646 (\u06F1\u06F3\u06F5\u06F8 \u0647\u200D.\u0634)" },
  { holiday: false, month: 6, day: 20, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0622\u06CC\u062A\u200C\u0627\u0644\u0644\u0647 \u0645\u062F\u0646\u06CC (\u06F1\u06F3\u06F6\u06F0 \u0647\u200D.\u0634)" },
  { holiday: false, month: 6, day: 21, type: "Iran", title: "\u0631\u0648\u0632 \u0633\u06CC\u0646\u0645\u0627" },
  { holiday: false, month: 6, day: 27, type: "Iran", title: "\u0631\u0648\u0632 \u0634\u0639\u0631 \u0648 \u0627\u062F\u0628 \u0641\u0627\u0631\u0633\u06CC" },
  { holiday: false, month: 6, day: 27, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0627\u0633\u062A\u0627\u062F \u0633\u06CC\u062F \u0645\u062D\u0645\u062F\u062D\u0633\u06CC\u0646 \u0634\u0647\u0631\u06CC\u0627\u0631" },
  { holiday: false, month: 6, day: 31, type: "Iran", title: "\u0622\u063A\u0627\u0632 \u062C\u0646\u06AF \u062A\u062D\u0645\u06CC\u0644\u06CC (\u06F1\u06F3\u06F5\u06F9 \u0647\u200D.\u0634)" },
  { holiday: false, month: 6, day: 31, type: "Iran", title: "\u0622\u063A\u0627\u0632 \u0647\u0641\u062A\u0647\u0654 \u062F\u0641\u0627\u0639 \u0645\u0642\u062F\u0633" },
  { holiday: false, month: 7, day: 5, type: "Iran", title: "\u0634\u06A9\u0633\u062A \u062D\u0635\u0631 \u0622\u0628\u0627\u062F\u0627\u0646 \u062F\u0631 \u0639\u0645\u0644\u06CC\u0627\u062A \u062B\u0627\u0645\u0646\u200C\u0627\u0644\u0623\u0626\u0645\u0647 (\u0639) (\u06F1\u06F3\u06F6\u06F0 \u0647\u200D.\u0634)" },
  { holiday: false, month: 7, day: 7, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0641\u0631\u0645\u0627\u0646\u062F\u0647\u0627\u0646 \u0634\u0647\u06CC\u062F \u062F\u0641\u0627\u0639 \u0645\u0642\u062F\u0633" },
  { holiday: false, month: 7, day: 7, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0641\u0644\u0627\u062D\u06CC\u060C \u0641\u06A9\u0648\u0631\u06CC\u060C \u0646\u0627\u0645\u062C\u0648\u060C \u06A9\u0644\u0627\u0647\u062F\u0648\u0632 \u0648 \u062C\u0647\u0627\u0646\u200C\u0622\u0631\u0627 \u0627\u0632 \u0641\u0631\u0645\u0627\u0646\u062F\u0647\u0627\u0646 \u0627\u0631\u062A\u0634 \u0648 \u0633\u067E\u0627\u0647 (\u06F1\u06F3\u06F6\u06F0 \u0647\u200D.\u0634)" },
  { holiday: false, month: 7, day: 7, type: "Iran", title: "\u0631\u0648\u0632 \u0622\u062A\u0634\u200C\u0646\u0634\u0627\u0646\u06CC \u0648 \u0627\u06CC\u0645\u0646\u06CC" },
  { holiday: false, month: 7, day: 7, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0634\u0645\u0633" },
  { holiday: false, month: 7, day: 8, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0645\u0648\u0644\u0648\u06CC" },
  { holiday: false, month: 7, day: 9, type: "Iran", title: "\u0631\u0648\u0632 \u0647\u0645\u0628\u0633\u062A\u06AF\u06CC \u0648 \u0647\u0645\u062F\u0631\u062F\u06CC \u0628\u0627 \u06A9\u0648\u062F\u06A9\u0627\u0646 \u0648 \u0646\u0648\u062C\u0648\u0627\u0646\u0627\u0646 \u0641\u0644\u0633\u0637\u06CC\u0646\u06CC" },
  { holiday: false, month: 7, day: 13, type: "Iran", title: "\u0647\u062C\u0631\u062A \u0627\u0645\u0627\u0645 \u062E\u0645\u06CC\u0646\u06CC \u0627\u0632 \u0639\u0631\u0627\u0642 \u0628\u0647 \u067E\u0627\u0631\u06CC\u0633 (\u06F1\u06F3\u06F5\u06F7 \u0647\u200D.\u0634)" },
  { holiday: false, month: 7, day: 13, type: "Iran", title: "\u0631\u0648\u0632 \u0646\u06CC\u0631\u0648\u06CC \u0627\u0646\u062A\u0638\u0627\u0645\u06CC" },
  { holiday: false, month: 7, day: 14, type: "Iran", title: "\u0631\u0648\u0632 \u062F\u0627\u0645\u067E\u0632\u0634\u06A9\u06CC" },
  { holiday: false, month: 7, day: 15, type: "Iran", title: "\u0631\u0648\u0632 \u0631\u0648\u0633\u062A\u0627 \u0648 \u0639\u0634\u0627\u06CC\u0631" },
  { holiday: false, month: 7, day: 20, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u062D\u0627\u0641\u0638" },
  { holiday: false, month: 7, day: 23, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0622\u06CC\u062A\u200C\u0627\u0644\u0644\u0647 \u0627\u0634\u0631\u0641\u06CC \u0627\u0635\u0641\u0647\u0627\u0646\u06CC (\u06F1\u06F3\u06F6\u06F1 \u0647\u200D.\u0634)" },
  { holiday: false, month: 7, day: 24, type: "Iran", title: "\u0631\u0648\u0632 \u0645\u0644\u06CC \u067E\u0627\u0631\u0627\u0644\u0645\u067E\u06CC\u06A9" },
  { holiday: false, month: 7, day: 26, type: "Iran", title: "\u0631\u0648\u0632 \u062A\u0631\u0628\u06CC\u062A \u0628\u062F\u0646\u06CC \u0648 \u0648\u0631\u0632\u0634" },
  { holiday: false, month: 8, day: 4, type: "Iran", title: "\u0627\u0639\u062A\u0631\u0627\u0636 \u0627\u0645\u0627\u0645 \u062E\u0645\u06CC\u0646\u06CC \u0639\u0644\u06CC\u0647 \u067E\u0630\u06CC\u0631\u0634 \u06A9\u0627\u067E\u06CC\u062A\u0648\u0644\u0627\u0633\u06CC\u0648\u0646 (\u06F1\u06F3\u06F4\u06F3 \u0647\u200D.\u0634)" },
  { holiday: false, month: 8, day: 8, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0645\u062D\u0645\u062F \u062D\u0633\u06CC\u0646 \u0641\u0647\u0645\u06CC\u062F\u0647 (\u0628\u0633\u06CC\u062C\u06CC \u06F1\u06F3 \u0633\u0627\u0644\u0647)" },
  { holiday: false, month: 8, day: 8, type: "Iran", title: "\u0631\u0648\u0632 \u0646\u0648\u062C\u0648\u0627\u0646 \u0648 \u0628\u0633\u06CC\u062C \u062F\u0627\u0646\u0634\u200C\u0622\u0645\u0648\u0632\u06CC" },
  { holiday: false, month: 8, day: 10, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0622\u06CC\u062A\u200C\u0627\u0644\u0644\u0647 \u0642\u0627\u0636\u06CC \u0637\u0628\u0627\u0637\u0628\u0627\u06CC\u06CC (\u06F1\u06F3\u06F5\u06F8 \u0647\u200D.\u0634)" },
  { holiday: false, month: 8, day: 13, type: "Iran", title: "\u062A\u0633\u062E\u06CC\u0631 \u0633\u0641\u0627\u0631\u062A \u0622\u0645\u0631\u06CC\u06A9\u0627 (\u06F1\u06F3\u06F5\u06F8 \u0647\u200D.\u0634)" },
  { holiday: false, month: 8, day: 13, type: "Iran", title: "\u0631\u0648\u0632 \u0645\u0644\u06CC \u0645\u0628\u0627\u0631\u0632\u0647 \u0628\u0627 \u0627\u0633\u062A\u06A9\u0628\u0627\u0631 \u062C\u0647\u0627\u0646\u06CC" },
  { holiday: false, month: 8, day: 13, type: "Iran", title: "\u0631\u0648\u0632 \u062F\u0627\u0646\u0634\u200C\u0622\u0645\u0648\u0632" },
  { holiday: false, month: 8, day: 14, type: "Iran", title: "\u0631\u0648\u0632 \u0641\u0631\u0647\u0646\u06AF \u0639\u0645\u0648\u0645\u06CC" },
  { holiday: false, month: 8, day: 24, type: "Iran", title: "\u0631\u0648\u0632 \u06A9\u062A\u0627\u0628\u060C \u06A9\u062A\u0627\u0628\u062E\u0648\u0627\u0646\u06CC \u0648 \u06A9\u062A\u0627\u0628\u062F\u0627\u0631" },
  { holiday: false, month: 8, day: 24, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0622\u06CC\u062A\u200C\u0627\u0644\u0644\u0647 \u0639\u0644\u0627\u0645\u0647 \u0633\u06CC\u062F \u0645\u062D\u0645\u062F \u062D\u0633\u06CC\u0646 \u0637\u0628\u0627\u0637\u0628\u0627\u06CC\u06CC (\u06F1\u06F3\u06F6\u06F0 \u0647\u200D.\u0634)" },
  { holiday: false, month: 9, day: 5, type: "Iran", title: "\u0633\u0627\u0644\u0631\u0648\u0632 \u0642\u06CC\u0627\u0645 \u0645\u0631\u062F\u0645 \u06AF\u0631\u06AF\u0627\u0646 (\u06F1\u06F3\u06F5\u06F7 \u0647\u200D.\u0634)" },
  { holiday: false, month: 9, day: 5, type: "Iran", title: "\u062A\u0634\u06A9\u06CC\u0644 \u0628\u0633\u06CC\u062C \u0645\u0633\u062A\u0636\u0639\u0641\u0627\u0646 (\u06F1\u06F3\u06F5\u06F8 \u0647\u200D.\u0634)" },
  { holiday: false, month: 9, day: 7, type: "Iran", title: "\u0631\u0648\u0632 \u0646\u06CC\u0631\u0648\u06CC \u062F\u0631\u06CC\u0627\u06CC\u06CC" },
  { holiday: false, month: 9, day: 9, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0634\u06CC\u062E \u0645\u0641\u06CC\u062F" },
  { holiday: false, month: 9, day: 10, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0622\u06CC\u062A\u200C\u0627\u0644\u0644\u0647 \u0633\u06CC\u062F \u062D\u0633\u0646 \u0645\u062F\u0631\u0633 (\u06F1\u06F3\u06F1\u06F6 \u0647\u200D.\u0634)" },
  { holiday: false, month: 9, day: 10, type: "Iran", title: "\u0631\u0648\u0632 \u0645\u062C\u0644\u0633" },
  { holiday: false, month: 9, day: 12, type: "Iran", title: "\u0631\u0648\u0632 \u0642\u0627\u0646\u0648\u0646 \u0627\u0633\u0627\u0633\u06CC \u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0627\u0645\u06CC \u0627\u06CC\u0631\u0627\u0646 (\u062A\u0635\u0648\u06CC\u0628 \u0642\u0627\u0646\u0648\u0646 \u0627\u0633\u0627\u0633\u06CC \u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0627\u0645\u06CC \u0627\u06CC\u0631\u0627\u0646 - \u06F1\u06F3\u06F5\u06F8 \u0647\u200D.\u0634)" },
  { holiday: false, month: 9, day: 16, type: "Iran", title: "\u0631\u0648\u0632 \u062F\u0627\u0646\u0634\u062C\u0648" },
  { holiday: false, month: 9, day: 19, type: "Iran", title: "\u062A\u0634\u06A9\u06CC\u0644 \u0634\u0648\u0631\u0627\u06CC \u0639\u0627\u0644\u06CC \u0627\u0646\u0642\u0644\u0627\u0628 \u0641\u0631\u0647\u0646\u06AF\u06CC (\u06F1\u06F3\u06F6\u06F3 \u0647\u200D.\u0634)" },
  { holiday: false, month: 9, day: 20, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0622\u06CC\u062A\u200C\u0627\u0644\u0644\u0647 \u062F\u0633\u062A\u063A\u06CC\u0628 (\u06F1\u06F3\u06F6\u06F0 \u0647\u200D.\u0634)" },
  { holiday: false, month: 9, day: 25, type: "Iran", title: "\u0631\u0648\u0632 \u067E\u0698\u0648\u0647\u0634" },
  { holiday: false, month: 9, day: 27, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0622\u06CC\u062A\u200C\u0627\u0644\u0644\u0647 \u062F\u06A9\u062A\u0631 \u0645\u062D\u0645\u062F \u0645\u0641\u062A\u062D (\u06F1\u06F3\u06F5\u06F8 \u0647\u200D.\u0634)" },
  { holiday: false, month: 9, day: 27, type: "Iran", title: "\u0631\u0648\u0632 \u0648\u062D\u062F\u062A \u062D\u0648\u0632\u0647 \u0648 \u062F\u0627\u0646\u0634\u06AF\u0627\u0647" },
  { holiday: false, month: 9, day: 30, type: "Iran", title: "\u0634\u0628 \u06CC\u0644\u062F\u0627 (\u0686\u0644\u0647)" },
  { holiday: false, month: 10, day: 5, type: "Iran", title: "\u0631\u0648\u0632 \u0627\u06CC\u0645\u0646\u06CC \u062F\u0631 \u0628\u0631\u0627\u0628\u0631 \u0632\u0644\u0632\u0644\u0647 \u0648 \u06A9\u0627\u0647\u0634 \u0627\u062B\u0631\u0627\u062A \u0628\u0644\u0627\u06CC\u0627\u06CC \u0637\u0628\u06CC\u0639\u06CC" },
  { holiday: false, month: 10, day: 7, type: "Iran", title: "\u062A\u0634\u06A9\u06CC\u0644 \u0646\u0647\u0636\u062A \u0633\u0648\u0627\u062F\u0622\u0645\u0648\u0632\u06CC (\u06F1\u06F3\u06F5\u06F8 \u0647\u200D.\u0634)" },
  { holiday: false, month: 10, day: 19, type: "Iran", title: "\u0642\u06CC\u0627\u0645 \u062E\u0648\u0646\u06CC\u0646 \u0645\u0631\u062F\u0645 \u0642\u0645 (\u06F1\u06F3\u06F5\u06F6 \u0647\u200D.\u0634)" },
  { holiday: false, month: 10, day: 20, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0645\u06CC\u0631\u0632\u0627\u062A\u0642\u06CC\u200C\u062E\u0627\u0646 \u0627\u0645\u06CC\u0631\u06A9\u0628\u06CC\u0631 (\u06F1\u06F2\u06F3\u06F0 \u0647\u200D.\u0634)" },
  { holiday: false, month: 10, day: 22, type: "Iran", title: "\u062A\u0634\u06A9\u06CC\u0644 \u0634\u0648\u0631\u0627\u06CC \u0627\u0646\u0642\u0644\u0627\u0628 (\u06F1\u06F3\u06F5\u06F7 \u0647\u200D.\u0634)" },
  { holiday: false, month: 10, day: 26, type: "Iran", title: "\u062E\u0631\u0648\u062C \u0634\u0627\u0647 \u0627\u0632 \u0627\u06CC\u0631\u0627\u0646 (\u06F1\u06F3\u06F5\u06F7 \u0647\u200D.\u0634)" },
  { holiday: false, month: 10, day: 27, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0646\u0648\u0627\u0628 \u0635\u0641\u0648\u06CC\u060C \u0637\u0647\u0645\u0627\u0633\u0628\u06CC\u060C \u0628\u0631\u0627\u062F\u0631\u0627\u0646 \u0648\u0627\u062D\u062F\u06CC \u0648 \u0630\u0648\u0627\u0644\u0642\u062F\u0631 \u0627\u0632 \u0627\u0639\u0636\u0627\u06CC \u0641\u062F\u0627\u06CC\u06CC\u0627\u0646 \u0627\u0633\u0644\u0627\u0645 (\u06F1\u06F3\u06F3\u06F4 \u0647\u200D.\u0634)" },
  { holiday: false, month: 10, day: 29, type: "Iran", title: "\u0631\u0648\u0632 \u063A\u0632\u0647" },
  { holiday: false, month: 11, day: 6, type: "Iran", title: "\u0633\u0627\u0644\u0631\u0648\u0632 \u062D\u0645\u0627\u0633\u0647\u0654 \u0645\u0631\u062F\u0645 \u0622\u0645\u0644" },
  { holiday: false, month: 11, day: 12, type: "Iran", title: "\u0628\u0627\u0632\u06AF\u0634\u062A \u0627\u0645\u0627\u0645 \u062E\u0645\u06CC\u0646\u06CC \u0628\u0647 \u0627\u06CC\u0631\u0627\u0646 (\u06F1\u06F3\u06F5\u06F7 \u0647\u200D.\u0634) \u0648 \u0622\u063A\u0627\u0632 \u062F\u0647\u0647\u0654 \u0641\u062C\u0631 \u0627\u0646\u0642\u0644\u0627\u0628 \u0627\u0633\u0644\u0627\u0645\u06CC" },
  { holiday: false, month: 11, day: 14, type: "Iran", title: "\u0631\u0648\u0632 \u0641\u0646\u0627\u0648\u0631\u06CC \u0641\u0636\u0627\u06CC\u06CC" },
  { holiday: false, month: 11, day: 19, type: "Iran", title: "\u0631\u0648\u0632 \u0646\u06CC\u0631\u0648\u06CC \u0647\u0648\u0627\u06CC\u06CC" },
  { holiday: true, month: 11, day: 22, type: "Iran", title: "\u067E\u06CC\u0631\u0648\u0632\u06CC \u0627\u0646\u0642\u0644\u0627\u0628 \u0627\u0633\u0644\u0627\u0645\u06CC \u0627\u06CC\u0631\u0627\u0646 \u0648 \u0633\u0642\u0648\u0637 \u0646\u0638\u0627\u0645 \u0634\u0627\u0647\u0646\u0634\u0627\u0647\u06CC (\u06F1\u06F3\u06F5\u06F7 \u0647\u200D.\u0634)" },
  { holiday: false, month: 11, day: 29, type: "Iran", title: "\u0642\u06CC\u0627\u0645 \u0645\u0631\u062F\u0645 \u062A\u0628\u0631\u06CC\u0632 \u0628\u0647 \u0645\u0646\u0627\u0633\u0628\u062A \u0686\u0647\u0644\u0645\u06CC\u0646 \u0631\u0648\u0632 \u0634\u0647\u0627\u062F\u062A \u0634\u0647\u062F\u0627\u06CC \u0642\u0645 (\u06F1\u06F3\u06F5\u06F6 \u0647\u200D.\u0634)" },
  { holiday: false, month: 11, day: 29, type: "Iran", title: "\u0631\u0648\u0632 \u0627\u0642\u062A\u0635\u0627\u062F \u0645\u0642\u0627\u0648\u0645\u062A\u06CC \u0648 \u06A9\u0627\u0631\u0622\u0641\u0631\u06CC\u0646\u06CC" },
  { holiday: false, month: 12, day: 5, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u062E\u0648\u0627\u062C\u0647 \u0646\u0635\u06CC\u0631\u0627\u0644\u062F\u06CC\u0646 \u0637\u0648\u0633\u06CC" },
  { holiday: false, month: 12, day: 5, type: "Iran", title: "\u0631\u0648\u0632 \u0645\u0647\u0646\u062F\u0633\u06CC" },
  { holiday: false, month: 12, day: 14, type: "Iran", title: "\u0631\u0648\u0632 \u0627\u062D\u0633\u0627\u0646 \u0648 \u0646\u06CC\u06A9\u0648\u06A9\u0627\u0631\u06CC" },
  { holiday: false, month: 12, day: 15, type: "Iran", title: "\u0631\u0648\u0632 \u062F\u0631\u062E\u062A\u06A9\u0627\u0631\u06CC" },
  { holiday: false, month: 12, day: 18, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0633\u06CC\u062F \u062C\u0645\u0627\u0644\u200C\u0627\u0644\u062F\u06CC\u0646 \u0627\u0633\u062F\u0622\u0628\u0627\u062F\u06CC" },
  { holiday: false, month: 12, day: 18, type: "Iran", title: "\u0633\u0627\u0644\u0631\u0648\u0632 \u062A\u0623\u0633\u06CC\u0633 \u06A9\u0627\u0646\u0648\u0646\u200C\u0647\u0627\u06CC \u0641\u0631\u0647\u0646\u06AF\u06CC \u0648 \u0647\u0646\u0631\u06CC \u0645\u0633\u0627\u062C\u062F \u06A9\u0634\u0648\u0631" },
  { holiday: false, month: 12, day: 20, type: "Iran", title: "\u0631\u0648\u0632 \u0631\u0627\u0647\u06CC\u0627\u0646 \u0646\u0648\u0631" },
  { holiday: false, month: 12, day: 21, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0646\u0638\u0627\u0645\u06CC \u06AF\u0646\u062C\u0648\u06CC" },
  { holiday: false, month: 12, day: 22, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0634\u0647\u062F\u0627 (\u062A\u0623\u0633\u06CC\u0633 \u0628\u0646\u06CC\u0627\u062F \u0634\u0647\u06CC\u062F \u0627\u0646\u0642\u0644\u0627\u0628 \u0627\u0633\u0644\u0627\u0645\u06CC - \u06F1\u06F3\u06F5\u06F8 \u0647\u200D.\u0634)" },
  { holiday: false, month: 12, day: 25, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u067E\u0631\u0648\u06CC\u0646 \u0627\u0639\u062A\u0635\u0627\u0645\u06CC" },
  { holiday: true, month: 12, day: 29, type: "Iran", title: "\u0631\u0648\u0632 \u0645\u0644\u06CC \u0634\u062F\u0646 \u0635\u0646\u0639\u062A \u0646\u0641\u062A \u0627\u06CC\u0631\u0627\u0646 (\u06F1\u06F3\u06F2\u06F9 \u0647\u200D.\u0634)" },
  { holiday: false, month: 1, day: 10, type: "Iran", title: "\u0647\u0645\u0647\u200C\u067E\u0631\u0633\u06CC \u062A\u063A\u06CC\u06CC\u0631 \u0646\u0638\u0627\u0645 \u0634\u0627\u0647\u0646\u0634\u0627\u0647\u06CC \u0628\u0647 \u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0627\u0645\u06CC \u0627\u06CC\u0631\u0627\u0646 (\u06F1\u06F3\u06F5\u06F8 \u0647\u200D.\u0634)" },
  { holiday: false, month: 1, day: 15, type: "Iran", title: "\u0631\u0648\u0632 \u0630\u062E\u0627\u06CC\u0631 \u0698\u0646\u062A\u06CC\u06A9\u06CC \u0648 \u0632\u06CC\u0633\u062A\u06CC" },
  { holiday: false, month: 1, day: 19, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0622\u06CC\u062A\u200C\u0627\u0644\u0644\u0647 \u0633\u06CC\u062F \u0645\u062D\u0645\u062F \u0628\u0627\u0642\u0631 \u0635\u062F\u0631 \u0648 \u062E\u0648\u0627\u0647\u0631\u0634\u0627\u0646 \u0628\u0646\u062A\u200C\u0627\u0644\u0647\u062F\u06CC (\u06F1\u06F3\u06F5\u06F9 \u0647\u200D.\u0634)" },
  { holiday: false, month: 1, day: 20, type: "Iran", title: "\u0642\u0637\u0639 \u0645\u0646\u0627\u0633\u0628\u0627\u062A \u0633\u06CC\u0627\u0633\u06CC \u0627\u06CC\u0631\u0627\u0646 \u0648 \u0622\u0645\u0631\u06CC\u06A9\u0627 (\u06F1\u06F3\u06F5\u06F9 \u0647\u200D.\u0634)" },
  { holiday: false, month: 2, day: 2, type: "Iran", title: "\u0631\u0648\u0632 \u0632\u0645\u06CC\u0646 \u067E\u0627\u06A9" },
  { holiday: false, month: 2, day: 7, type: "Iran", title: "\u0631\u0648\u0632 \u0627\u06CC\u0645\u0646\u06CC \u062D\u0645\u0644\u200C\u0648\u0646\u0642\u0644" },
  { holiday: false, month: 2, day: 10, type: "Iran", title: "\u0622\u063A\u0627\u0632 \u0639\u0645\u0644\u06CC\u0627\u062A \u0628\u06CC\u062A \u0627\u0644\u0645\u0642\u062F\u0633 (\u06F1\u06F3\u06F6\u06F1 \u0647\u200D.\u0634)" },
  { holiday: false, month: 2, day: 11, type: "Iran", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u06A9\u0627\u0631\u06AF\u0631 (\u06F1 \u0645\u0647)" },
  { holiday: false, month: 2, day: 19, type: "Iran", title: "\u0631\u0648\u0632 \u0627\u0633\u0646\u0627\u062F \u0645\u0644\u06CC \u0648 \u0645\u06CC\u0631\u0627\u062B \u0645\u06A9\u062A\u0648\u0628" },
  { holiday: false, month: 3, day: 5, type: "Iran", title: "\u0631\u0648\u0632 \u0646\u0633\u06CC\u0645 \u0645\u0647\u0631 (\u0631\u0648\u0632 \u062D\u0645\u0627\u06CC\u062A \u0627\u0632 \u062E\u0627\u0646\u0648\u0627\u062F\u0647\u0654 \u0632\u0646\u062F\u0627\u0646\u06CC\u0627\u0646)" },
  { holiday: false, month: 3, day: 7, type: "Iran", title: "\u0627\u0641\u062A\u062A\u0627\u062D \u0627\u0648\u0644\u06CC\u0646 \u062F\u0648\u0631\u0647\u0654 \u0645\u062C\u0644\u0633 \u0634\u0648\u0631\u0627\u06CC \u0627\u0633\u0644\u0627\u0645\u06CC (\u06F1\u06F3\u06F5\u06F9 \u0647\u200D.\u0634)" },
  { holiday: false, month: 3, day: 15, type: "Iran", title: "\u0632\u0646\u062F\u0627\u0646\u06CC \u0634\u062F\u0646 \u0627\u0645\u0627\u0645 \u062E\u0645\u06CC\u0646\u06CC (\u06F1\u06F3\u06F4\u06F2 \u0647\u200D.\u0634)" },
  { holiday: false, month: 3, day: 20, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0622\u06CC\u062A\u200C\u0627\u0644\u0644\u0647 \u0633\u0639\u06CC\u062F\u06CC (\u06F1\u06F3\u06F4\u06F9 \u0647\u200D.\u0634)" },
  { holiday: false, month: 3, day: 25, type: "Iran", title: "\u0631\u0648\u0632 \u06AF\u0644 \u0648 \u06AF\u06CC\u0627\u0647" },
  { holiday: false, month: 3, day: 30, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0632\u0627\u0626\u0631\u0627\u0646 \u062D\u0631\u0645 \u0631\u0636\u0648\u06CC (\u0639) (\u0639\u0627\u0634\u0648\u0631\u0627\u06CC \u06F1\u06F3\u06F7\u06F3 \u0647\u200D.\u0634)" },
  { holiday: false, month: 4, day: 10, type: "Iran", title: "\u0631\u0648\u0632 \u0622\u0632\u0627\u062F\u0633\u0627\u0632\u06CC \u0634\u0647\u0631 \u0645\u0647\u0631\u0627\u0646" },
  { holiday: false, month: 4, day: 12, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0639\u0644\u0627\u0645\u0647 \u0627\u0645\u06CC\u0646\u06CC (\u06F1\u06F3\u06F4\u06F9 \u0647\u200D.\u0634)" },
  { holiday: false, month: 4, day: 16, type: "Iran", title: "\u0631\u0648\u0632 \u0645\u0627\u0644\u06CC\u0627\u062A" },
  { holiday: false, month: 4, day: 21, type: "Iran", title: "\u06A9\u0634\u0641 \u062A\u0648\u0637\u0626\u0647\u0654 \u06A9\u0648\u062F\u062A\u0627 \u062F\u0631 \u067E\u0627\u06CC\u06AF\u0627\u0647 \u0647\u0648\u0627\u06CC\u06CC \u0634\u0647\u06CC\u062F \u0646\u0648\u0698\u0647 (\u06F1\u06F3\u06F5\u06F9 \u0647\u200D.\u0634)" },
  { holiday: false, month: 4, day: 18, type: "Iran", title: "\u06A9\u0634\u0641 \u06A9\u0648\u062F\u062A\u0627\u06CC \u0646\u0648\u0698\u0647 (\u06F1\u06F3\u06F5\u06F9 \u0647\u200D.\u0634)" },
  { holiday: false, month: 4, day: 21, type: "Iran", title: "\u062D\u0645\u0644\u0647 \u0628\u0647 \u0645\u0633\u062C\u062F \u06AF\u0648\u0647\u0631\u0634\u0627\u062F \u0648 \u06A9\u0634\u062A\u0627\u0631 \u0645\u0631\u062F\u0645 (\u06F1\u06F3\u06F1\u06F4 \u0647\u200D.\u0634)" },
  { holiday: false, month: 4, day: 23, type: "Iran", title: "\u06AF\u0634\u0627\u06CC\u0634 \u0646\u062E\u0633\u062A\u06CC\u0646 \u0645\u062C\u0644\u0633 \u062E\u0628\u0631\u06AF\u0627\u0646 \u0631\u0647\u0628\u0631\u06CC (\u06F1\u06F3\u06F6\u06F2 \u0647\u200D.\u0634)" },
  { holiday: false, month: 4, day: 27, type: "Iran", title: "\u0627\u0639\u0644\u0627\u0645 \u067E\u0630\u06CC\u0631\u0634 \u0642\u0637\u0639\u0646\u0627\u0645\u0647\u0654 \u06F5\u06F9\u06F8 \u0634\u0648\u0631\u0627\u06CC \u0627\u0645\u0646\u06CC\u062A \u0627\u0632 \u0633\u0648\u06CC \u0627\u06CC\u0631\u0627\u0646 (\u06F1\u06F3\u06F6\u06F7 \u0647\u200D.\u0634)" },
  { holiday: false, month: 4, day: 30, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0622\u06CC\u062A\u200C\u0627\u0644\u0644\u0647 \u0633\u06CC\u062F\u0627\u0628\u0648\u0627\u0644\u0642\u0627\u0633\u0645 \u06A9\u0627\u0634\u0627\u0646\u06CC" },
  { holiday: false, month: 5, day: 6, type: "Iran", title: "\u0631\u0648\u0632 \u06A9\u0627\u0631\u0622\u0641\u0631\u06CC\u0646\u06CC \u0648 \u0622\u0645\u0648\u0632\u0634\u200C\u0647\u0627\u06CC \u0641\u0646\u06CC \u0648 \u062D\u0631\u0641\u0647\u200C\u0627\u06CC" },
  { holiday: false, month: 5, day: 8, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0634\u06CC\u062E \u0634\u0647\u0627\u0628\u200C\u0627\u0644\u062F\u06CC\u0646 \u0633\u0647\u0631\u0648\u0631\u062F\u06CC (\u0634\u06CC\u062E \u0627\u0634\u0631\u0627\u0642)" },
  { holiday: false, month: 5, day: 11, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0622\u06CC\u062A\u200C\u0627\u0644\u0644\u0647 \u0634\u06CC\u062E \u0641\u0636\u0644\u200C\u0627\u0644\u0644\u0647 \u0646\u0648\u0631\u06CC (\u06F1\u06F2\u06F8\u06F8 \u0647\u200D.\u0634)" },
  { holiday: false, month: 5, day: 28, type: "Iran", title: "\u06AF\u0634\u0627\u06CC\u0634 \u0645\u062C\u0644\u0633 \u062E\u0628\u0631\u06AF\u0627\u0646 \u0628\u0631\u0627\u06CC \u0628\u0631\u0631\u0633\u06CC \u0646\u0647\u0627\u06CC\u06CC \u0642\u0627\u0646\u0648\u0646 \u0627\u0633\u0627\u0633\u06CC \u062C\u0645\u0647\u0648\u0631\u06CC \u0627\u0633\u0644\u0627\u0645\u06CC \u0627\u06CC\u0631\u0627\u0646 (\u06F1\u06F3\u06F5\u06F8 \u0647\u200D.\u0634)" },
  { holiday: false, month: 5, day: 31, type: "Iran", title: "\u0631\u0648\u0632 \u0635\u0646\u0639\u062A \u062F\u0641\u0627\u0639\u06CC" },
  { holiday: false, month: 6, day: 3, type: "Iran", title: "\u0627\u0634\u063A\u0627\u0644 \u0627\u06CC\u0631\u0627\u0646 \u0628\u0647 \u062F\u0633\u062A \u0645\u062A\u0641\u0642\u06CC\u0646 (\u06F1\u06F3\u06F2\u06F0 \u0647\u200D.\u0634)" },
  { holiday: false, month: 6, day: 10, type: "Iran", title: "\u062A\u0635\u0648\u06CC\u0628 \u0642\u0627\u0646\u0648\u0646 \u0639\u0645\u0644\u06CC\u0627\u062A \u0628\u0627\u0646\u06A9\u06CC \u0628\u062F\u0648\u0646 \u0631\u0628\u0627 (\u06F1\u06F3\u06F6\u06F2 \u0647\u200D.\u0634)" },
  { holiday: false, month: 6, day: 10, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0627\u0646\u06A9\u062F\u0627\u0631\u06CC \u0627\u0633\u0644\u0627\u0645\u06CC" },
  { holiday: false, month: 6, day: 11, type: "Iran", title: "\u0631\u0648\u0632 \u0635\u0646\u0639\u062A \u0686\u0627\u067E" },
  { holiday: false, month: 6, day: 12, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u0647\u0648\u0631\u0632" },
  { holiday: false, month: 6, day: 13, type: "Iran", title: "\u0631\u0648\u0632 \u0645\u0631\u062F\u0645\u200C\u0634\u0646\u0627\u0633\u06CC" },
  { holiday: false, month: 6, day: 30, type: "Iran", title: "\u0631\u0648\u0632 \u06AF\u0641\u062A\u200C\u0648\u06AF\u0648\u06CC \u062A\u0645\u062F\u0646\u200C\u0647\u0627" },
  { holiday: false, month: 7, day: 20, type: "Iran", title: "\u0631\u0648\u0632 \u0627\u0633\u06A9\u0627\u0646 \u0645\u0639\u0644\u0648\u0644\u0627\u0646 \u0648 \u0633\u0627\u0644\u0645\u0646\u062F\u0627\u0646" },
  { holiday: false, month: 7, day: 24, type: "Iran", title: "\u0631\u0648\u0632 \u067E\u06CC\u0648\u0646\u062F \u0627\u0648\u0644\u06CC\u0627 \u0648 \u0645\u0631\u0628\u06CC\u0627\u0646" },
  { holiday: false, month: 7, day: 24, type: "Iran", title: "\u0628\u0647 \u0622\u062A\u0634 \u06A9\u0634\u06CC\u062F\u0647\u200C\u0634\u062F\u0646 \u0645\u0633\u062C\u062F \u062C\u0627\u0645\u0639 \u0634\u0647\u0631 \u06A9\u0631\u0645\u0627\u0646 (\u06F1\u06F3\u06F5\u06F7 \u0647\u200D.\u0634)" },
  { holiday: false, month: 7, day: 29, type: "Iran", title: "\u0631\u0648\u0632 \u0635\u0627\u062F\u0631\u0627\u062A" },
  { holiday: false, month: 8, day: 1, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0622\u06CC\u062A\u200C\u0627\u0644\u0644\u0647 \u062D\u0627\u062C \u0633\u06CC\u062F \u0645\u0635\u0637\u0641\u06CC \u062E\u0645\u06CC\u0646\u06CC (\u06F1\u06F3\u06F5\u06F6 \u0647\u200D.\u0634)" },
  { holiday: false, month: 8, day: 1, type: "Iran", title: "\u0631\u0648\u0632 \u0622\u0645\u0627\u0631 \u0648 \u0628\u0631\u0646\u0627\u0645\u0647\u200C\u0631\u06CC\u0632\u06CC" },
  { holiday: false, month: 8, day: 8, type: "Iran", title: "\u0631\u0648\u0632 \u067E\u062F\u0627\u0641\u0646\u062F \u063A\u06CC\u0631\u0639\u0627\u0645\u0644" },
  { holiday: false, month: 8, day: 13, type: "Iran", title: "\u062A\u0628\u0639\u06CC\u062F \u0627\u0645\u0627\u0645 \u062E\u0645\u06CC\u0646\u06CC \u0627\u0632 \u0627\u06CC\u0631\u0627\u0646 \u0628\u0647 \u062A\u0631\u06A9\u06CC\u0647 (\u06F1\u06F3\u06F4\u06F3 \u0647\u200D.\u0634)" },
  { holiday: false, month: 8, day: 18, type: "Iran", title: "\u0631\u0648\u0632 \u06A9\u06CC\u0641\u06CC\u062A" },
  { holiday: false, month: 8, day: 26, type: "Iran", title: "\u0622\u0632\u0627\u062F\u0633\u0627\u0632\u06CC \u0633\u0648\u0633\u0646\u06AF\u0631\u062F" },
  { holiday: false, month: 9, day: 11, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0645\u06CC\u0631\u0632\u0627 \u06A9\u0648\u0686\u06A9 \u062E\u0627\u0646 \u062C\u0646\u06AF\u0644\u06CC (\u06F1\u06F3\u06F0\u06F0 \u0647\u200D.\u0634)" },
  { holiday: false, month: 9, day: 13, type: "Iran", title: "\u0631\u0648\u0632 \u0628\u06CC\u0645\u0647" },
  { holiday: false, month: 9, day: 18, type: "Iran", title: "\u0645\u0639\u0631\u0641\u06CC \u0639\u0631\u0627\u0642 \u0628\u0647 \u0639\u0646\u0648\u0627\u0646 \u0645\u0633\u0626\u0648\u0644 \u0648 \u0622\u063A\u0627\u0632\u06AF\u0631 \u062C\u0646\u06AF \u0627\u0632 \u0633\u0648\u06CC \u0633\u0627\u0632\u0645\u0627\u0646 \u0645\u0644\u0644 (\u06F1\u06F3\u06F7\u06F0 \u0647\u200D.\u0634)" },
  { holiday: false, month: 9, day: 26, type: "Iran", title: "\u0631\u0648\u0632 \u062D\u0645\u0644 \u0648 \u0646\u0642\u0644 \u0648 \u0631\u0627\u0646\u0646\u062F\u06AF\u0627\u0646" },
  { holiday: false, month: 9, day: 29, type: "Iran", title: "\u0631\u0648\u0632 \u062A\u062C\u0644\u06CC\u0644 \u0627\u0632 \u0634\u0647\u06CC\u062F \u062A\u0646\u062F\u06AF\u0648\u06CC\u0627\u0646" },
  { holiday: false, month: 10, day: 3, type: "Iran", title: "\u0631\u0648\u0632 \u062B\u0628\u062A \u0627\u062D\u0648\u0627\u0644" },
  { holiday: false, month: 10, day: 7, type: "Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0622\u06CC\u062A\u200C\u0627\u0644\u0644\u0647 \u062D\u0633\u06CC\u0646 \u063A\u0641\u0627\u0631\u06CC (\u06F1\u06F3\u06F5\u06F3 \u0647\u200D.\u0634)" },
  { holiday: false, month: 10, day: 8, type: "Iran", title: "\u0631\u0648\u0632 \u0635\u0646\u0639\u062A \u067E\u062A\u0631\u0648\u0634\u06CC\u0645\u06CC" },
  { holiday: false, month: 10, day: 9, type: "Iran", title: "\u06F9 \u062F\u06CC" },
  { holiday: false, month: 10, day: 13, type: "Iran", title: "\u0627\u0628\u0644\u0627\u063A \u067E\u06CC\u0627\u0645 \u062A\u0627\u0631\u06CC\u062E\u06CC \u0627\u0645\u0627\u0645 \u062E\u0645\u06CC\u0646\u06CC \u0628\u0647 \u06AF\u0648\u0631\u0628\u0627\u0686\u0641 \u0631\u0647\u0628\u0631 \u0634\u0648\u0631\u0648\u06CC \u0633\u0627\u0628\u0642 (\u06F1\u06F3\u06F6\u06F7 \u0647\u200D.\u0634)" },
  { holiday: false, month: 10, day: 17, type: "Iran", title: "\u0627\u062C\u0631\u0627\u06CC \u0637\u0631\u062D \u062D\u0630\u0641 \u062D\u062C\u0627\u0628 (\u06F1\u06F3\u06F1\u06F4 \u0647\u200D.\u0634)" },
  { holiday: false, month: 11, day: 5, type: "Iran", title: "\u0627\u0646\u062A\u062E\u0627\u0628\u0627\u062A \u0627\u0648\u0644\u06CC\u0646 \u062F\u0648\u0631\u0647\u0654 \u0631\u06CC\u0627\u0633\u062A \u062C\u0645\u0647\u0648\u0631\u06CC (\u06F1\u06F3\u06F5\u06F8 \u0647\u200D.\u0634)" },
  { holiday: false, month: 11, day: 21, type: "Iran", title: "\u0634\u06A9\u0633\u062A\u0647 \u0634\u062F\u0646 \u062D\u06A9\u0648\u0645\u062A \u0646\u0638\u0627\u0645\u06CC \u0628\u0647 \u0641\u0631\u0645\u0627\u0646 \u0627\u0645\u0627\u0645 \u062E\u0645\u06CC\u0646\u06CC (\u06F1\u06F3\u06F5\u06F7 \u0647\u200D.\u0634)" },
  { holiday: false, month: 11, day: 25, type: "Iran", title: "\u0635\u062F\u0648\u0631 \u062D\u06A9\u0645 \u0627\u0645\u0627\u0645 \u062E\u0645\u06CC\u0646\u06CC \u0645\u0628\u0646\u06CC \u0628\u0631 \u0627\u0631\u062A\u062F\u0627\u062F \u0633\u0644\u0645\u0627\u0646 \u0631\u0634\u062F\u06CC (\u06F1\u06F3\u06F6\u06F7 \u0647\u200D.\u0634)" },
  { holiday: false, month: 12, day: 3, type: "Iran", title: "\u06A9\u0648\u062F\u062A\u0627\u06CC \u0631\u0636\u0627\u062E\u0627\u0646 (\u06F1\u06F2\u06F9\u06F9 \u0647\u200D.\u0634)" },
  { holiday: false, month: 12, day: 8, type: "Iran", title: "\u0631\u0648\u0632 \u0627\u0645\u0648\u0631 \u062A\u0631\u0628\u06CC\u062A\u06CC \u0648 \u062A\u0631\u0628\u06CC\u062A \u0627\u0633\u0644\u0627\u0645\u06CC" },
  { holiday: false, month: 12, day: 9, type: "Iran", title: "\u0631\u0648\u0632 \u0645\u0644\u06CC \u062D\u0645\u0627\u06CC\u062A \u0627\u0632 \u062D\u0642\u0648\u0642 \u0645\u0635\u0631\u0641\u200C\u06A9\u0646\u0646\u062F\u06AF\u0627\u0646" },
  { holiday: false, month: 12, day: 24, type: "Iran", title: "\u0628\u0631\u06AF\u0632\u0627\u0631\u06CC \u0627\u0646\u062A\u062E\u0627\u0628\u0627\u062A \u0627\u0648\u0644\u06CC\u0646 \u062F\u0648\u0631\u0647\u0654 \u0645\u062C\u0644\u0633 \u0634\u0648\u0631\u0627\u06CC \u0627\u0633\u0644\u0627\u0645\u06CC (\u06F1\u06F3\u06F5\u06F8 \u0647\u200D.\u0634)" },
  { holiday: false, month: 12, day: 25, type: "Iran", title: "\u0628\u0645\u0628\u0627\u0631\u0627\u0646 \u0634\u06CC\u0645\u06CC\u0627\u06CC\u06CC \u062D\u0644\u0628\u0686\u0647 \u062A\u0648\u0633\u0637 \u0627\u0631\u062A\u0634 \u0628\u0639\u062B \u0639\u0631\u0627\u0642 (\u06F1\u06F3\u06F6\u06F6 \u0647\u200D.\u0634)" },
  { holiday: false, month: 1, day: 6, type: "Ancient Iran", title: "\u0631\u0648\u0632 \u0627\u0645\u06CC\u062F\u060C \u0631\u0648\u0632 \u0634\u0627\u062F\u0628\u0627\u0634\u200C\u0646\u0648\u06CC\u0633\u06CC" },
  { holiday: false, month: 1, day: 10, type: "Ancient Iran", title: "\u062C\u0634\u0646 \u0622\u0628\u0627\u0646\u06AF\u0627\u0647" },
  { holiday: false, month: 1, day: 13, type: "Ancient Iran", title: "\u062C\u0634\u0646 \u0633\u06CC\u0632\u062F\u0647\u200C\u0628\u062F\u0631" },
  { holiday: false, month: 1, day: 17, type: "Ancient Iran", title: "\u0633\u0631\u0648\u0634\u200C\u0631\u0648\u0632\u060C \u062C\u0634\u0646 \u0633\u0631\u0648\u0634\u06AF\u0627\u0646" },
  { holiday: false, month: 1, day: 19, type: "Ancient Iran", title: "\u0641\u0631\u0648\u0631\u06CC\u0646\u200C\u0631\u0648\u0632\u060C \u062C\u0634\u0646 \u0641\u0631\u0648\u0631\u062F\u06CC\u0646\u06AF\u0627\u0646" },
  { holiday: false, month: 2, day: 2, type: "Ancient Iran", title: "\u062C\u0634\u0646 \u06AF\u06CC\u0627\u0647\u200C\u0622\u0648\u0631\u06CC" },
  { holiday: false, month: 2, day: 3, type: "Ancient Iran", title: "\u0627\u0631\u062F\u06CC\u0628\u0647\u0634\u062A\u200C\u0631\u0648\u0632\u060C \u062C\u0634\u0646 \u0627\u0631\u062F\u06CC\u0628\u0647\u0634\u062A\u06AF\u0627\u0646" },
  { holiday: false, month: 2, day: 10, type: "Ancient Iran", title: "\u062C\u0634\u0646 \u0686\u0647\u0644\u0645 \u0646\u0648\u0631\u0648\u0632" },
  { holiday: false, month: 2, day: 15, type: "Ancient Iran", title: "\u06AF\u0627\u0647\u0646\u0628\u0627\u0631 \u0645\u06CC\u062F\u06CC\u0648\u0632\u064E\u0631\u0650\u0645\u060C \u062C\u0634\u0646 \u0645\u06CC\u0627\u0646\u0647\u0654 \u0628\u0647\u0627\u0631\u060C \u062C\u0634\u0646 \u0628\u0647\u0627\u0631\u0628\u064F\u062F / \u0631\u0648\u0632 \u067E\u06CC\u0627\u0645\u200C\u0622\u0648\u0631\u06CC \u0632\u0631\u062A\u0634\u062A" },
  { holiday: false, month: 3, day: 1, type: "Ancient Iran", title: "\u0627\u0631\u063A\u0627\u0633\u0648\u0627\u0646\u060C \u062C\u0634\u0646 \u06AF\u0631\u0645\u0627" },
  { holiday: false, month: 3, day: 6, type: "Ancient Iran", title: "\u062E\u0631\u062F\u0627\u062F\u0631\u0648\u0632\u060C \u062C\u0634\u0646 \u062E\u0631\u062F\u0627\u062F\u06AF\u0627\u0646" },
  { holiday: false, month: 4, day: 1, type: "Ancient Iran", title: "\u062C\u0634\u0646 \u0622\u0628\u200C\u067E\u0627\u0634\u0648\u0646\u06A9\u060C \u062C\u0634\u0646 \u0622\u063A\u0627\u0632 \u062A\u0627\u0628\u0633\u062A\u0627\u0646 / \u0633\u0627\u0644 \u0646\u0648 \u062F\u0631 \u06AF\u0627\u0647\u0634\u0645\u0627\u0631\u06CC \u06AF\u0627\u0647\u0646\u0628\u0627\u0631\u06CC / \u062F\u06CC\u062F\u0627\u0631 \u0637\u0644\u0648\u0639 \u062E\u0648\u0631\u0634\u06CC\u062F \u062F\u0631 \u062A\u0642\u0648\u06CC\u0645 \u0622\u0641\u062A\u0627\u0628\u06CC \u0686\u0627\u0631\u062A\u0627\u0642\u06CC \u0646\u06CC\u0627\u0633\u0631" },
  { holiday: false, month: 4, day: 6, type: "Ancient Iran", title: "\u062C\u0634\u0646 \u0646\u06CC\u0644\u0648\u0641\u0631" },
  { holiday: false, month: 4, day: 13, type: "Ancient Iran", title: "\u062A\u06CC\u0631\u0631\u0648\u0632\u060C \u062C\u0634\u0646 \u062A\u06CC\u0631\u06AF\u0627\u0646" },
  { holiday: false, month: 4, day: 15, type: "Ancient Iran", title: "\u062C\u0634\u0646 \u062E\u0627\u0645\u200C\u062E\u0648\u0627\u0631\u06CC" },
  { holiday: false, month: 5, day: 7, type: "Ancient Iran", title: "\u0645\u0631\u062F\u0627\u062F\u0631\u0648\u0632\u060C \u062C\u0634\u0646 \u0645\u0631\u062F\u0627\u062F\u06AF\u0627\u0646" },
  { holiday: false, month: 5, day: 10, type: "Ancient Iran", title: "\u062C\u0634\u0646 \u0686\u0644\u0647\u0654 \u062A\u0627\u0628\u0633\u062A\u0627\u0646" },
  { holiday: false, month: 5, day: 15, type: "Ancient Iran", title: "\u06AF\u0627\u0647\u0646\u0628\u0627\u0631 \u0645\u06CC\u062F\u06CC\u0648\u0634\u0650\u0645\u060C \u062C\u0634\u0646 \u0645\u06CC\u0627\u0646\u0647\u0654 \u062A\u0627\u0628\u0633\u062A\u0627\u0646" },
  { holiday: false, month: 5, day: 18, type: "Ancient Iran", title: "\u062C\u0634\u0646 \u0645\u064E\u06CC\u200C\u062E\u0648\u0627\u0631\u0647" },
  { holiday: false, month: 6, day: 1, type: "Ancient Iran", title: "\u0641\u063A\u062F\u06CC\u0647\u060C \u062C\u0634\u0646 \u062E\u0646\u06A9\u06CC \u0647\u0648\u0627" },
  { holiday: false, month: 6, day: 3, type: "Ancient Iran", title: "\u062C\u0634\u0646 \u06A9\u0634\u0645\u06CC\u0646" },
  { holiday: false, month: 6, day: 4, type: "Ancient Iran", title: "\u0634\u0647\u0631\u06CC\u0648\u0631\u0631\u0648\u0632\u060C \u062C\u0634\u0646 \u0634\u0647\u0631\u06CC\u0648\u0631\u06AF\u0627\u0646 / \u0632\u0627\u062F\u0631\u0648\u0632 \u062F\u0627\u0631\u0627\u0628 (\u06A9\u0648\u0631\u0648\u0634) / \u0639\u0631\u0648\u062C \u0645\u0627\u0646\u06CC" },
  { holiday: false, month: 6, day: 8, type: "Ancient Iran", title: "\u062E\u0632\u0627\u0646\u200C\u062C\u0634\u0646" },
  { holiday: false, month: 6, day: 15, type: "Ancient Iran", title: "\u0628\u0627\u0632\u0627\u0631\u062C\u0634\u0646" },
  { holiday: false, month: 6, day: 31, type: "Ancient Iran", title: "\u06AF\u0627\u0647\u0646\u0628\u0627\u0631 \u067E\u064E\u062A\u06CC\u064E\u0647\u200C\u0634\u064E\u0647\u06CC\u0645\u060C \u062C\u0634\u0646 \u067E\u0627\u06CC\u0627\u0646 \u062A\u0627\u0628\u0633\u062A\u0627\u0646" },
  { holiday: false, month: 7, day: 1, type: "Ancient Iran", title: "\u062C\u0634\u0646 \u0645\u06CC\u062A\u0631\u0627\u06A9\u0627\u0646\u0627 / \u0633\u0627\u0644 \u0646\u0648 \u0647\u062E\u0627\u0645\u0646\u0634\u06CC" },
  { holiday: false, month: 7, day: 12, type: "Ancient Iran", title: "\u0622\u06CC\u06CC\u0646 \u0642\u0627\u0644\u06CC\u0634\u0648\u06CC\u0627\u0646 \u0627\u0631\u062F\u0647\u0627\u0644\u060C \u0628\u0627\u0632\u0645\u0627\u0646\u062F\u06CC \u0627\u0632 \u062A\u06CC\u0631\u06AF\u0627\u0646" },
  { holiday: false, month: 7, day: 13, type: "Ancient Iran", title: "\u062A\u06CC\u0631\u0631\u0648\u0632\u060C \u062C\u0634\u0646 \u062A\u06CC\u0631\u0631\u0648\u0632\u06CC" },
  { holiday: false, month: 7, day: 16, type: "Ancient Iran", title: "\u0645\u0647\u0631\u0631\u0648\u0632\u060C \u062C\u0634\u0646 \u0645\u0647\u0631\u06AF\u0627\u0646" },
  { holiday: false, month: 7, day: 21, type: "Ancient Iran", title: "\u0631\u0627\u0645\u200C\u0631\u0648\u0632\u060C \u062C\u0634\u0646 \u0631\u0627\u0645\u200C\u0631\u0648\u0632\u06CC / \u062C\u0634\u0646 \u067E\u06CC\u0631\u0648\u0632\u06CC \u06A9\u0627\u0648\u0647 \u0648 \u0641\u0631\u06CC\u062F\u0648\u0646" },
  { holiday: false, month: 8, day: 7, type: "Ancient Iran", title: " \u0631\u0648\u0632 \u06A9\u0648\u0631\u0648\u0634 \u0628\u0632\u0631\u06AF" },
  { holiday: false, month: 8, day: 10, type: "Ancient Iran", title: "\u0622\u0628\u0627\u0646\u200C\u0631\u0648\u0632\u060C \u062C\u0634\u0646 \u0622\u0628\u0627\u0646\u06AF\u0627\u0646" },
  { holiday: false, month: 8, day: 15, type: "Ancient Iran", title: "\u06AF\u0627\u0647\u0646\u0628\u0627\u0631 \u0627\u064E\u06CC\u0627\u062B\u0631\u064E\u0645\u060C \u062C\u0634\u0646 \u0645\u06CC\u0627\u0646\u0647\u0654 \u067E\u0627\u06CC\u06CC\u0632" },
  { holiday: false, month: 9, day: 1, type: "Ancient Iran", title: "\u0622\u0630\u0631\u062C\u0634\u0646" },
  { holiday: false, month: 9, day: 9, type: "Ancient Iran", title: "\u0622\u0630\u0631\u0631\u0648\u0632\u060C \u062C\u0634\u0646 \u0622\u0630\u0631\u06AF\u0627\u0646" },
  { holiday: false, month: 9, day: 30, type: "Ancient Iran", title: "\u06AF\u0627\u0647\u0646\u0628\u0627\u0631 \u0645\u06CC\u062F\u06CC\u0627\u0631\u0650\u0645\u060C \u062C\u0634\u0646 \u0645\u06CC\u0627\u0646\u0647\u0654 \u0633\u0627\u0644 \u06AF\u0627\u0647\u0646\u0628\u0627\u0631\u06CC (\u0627\u0632 \u0645\u0628\u062F\u0623 \u0622\u063A\u0627\u0632 \u062A\u0627\u0628\u0633\u062A\u0627\u0646)" },
  { holiday: false, month: 10, day: 1, type: "Ancient Iran", title: "\u0631\u0648\u0632 \u0645\u06CC\u0644\u0627\u062F \u062E\u0648\u0631\u0634\u06CC\u062F\u060C \u062C\u0634\u0646 \u062E\u0631\u0645\u200C\u0631\u0648\u0632 / \u0646\u062E\u0633\u062A\u06CC\u0646 \u062C\u0634\u0646 \u062F\u06CC\u06AF\u0627\u0646 / \u062F\u06CC\u062F\u0627\u0631 \u0637\u0644\u0648\u0639 \u062E\u0648\u0631\u0634\u06CC\u062F \u062F\u0631 \u062A\u0642\u0648\u06CC\u0645 \u0622\u0641\u062A\u0627\u0628\u06CC \u0686\u0627\u0631\u062A\u0627\u0642\u06CC \u0646\u06CC\u0627\u0633\u0631" },
  { holiday: false, month: 10, day: 5, type: "Ancient Iran", title: "\u0628\u0627\u0632\u0627\u0631\u062C\u0634\u0646" },
  { holiday: false, month: 10, day: 8, type: "Ancient Iran", title: "\u062F\u06CC\u200C\u0628\u0647\u200C\u0622\u0630\u0631\u0631\u0648\u0632\u060C \u062F\u0648\u0645\u06CC\u0646 \u062C\u0634\u0646 \u062F\u06CC\u06AF\u0627\u0646" },
  { holiday: false, month: 10, day: 14, type: "Ancient Iran", title: "\u0633\u06CC\u0631\u0633\u0648\u0631\u060C \u062C\u0634\u0646 \u06AF\u06CC\u0627\u0647\u200C\u062E\u0648\u0627\u0631\u06CC" },
  { holiday: false, month: 10, day: 15, type: "Ancient Iran", title: "\u062C\u0634\u0646 \u067E\u06CC\u06A9\u0631\u062A\u0631\u0627\u0634\u06CC / \u062F\u06CC\u200C\u0628\u0647\u200C\u0645\u0647\u0631\u0631\u0648\u0632\u060C \u0633\u0648\u0645\u06CC\u0646 \u062C\u0634\u0646 \u062F\u06CC\u06AF\u0627\u0646" },
  { holiday: false, month: 10, day: 16, type: "Ancient Iran", title: "\u062C\u0634\u0646 \u062F\u0631\u0627\u0645\u0632\u06CC\u0646\u0627\u0646\u060C \u062C\u0634\u0646 \u062F\u0631\u0641\u0634\u200C\u0647\u0627" },
  { holiday: false, month: 10, day: 23, type: "Ancient Iran", title: "\u062F\u06CC\u200C\u0628\u0647\u200C\u062F\u06CC\u0646\u200C\u0631\u0648\u0632\u060C \u0686\u0647\u0627\u0631\u0645\u06CC\u0646 \u062C\u0634\u0646 \u062F\u06CC\u06AF\u0627\u0646" },
  { holiday: false, month: 11, day: 1, type: "Ancient Iran", title: "\u0632\u0627\u062F\u0631\u0648\u0632 \u0641\u0631\u062F\u0648\u0633\u06CC" },
  { holiday: false, month: 11, day: 2, type: "Ancient Iran", title: "\u0628\u0647\u0645\u0646\u200C\u0631\u0648\u0632\u060C \u062C\u0634\u0646 \u0628\u0647\u0645\u0646\u06AF\u0627\u0646" },
  { holiday: false, month: 11, day: 4, type: "Ancient Iran", title: "\u0634\u0647\u0631\u06CC\u0648\u0631\u0631\u0648\u0632\u060C \u0622\u063A\u0627\u0632 \u067E\u0627\u062F\u0634\u0627\u0647\u06CC \u062F\u0627\u0631\u0627\u0628 (\u06A9\u0648\u0631\u0648\u0634)" },
  { holiday: false, month: 11, day: 5, type: "Ancient Iran", title: "\u062C\u0634\u0646 \u0646\u0648\u0633\u064E\u0631\u0647" },
  { holiday: false, month: 11, day: 10, type: "Ancient Iran", title: "\u0622\u0628\u0627\u0646\u200C\u0631\u0648\u0632\u060C \u062C\u0634\u0646 \u0633\u064E\u062F\u064E\u0647\u060C \u0622\u062A\u0634\u200C\u0627\u0641\u0631\u0648\u0632\u06CC \u0628\u0631 \u0628\u0627\u0645\u200C\u0647\u0627 / \u0646\u0645\u0627\u06CC\u0634\u200C\u0628\u0627\u0632\u06CC \u0647\u0645\u06AF\u0627\u0646\u06CC" },
  { holiday: false, month: 11, day: 15, type: "Ancient Iran", title: "\u062C\u0634\u0646 \u0645\u06CC\u0627\u0646\u0647\u0654 \u0632\u0645\u0633\u062A\u0627\u0646" },
  { holiday: false, month: 11, day: 22, type: "Ancient Iran", title: "\u0628\u0627\u062F\u0631\u0648\u0632\u060C \u062C\u0634\u0646 \u0628\u0627\u062F\u0631\u0648\u0632\u06CC" },
  { holiday: false, month: 12, day: 1, type: "Ancient Iran", title: "\u062C\u0634\u0646 \u0627\u0633\u0641\u0646\u062F\u06CC / \u062C\u0634\u0646 \u0622\u0628\u0633\u0627\u0644\u0627\u0646\u060C \u0628\u0647\u0627\u0631\u062C\u0634\u0646 / \u0646\u0645\u0627\u06CC\u0634\u200C\u0628\u0627\u0632\u06CC \u0647\u0645\u06AF\u0627\u0646\u06CC" },
  { holiday: false, month: 12, day: 5, type: "Ancient Iran", title: "\u0627\u0633\u0641\u0646\u062F\u0631\u0648\u0632\u060C \u062C\u0634\u0646 \u0627\u0633\u0641\u0646\u062F\u06AF\u0627\u0646\u060C \u06AF\u0631\u0627\u0645\u06CC\u062F\u0627\u0634\u062A \u0632\u0645\u06CC\u0646 \u0648 \u0628\u0627\u0646\u0648\u0627\u0646 / \u062C\u0634\u0646 \u0628\u0631\u0632\u06AF\u0631\u0627\u0646" },
  { holiday: false, month: 12, day: 10, type: "Ancient Iran", title: "\u062C\u0634\u0646 \u0648\u062E\u0634\u0646\u06A9\u0627\u0645" },
  { holiday: false, month: 12, day: 19, type: "Ancient Iran", title: "\u062C\u0634\u0646 \u0646\u0648\u0631\u0648\u0632 \u0631\u0648\u062F\u0647\u0627" },
  { holiday: false, month: 12, day: 20, type: "Ancient Iran", title: "\u062C\u0634\u0646 \u06AF\u0644\u062F\u0627\u0646" },
  { holiday: false, month: 12, day: 25, type: "Ancient Iran", title: "\u0647\u0632\u0627\u0631\u0647\u0654 \u0634\u0627\u0647\u0646\u0627\u0645\u0647\u060C \u0647\u0632\u0627\u0631\u0645\u06CC\u0646 \u0633\u0627\u0644\u06AF\u0631\u062F \u067E\u0627\u06CC\u0627\u0646 \u0633\u0631\u0627\u06CC\u0634 \u0634\u0627\u0647\u0646\u0627\u0645\u0647\u0654 \u0641\u0631\u062F\u0648\u0633\u06CC" },
  { holiday: false, month: 12, day: 26, type: "Ancient Iran", title: "\u0641\u0631\u0648\u0631\u062F\u06AF\u0627\u0646" },
  { holiday: false, month: 12, day: 29, type: "Ancient Iran", title: "\u06AF\u0627\u0647\u0646\u0628\u0627\u0631 \u0647\u064E\u0645\u064E\u0633\u067E\u064E\u062A\u0645\u064E\u062F\u064E\u0645\u060C \u062C\u0634\u0646 \u067E\u0627\u06CC\u0627\u0646 \u0632\u0645\u0633\u062A\u0627\u0646 (\u062F\u0631 \u0622\u062E\u0631\u06CC\u0646 \u0631\u0648\u0632 \u0633\u0627\u0644) / \u062C\u0634\u0646 \u0627\u0648\u0634\u06CC\u062F\u0631 (\u0646\u062C\u0627\u062A\u200C\u0628\u062E\u0634 \u0627\u06CC\u0631\u0627\u0646\u06CC) \u062F\u0631 \u062F\u0631\u06CC\u0627\u0686\u0647\u0654 \u0647\u0627\u0645\u0648\u0646 \u0648 \u06A9\u0648\u0647 \u062E\u0648\u0627\u062C\u0647 / \u0622\u062A\u0634\u200C\u0627\u0641\u0631\u0648\u0632\u06CC \u0628\u0631 \u0628\u0627\u0645\u200C\u0647\u0627 \u062F\u0631 \u0627\u0633\u062A\u0642\u0628\u0627\u0644 \u0627\u0632 \u0646\u0648\u0631\u0648\u0632" },
  { holiday: false, month: 1, day: 6, type: "Ancient Iran", title: "\u0631\u0648\u0632 \u062A\u0648\u0644\u062F \u0632\u0631\u062A\u0634\u062A" },
  { holiday: false, month: 10, day: 5, type: "Ancient Iran", title: "\u0631\u0648\u0632 \u062F\u0631\u06AF\u0630\u0634\u062A \u0632\u0631\u062A\u0634\u062A" }
];
var HijriCalendarHolidays = [
  { holiday: false, month: 1, day: 1, type: "Islamic Iran", title: "\u0622\u063A\u0627\u0632 \u0633\u0627\u0644 \u0647\u062C\u0631\u06CC \u0642\u0645\u0631\u06CC" },
  { holiday: true, month: 1, day: 9, type: "Islamic Iran", title: "\u062A\u0627\u0633\u0648\u0639\u0627\u06CC \u062D\u0633\u06CC\u0646\u06CC" },
  { holiday: true, month: 1, day: 10, type: "Islamic Iran", title: "\u0639\u0627\u0634\u0648\u0631\u0627\u06CC \u062D\u0633\u06CC\u0646\u06CC" },
  { holiday: false, month: 1, day: 11, type: "Islamic Iran", title: "\u0631\u0648\u0632 \u062A\u062C\u0644\u06CC\u0644 \u0627\u0632 \u0627\u0633\u0631\u0627 \u0648 \u0645\u0641\u0642\u0648\u062F\u0627\u0646" },
  { holiday: false, month: 1, day: 12, type: "Islamic Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u0632\u06CC\u0646\u200C\u0627\u0644\u0639\u0627\u0628\u062F\u06CC\u0646 (\u0639) (\u06F9\u06F5 \u0647\u200D.\u0642)" },
  { holiday: false, month: 1, day: 25, type: "Islamic Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u0632\u06CC\u0646\u200C\u0627\u0644\u0639\u0627\u0628\u062F\u06CC\u0646 (\u0639) (\u06F9\u06F5 \u0647\u200D.\u0642) \u0628\u0647 \u0631\u0648\u0627\u06CC\u062A\u06CC" },
  { holiday: false, month: 2, day: 7, type: "Islamic Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u062D\u0633\u0646 \u0645\u062C\u062A\u0628\u06CC (\u0639) (\u06F5\u06F0 \u0647\u200D.\u0642) (\u0628\u0647 \u0631\u0648\u0627\u06CC\u062A\u06CC)" },
  { holiday: false, month: 2, day: 7, type: "Islamic Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u0633\u0644\u0645\u0627\u0646 \u0641\u0627\u0631\u0633\u06CC" },
  { holiday: true, month: 2, day: 20, type: "Islamic Iran", title: "\u0627\u0631\u0628\u0639\u06CC\u0646 \u062D\u0633\u06CC\u0646\u06CC" },
  { holiday: false, month: 2, day: 27, type: "Islamic Iran", title: "\u0631\u0648\u0632 \u0648\u0642\u0641" },
  { holiday: true, month: 2, day: 28, type: "Islamic Iran", title: "\u0631\u062D\u0644\u062A \u062D\u0636\u0631\u062A \u0631\u0633\u0648\u0644 \u0627\u06A9\u0631\u0645 (\u0635) (\u06F1\u06F1 \u0647\u200D.\u0642) \u2013 \u0634\u0647\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u062D\u0633\u0646 \u0645\u062C\u062A\u0628\u06CC (\u0639) (\u06F5\u06F0 \u0647\u200D.\u0642)" },
  { holiday: true, month: 2, day: 30, type: "Islamic Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u0631\u0636\u0627 (\u0639) (\u06F2\u06F0\u06F3 \u0647\u200D.\u0642)" },
  { holiday: false, month: 3, day: 1, type: "Islamic Iran", title: "\u0647\u062C\u0631\u062A \u0631\u0633\u0648\u0644 \u0627\u06A9\u0631\u0645 (\u0635) \u0627\u0632 \u0645\u06A9\u0647 \u0628\u0647 \u0645\u062F\u06CC\u0646\u0647" },
  { holiday: true, month: 3, day: 8, type: "Islamic Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u062D\u0633\u0646 \u0639\u0633\u06A9\u0631\u06CC (\u0639) (\u06F2\u06F6\u06F0 \u0647\u200D.\u0642) \u0648 \u0622\u063A\u0627\u0632 \u0627\u0645\u0627\u0645\u062A \u062D\u0636\u0631\u062A \u0648\u0644\u06CC \u0639\u0635\u0631 (\u0639\u062C)" },
  { holiday: false, month: 3, day: 12, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u062D\u0636\u0631\u062A \u0631\u0633\u0648\u0644 \u0627\u06A9\u0631\u0645 (\u0635) \u0628\u0647 \u0631\u0648\u0627\u06CC\u062A \u0627\u0647\u0644 \u0633\u0646\u062A (\u06F5\u06F3 \u0633\u0627\u0644 \u0642\u0628\u0644 \u0627\u0632 \u0647\u062C\u0631\u062A) - \u0622\u063A\u0627\u0632 \u0647\u0641\u062A\u0647\u0654 \u0648\u062D\u062F\u062A" },
  { holiday: true, month: 3, day: 17, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u062D\u0636\u0631\u062A \u0631\u0633\u0648\u0644 \u0627\u06A9\u0631\u0645 (\u0635) (\u06F5\u06F3 \u0633\u0627\u0644 \u0642\u0628\u0644 \u0627\u0632 \u0647\u062C\u0631\u062A) \u0648 \u0631\u0648\u0632 \u0627\u062E\u0644\u0627\u0642 \u0648 \u0645\u0647\u0631\u0648\u0631\u0632\u06CC" },
  { holiday: true, month: 3, day: 17, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u062C\u0639\u0641\u0631 \u0635\u0627\u062F\u0642 (\u0639) \u0645\u0624\u0633\u0633 \u0645\u0630\u0647\u0628 \u062C\u0639\u0641\u0631\u06CC (\u06F8\u06F3 \u0647\u200D.\u0642)" },
  { holiday: false, month: 4, day: 8, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u062D\u0633\u0646 \u0639\u0633\u06AF\u0631\u06CC (\u0639) (\u06F2\u06F3\u06F2 \u0647\u200D.\u0642)" },
  { holiday: false, month: 4, day: 10, type: "Islamic Iran", title: "\u0648\u0641\u0627\u062A \u062D\u0636\u0631\u062A \u0645\u0639\u0635\u0648\u0645\u0647 (\u0633) (\u06F2\u06F0\u06F1 \u0647\u200D.\u0642)" },
  { holiday: false, month: 5, day: 5, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u062D\u0636\u0631\u062A \u0632\u06CC\u0646\u0628 (\u0633) (\u06F5 \u0647\u200D.\u0642) \u0648 \u0631\u0648\u0632 \u067E\u0631\u0633\u062A\u0627\u0631" },
  { holiday: false, month: 5, day: 13, type: "Islamic Iran", title: "\u0634\u0647\u0627\u062F\u062A \u062D\u0636\u0631\u062A \u0641\u0627\u0637\u0645\u0647\u0654 \u0632\u0647\u0631\u0627 (\u0633) (\u06F1\u06F1 \u0647\u200D.\u0642) \u0628\u0647 \u0631\u0648\u0627\u06CC\u062A\u06CC" },
  { holiday: true, month: 6, day: 3, type: "Islamic Iran", title: "\u0634\u0647\u0627\u062F\u062A \u062D\u0636\u0631\u062A \u0641\u0627\u0637\u0645\u0647\u0654 \u0632\u0647\u0631\u0627 (\u0633) (\u06F1\u06F1 \u0647\u200D.\u0642)" },
  { holiday: false, month: 6, day: 13, type: "Islamic Iran", title: "\u0633\u0627\u0644\u0631\u0648\u0632 \u0648\u0641\u0627\u062A \u062D\u0636\u0631\u062A \u0627\u0645\u200C\u0627\u0644\u0628\u0646\u06CC\u0646 (\u0633) - \u0631\u0648\u0632 \u062A\u06A9\u0631\u06CC\u0645 \u0645\u0627\u062F\u0631\u0627\u0646 \u0648 \u0647\u0645\u0633\u0631\u0627\u0646 \u0634\u0647\u062F\u0627" },
  { holiday: false, month: 6, day: 20, type: "Islamic Iran", title: "\u0631\u0648\u0632 \u0632\u0646 \u0648 \u0645\u0627\u062F\u0631 \u0648 \u0648\u0644\u0627\u062F\u062A \u062D\u0636\u0631\u062A \u0641\u0627\u0637\u0645\u0647\u0654 \u0632\u0647\u0631\u0627 (\u0633) (\u0633\u0627\u0644 \u0647\u0634\u062A\u0645 \u0642\u0628\u0644 \u0627\u0632 \u0647\u062C\u0631\u062A)" },
  { holiday: false, month: 6, day: 20, type: "Islamic Iran", title: "\u062A\u0648\u0644\u062F \u0627\u0645\u0627\u0645 \u062E\u0645\u06CC\u0646\u06CC (\u0631\u0647) \u0631\u0647\u0628\u0631 \u06A9\u0628\u06CC\u0631 \u0627\u0646\u0642\u0644\u0627\u0628 \u0627\u0633\u0644\u0627\u0645\u06CC (\u06F1\u06F3\u06F2\u06F0 \u0647\u200D.\u0642)" },
  { holiday: false, month: 7, day: 1, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u0645\u062D\u0645\u062F \u0628\u0627\u0642\u0631 (\u0639) (\u06F5\u06F7 \u0647\u200D.\u0642)" },
  { holiday: false, month: 7, day: 3, type: "Islamic Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u0639\u0644\u06CC \u0627\u0644\u0646\u0642\u06CC \u0627\u0644\u0647\u0627\u062F\u06CC (\u0639) (\u06F2\u06F5\u06F4 \u0647\u200D.\u0642)" },
  { holiday: false, month: 7, day: 10, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u0645\u062D\u0645\u062F \u062A\u0642\u06CC (\u0639) (\u06F1\u06F9\u06F5 \u0647\u200D.\u0642)" },
  { holiday: true, month: 7, day: 13, type: "Islamic Iran", title: "\u0631\u0648\u0632 \u067E\u062F\u0631 \u0648 \u0645\u0631\u062F \u0648 \u0648\u0644\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u0639\u0644\u06CC (\u0639) (\u06F2\u06F3 \u0633\u0627\u0644 \u0642\u0628\u0644 \u0627\u0632 \u0647\u062C\u0631\u062A) \u2013 \u0622\u063A\u0627\u0632 \u0627\u06CC\u0627\u0645\u200C\u0627\u0644\u0628\u06CC\u0636 (\u0627\u0639\u062A\u06A9\u0627\u0641)" },
  { holiday: false, month: 7, day: 15, type: "Islamic Iran", title: "\u0648\u0641\u0627\u062A \u062D\u0636\u0631\u062A \u0632\u06CC\u0646\u0628 (\u0633) (\u06F6\u06F2 \u0647\u200D.\u0642)" },
  { holiday: false, month: 7, day: 15, type: "Islamic Iran", title: "\u062A\u063A\u06CC\u06CC\u0631 \u0642\u0628\u0644\u0647\u0654 \u0645\u0633\u0644\u0645\u06CC\u0646 \u0627\u0632 \u0628\u06CC\u062A\u200C\u0627\u0644\u0645\u0642\u062F\u0633 \u0628\u0647 \u0645\u06A9\u0647\u0654 \u0645\u0639\u0638\u0645\u0647 (\u06F2 \u0647\u200D.\u0642)" },
  { holiday: false, month: 7, day: 25, type: "Islamic Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u0645\u0648\u0633\u06CC \u06A9\u0627\u0638\u0645 (\u0639) (\u06F1\u06F8\u06F3 \u0647\u200D.\u0642)" },
  { holiday: true, month: 7, day: 27, type: "Islamic Iran", title: "\u0645\u0628\u0639\u062B \u062D\u0636\u0631\u062A \u0631\u0633\u0648\u0644 \u0627\u06A9\u0631\u0645 (\u0635) (\u06F1\u06F3 \u0633\u0627\u0644 \u0642\u0628\u0644 \u0627\u0632 \u0647\u062C\u0631\u062A)" },
  { holiday: false, month: 8, day: 3, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u062D\u0633\u06CC\u0646 (\u0639) (\u06F4 \u0647\u200D.\u0642) \u0648 \u0631\u0648\u0632 \u067E\u0627\u0633\u062F\u0627\u0631" },
  { holiday: false, month: 8, day: 4, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u062D\u0636\u0631\u062A \u0627\u0628\u0648\u0627\u0644\u0641\u0636\u0644 \u0627\u0644\u0639\u0628\u0627\u0633 (\u0639) (\u06F2\u06F6 \u0647\u200D.\u0642) \u0648 \u0631\u0648\u0632 \u062C\u0627\u0646\u0628\u0627\u0632" },
  { holiday: false, month: 8, day: 5, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u0632\u06CC\u0646\u200C\u0627\u0644\u0639\u0627\u0628\u062F\u06CC\u0646 (\u0639) (\u06F3\u06F8 \u0647\u200D.\u0642)" },
  { holiday: false, month: 8, day: 11, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u062D\u0636\u0631\u062A \u0639\u0644\u06CC \u0627\u06A9\u0628\u0631 (\u0639) (\u06F3\u06F3 \u0647\u200D.\u0642) \u0648 \u0631\u0648\u0632 \u062C\u0648\u0627\u0646" },
  { holiday: true, month: 8, day: 15, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u062D\u0636\u0631\u062A \u0642\u0627\u0626\u0645 (\u0639\u062C) (\u06F2\u06F5\u06F5 \u0647\u200D.\u0642) \u0648 \u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0645\u0633\u062A\u0636\u0639\u0641\u0627\u0646" },
  { holiday: false, month: 9, day: 10, type: "Islamic Iran", title: "\u0648\u0641\u0627\u062A \u062D\u0636\u0631\u062A \u062E\u062F\u06CC\u062C\u0647 (\u0633) (\u06F3 \u0633\u0627\u0644 \u0642\u0628\u0644 \u0627\u0632 \u0647\u062C\u0631\u062A)" },
  { holiday: false, month: 9, day: 15, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u062D\u0633\u0646 \u0645\u062C\u062A\u0628\u06CC (\u0639) (\u06F3 \u0647\u200D.\u0642) \u0648 \u0631\u0648\u0632 \u0627\u06A9\u0631\u0627\u0645" },
  { holiday: false, month: 9, day: 18, type: "Islamic Iran", title: "\u0634\u0628 \u0642\u062F\u0631" },
  { holiday: false, month: 9, day: 19, type: "Islamic Iran", title: "\u0636\u0631\u0628\u062A \u062E\u0648\u0631\u062F\u0646 \u0627\u0645\u0627\u0645 \u0639\u0644\u06CC (\u0639) (\u06F4\u06F0 \u0647\u200D.\u0642)" },
  { holiday: false, month: 9, day: 20, type: "Islamic Iran", title: "\u0634\u0628 \u0642\u062F\u0631" },
  { holiday: true, month: 9, day: 21, type: "Islamic Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u0639\u0644\u06CC (\u0639) (\u06F4\u06F0 \u0647\u200D.\u0642)" },
  { holiday: false, month: 9, day: 22, type: "Islamic Iran", title: "\u0634\u0628 \u0642\u062F\u0631" },
  { holiday: true, month: 10, day: 1, type: "Islamic Iran", title: "\u0639\u06CC\u062F \u0633\u0639\u06CC\u062F \u0641\u0637\u0631" },
  { holiday: true, month: 10, day: 2, type: "Islamic Iran", title: "\u062A\u0639\u0637\u06CC\u0644 \u0628\u0647 \u0645\u0646\u0627\u0633\u0628\u062A \u0639\u06CC\u062F \u0633\u0639\u06CC\u062F \u0641\u0637\u0631" },
  { holiday: false, month: 10, day: 17, type: "Islamic Iran", title: "\u0631\u0648\u0632 \u0641\u0631\u0647\u0646\u06AF \u067E\u0647\u0644\u0648\u0627\u0646\u06CC \u0648 \u0648\u0631\u0632\u0634 \u0632\u0648\u0631\u062E\u0627\u0646\u0647\u200C\u0627\u06CC" },
  { holiday: true, month: 10, day: 25, type: "Islamic Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u062C\u0639\u0641\u0631 \u0635\u0627\u062F\u0642 (\u0639) (\u06F1\u06F4\u06F8 \u0647\u200D.\u0642)" },
  { holiday: false, month: 11, day: 1, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u062D\u0636\u0631\u062A \u0645\u0639\u0635\u0648\u0645\u0647 (\u0633) (\u06F1\u06F7\u06F3 \u0647\u200D.\u0642) \u0648 \u0631\u0648\u0632 \u062F\u062E\u062A\u0631" },
  { holiday: false, month: 11, day: 5, type: "Islamic Iran", title: "\u0631\u0648\u0632 \u062A\u062C\u0644\u06CC\u0644 \u0627\u0632 \u0627\u0645\u0627\u0645\u200C\u0632\u0627\u062F\u06AF\u0627\u0646 \u0648 \u0628\u0642\u0627\u0639 \u0645\u062A\u0628\u0631\u06A9\u0647" },
  { holiday: false, month: 11, day: 6, type: "Islamic Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u062D\u0636\u0631\u062A \u0627\u062D\u0645\u062F\u0628\u0646\u200C\u0645\u0648\u0633\u06CC \u0634\u0627\u0647\u0686\u0631\u0627\u063A (\u0639)" },
  { holiday: false, month: 11, day: 11, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u0631\u0636\u0627 (\u0639) (\u06F1\u06F4\u06F8 \u0647\u200D.\u0642)" },
  { holiday: false, month: 11, day: 30, type: "Islamic Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u0645\u062D\u0645\u062F \u062A\u0642\u06CC (\u0639) (\u06F2\u06F2\u06F0 \u0647\u200D.\u0642)" },
  { holiday: false, month: 12, day: 1, type: "Islamic Iran", title: "\u0633\u0627\u0644\u0631\u0648\u0632 \u0627\u0632\u062F\u0648\u0627\u062C \u0627\u0645\u0627\u0645 \u0639\u0644\u06CC (\u0639) \u0648 \u062D\u0636\u0631\u062A \u0641\u0627\u0637\u0645\u0647 (\u0633) (\u06F2 \u0647\u200D.\u0642) \u2013 \u0631\u0648\u0632 \u0627\u0632\u062F\u0648\u0627\u062C" },
  { holiday: false, month: 12, day: 6, type: "Islamic Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0632\u0627\u0626\u0631\u0627\u0646 \u062E\u0627\u0646\u0647\u0654 \u062E\u062F\u0627 \u0628\u0647 \u062F\u0633\u062A \u0645\u0623\u0645\u0648\u0631\u0627\u0646 \u0622\u0644 \u0633\u0639\u0648\u062F (\u06F1\u06F3\u06F6\u06F6 \u0647\u200D.\u0634 \u0628\u0631\u0627\u0628\u0631 \u0628\u0627 \u06F6 \u0630\u06CC\u200C\u0627\u0644\u062D\u062C\u0647 \u06F1\u06F4\u06F0\u06F7 \u0647\u200D.\u0642)" },
  { holiday: false, month: 12, day: 7, type: "Islamic Iran", title: "\u0634\u0647\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u0645\u062D\u0645\u062F \u0628\u0627\u0642\u0631 (\u0639) (\u06F1\u06F1\u06F4 \u0647\u200D.\u0642)" },
  { holiday: false, month: 12, day: 9, type: "Islamic Iran", title: "\u0631\u0648\u0632 \u0639\u0631\u0641\u0647 (\u0631\u0648\u0632 \u0646\u06CC\u0627\u06CC\u0634)" },
  { holiday: true, month: 12, day: 10, type: "Islamic Iran", title: "\u0639\u06CC\u062F \u0633\u0639\u06CC\u062F \u0642\u0631\u0628\u0627\u0646 (\u0639\u06CC\u062F \u0627\u0644\u0627\u0636\u062D\u06CC)" },
  { holiday: false, month: 12, day: 15, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u0639\u0644\u06CC \u0627\u0644\u0646\u0642\u06CC \u0627\u0644\u0647\u0627\u062F\u06CC (\u0639) (\u06F2\u06F1\u06F2 \u0647\u200D.\u0642)" },
  { holiday: true, month: 12, day: 18, type: "Islamic Iran", title: "\u0639\u06CC\u062F \u0633\u0639\u06CC\u062F \u063A\u062F\u06CC\u0631 \u062E\u0645 (\u06F1\u06F0 \u0647\u200D.\u0642)" },
  { holiday: false, month: 12, day: 20, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u0645\u0648\u0633\u06CC \u06A9\u0627\u0638\u0645 (\u0639) (\u06F1\u06F2\u06F8 \u0647\u200D.\u0642)" },
  { holiday: false, month: 12, day: 24, type: "Islamic Iran", title: "\u0631\u0648\u0632 \u0645\u0628\u0627\u0647\u0644\u0647\u0654 \u067E\u06CC\u0627\u0645\u0628\u0631 \u0627\u0633\u0644\u0627\u0645 (\u0635) (\u06F1\u06F0 \u0647\u200D.\u0642)" },
  { holiday: false, month: 12, day: 25, type: "Islamic Iran", title: "\u0631\u0648\u0632 \u062E\u0627\u0646\u0648\u0627\u062F\u0647 \u0648 \u062A\u06A9\u0631\u06CC\u0645 \u0628\u0627\u0632\u0646\u0634\u0633\u062A\u06AF\u0627\u0646" },
  { holiday: false, month: 2, day: 3, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u0627\u0645\u0627\u0645 \u0645\u062D\u0645\u062F \u0628\u0627\u0642\u0631 (\u0639) (\u06F5\u06F7 \uFEEB.\u0642) \u0628\u0647 \u0631\u0648\u0627\u06CC\u062A\u06CC" },
  { holiday: false, month: 3, day: 12, type: "Islamic Iran", title: "\u0622\u063A\u0627\u0632 \u0648\u0627\u062C\u0628 \u0634\u062F\u0646 \u0646\u0645\u0627\u0632\u060C \u0648\u0631\u0648\u062F \u067E\u06CC\u0627\u0645\u0628\u0631 \u0628\u0647 \u0645\u062F\u06CC\u0646\u0647" },
  { holiday: false, month: 3, day: 15, type: "Islamic Iran", title: "\u0628\u0646\u0627\u06CC \u0645\u0633\u062C\u062F \u0642\u0628\u0627 (\u0627\u0648\u0644\u06CC\u0646 \u0645\u0633\u062C\u062F \u062F\u0631 \u0627\u0633\u0644\u0627\u0645)" },
  { holiday: false, month: 3, day: 16, type: "Islamic Iran", title: "\u0648\u0631\u0648\u062F \u0627\u0647\u0644 \u0628\u06CC\u062A \u0627\u0645\u0627\u0645 \u062D\u0633\u06CC\u0646 (\u0639) \u0628\u0647 \u0634\u0627\u0645" },
  { holiday: false, month: 3, day: 17, type: "Islamic Iran", title: "\u0628\u0646\u0627\u06CC \u0645\u0633\u062C\u062F\u0627\u0644\u0646\u0628\u06CC \u062F\u0631 \u0645\u062F\u06CC\u0646\u0647" },
  { holiday: false, month: 3, day: 23, type: "Islamic Iran", title: "\u0648\u0631\u0648\u062F \u062D\u0636\u0631\u062A \u0645\u0639\u0635\u0648\u0645\u0647 (\u0633) \u0628\u0647 \u0642\u0645" },
  { holiday: false, month: 3, day: 26, type: "Islamic Iran", title: "\u0635\u0644\u062D \u0627\u0645\u0627\u0645 \u062D\u0633\u0646 (\u0639)" },
  { holiday: false, month: 4, day: 3, type: "Islamic Iran", title: "\u0633\u0641\u0631 \u0627\u0645\u0627\u0645 \u062D\u0633\u0646 (\u0639) \u0628\u0647 \u062C\u0631\u062C\u0627\u0646" },
  { holiday: false, month: 4, day: 4, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u0634\u0627\u0647 \u0639\u0628\u062F\u0627\u0644\u0639\u0638\u06CC\u0645 \u062D\u0633\u0646\u06CC (\u0639)" },
  { holiday: false, month: 4, day: 8, type: "Islamic Iran", title: "\u0634\u0647\u0627\u062F\u062A \u062D\u0636\u0631\u062A \u0641\u0627\u0637\u0645\u0647\u0654 \u0632\u0647\u0631\u0627 (\u0633) (\u06F1\u06F1 \uFEEB.\u0642) \u0628\u0647 \u0631\u0648\u0627\u06CC\u062A\u06CC" },
  { holiday: false, month: 5, day: 10, type: "Islamic Iran", title: "\u0648\u0642\u0648\u0639 \u062C\u0646\u06AF \u062C\u0645\u0644 \u0628\u06CC\u0646 \u0633\u067E\u0627\u0647\u06CC\u0627\u0646 \u0627\u0645\u0627\u0645 \u0639\u0644\u06CC (\u0639) \u0648 \u0646\u0627\u06A9\u062B\u06CC\u0646" },
  { holiday: false, month: 5, day: 27, type: "Islamic Iran", title: "\u0648\u0641\u0627\u062A \u062D\u0636\u0631\u062A \u0639\u0628\u062F\u0627\u0644\u0645\u0637\u0644\u0628 (\u0639)" },
  { holiday: false, month: 6, day: 12, type: "Islamic Iran", title: "\u062D\u0631\u06A9\u062A \u067E\u06CC\u0627\u0645\u0628\u0631 \u0628\u0647 \u0633\u0645\u062A \u062E\u06CC\u0628\u0631" },
  { holiday: false, month: 6, day: 19, type: "Islamic Iran", title: "\u0627\u0632\u062F\u0648\u0627\u062C \u062D\u0636\u0631\u062A \u0639\u0628\u062F\u0627\u0644\u0644\u0651\u0647 (\u0639) \u0648 \u0622\u0645\u0646\u0647 (\u0633)" },
  { holiday: false, month: 6, day: 21, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u062D\u0636\u0631\u062A \u0627\u0645\u200C\u06A9\u0644\u062B\u0648\u0645 (\u0633)" },
  { holiday: false, month: 7, day: 9, type: "Islamic Iran", title: "\u0648\u0644\u0627\u062F\u062A \u062D\u0636\u0631\u062A \u0639\u0644\u06CC \u0627\u0635\u063A\u0631 (\u0639)" },
  { holiday: false, month: 7, day: 16, type: "Islamic Iran", title: "\u062E\u0631\u0648\u062C \u0641\u0627\u0637\u0645\u0647 \u0628\u0646\u062A \u0627\u0633\u062F \u0627\u0632 \u06A9\u0639\u0628\u0647" },
  { holiday: false, month: 7, day: 23, type: "Islamic Iran", title: "\u0645\u062C\u0631\u0648\u062D \u0634\u062F\u0646 \u0627\u0645\u0627\u0645 \u062D\u0633\u0646 \u0645\u062C\u062A\u0628\u06CC (\u0639) \u062F\u0631 \u0633\u0627\u0628\u0627\u0637 \u0645\u062F\u0627\u0626\u0646" },
  { holiday: false, month: 7, day: 23, type: "Islamic Iran", title: "\u0645\u0633\u0645\u0648\u0645 \u0634\u062F\u0646 \u0627\u0645\u0627\u0645 \u0645\u0648\u0633\u06CC \u06A9\u0627\u0638\u0645 (\u0639) \u0628\u0647 \u062F\u0633\u062A\u0648\u0631 \u0645\u0623\u0645\u0648\u0646" },
  { holiday: false, month: 7, day: 24, type: "Islamic Iran", title: "\u0641\u062A\u062D \u0642\u0644\u0639\u0647\u0654 \u062E\u06CC\u0628\u0631 \u062A\u0648\u0633\u0637 \u0627\u0645\u0627\u0645 \u0639\u0644\u06CC (\u0639)\u060C \u0628\u0627\u0632\u06AF\u0634\u062A \u062C\u0639\u0641\u0631 \u0628\u0646 \u0627\u0628\u06CC\u200C\u0637\u0627\u0644\u0628 \u0627\u0632 \u062D\u0628\u0634\u0647" },
  { holiday: false, month: 7, day: 26, type: "Islamic Iran", title: "\u0648\u0641\u0627\u062A \u062D\u0636\u0631\u062A \u0627\u0628\u0648\u0637\u0627\u0644\u0628 (\u0639)" },
  { holiday: false, month: 7, day: 28, type: "Islamic Iran", title: "\u062D\u0631\u06A9\u062A \u0627\u0645\u0627\u0645 \u062D\u0633\u06CC\u0646 (\u0639) \u0627\u0632 \u0645\u062F\u06CC\u0646\u0647 \u0628\u0647 \u0645\u06A9\u0647" },
  { holiday: false, month: 7, day: 30, type: "Islamic Iran", title: "\u0647\u062C\u0631\u062A \u0645\u0633\u0644\u0645\u0627\u0646\u0627\u0646 \u0628\u0647 \u062D\u0628\u0634\u0647\u060C \u063A\u0632\u0648\u0647\u0654 \u0646\u062E\u0644\u0647" },
  { holiday: false, month: 8, day: 15, type: "Islamic Iran", title: "\u0631\u0648\u0632 \u0633\u0631\u0628\u0627\u0632\u0627\u0646 \u06AF\u0645\u0646\u0627\u0645 \u0627\u0645\u0627\u0645 \u0632\u0645\u0627\u0646 (\u0639\u062C)" },
  { holiday: false, month: 10, day: 21, type: "Islamic Iran", title: "\u0641\u062A\u062D \u0627\u0646\u062F\u0644\u0633 \u0628\u0647 \u062F\u0633\u062A \u0645\u0633\u0644\u0645\u0627\u0646\u0627\u0646 (\u06F9\u06F2 \u0647\u200D.\u0642)" },
  { holiday: false, month: 11, day: 5, type: "Islamic Iran", title: "\u0631\u0648\u0632 \u0628\u0632\u0631\u06AF\u062F\u0627\u0634\u062A \u062D\u0636\u0631\u062A \u0635\u0627\u0644\u062D \u0628\u0646 \u0645\u0648\u0633\u06CC \u06A9\u0627\u0638\u0645 (\u0639)" }
];
var GregorianCalendarHolidays = [
  { holiday: false, month: 1, day: 1, type: "Global", title: "\u0622\u063A\u0627\u0632 \u0633\u0627\u0644 \u0645\u06CC\u0644\u0627\u062F\u06CC" },
  { holiday: false, month: 1, day: 2, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u06AF\u0645\u0631\u06A9" },
  { holiday: false, month: 2, day: 4, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0633\u0631\u0637\u0627\u0646" },
  { holiday: false, month: 2, day: 6, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0645\u0628\u0627\u0631\u0632\u0647 \u0628\u0627 \u0646\u0627\u0642\u0635\u200C\u0633\u0627\u0632\u06CC \u0632\u0646\u0627\u0646" },
  { holiday: false, month: 2, day: 20, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0639\u062F\u0627\u0644\u062A \u0627\u062C\u062A\u0645\u0627\u0639\u06CC" },
  { holiday: false, month: 2, day: 21, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0632\u0628\u0627\u0646 \u0645\u0627\u062F\u0631\u06CC" },
  { holiday: false, month: 3, day: 8, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0632\u0646\u0627\u0646" },
  { holiday: false, month: 3, day: 22, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0622\u0628" },
  { holiday: false, month: 3, day: 23, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0647\u0648\u0627\u0634\u0646\u0627\u0633\u06CC" },
  { holiday: false, month: 3, day: 24, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0633\u0644" },
  { holiday: false, month: 4, day: 7, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0633\u0644\u0627\u0645\u062A" },
  { holiday: false, month: 4, day: 22, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0632\u0645\u06CC\u0646 \u067E\u0627\u06A9" },
  { holiday: false, month: 4, day: 23, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u06A9\u062A\u0627\u0628 \u0648 \u062D\u0642 \u0645\u0624\u0644\u0641" },
  { holiday: false, month: 4, day: 25, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0645\u0627\u0644\u0627\u0631\u06CC\u0627" },
  { holiday: false, month: 4, day: 27, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u06AF\u0631\u0627\u0641\u06CC\u06A9" },
  { holiday: false, month: 5, day: 1, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u06A9\u0627\u0631\u06AF\u0631" },
  { holiday: false, month: 5, day: 3, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0622\u0632\u0627\u062F\u06CC \u0645\u0637\u0628\u0648\u0639\u0627\u062A" },
  { holiday: false, month: 5, day: 5, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0645\u0627\u0645\u0627" },
  { holiday: false, month: 5, day: 8, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0635\u0644\u06CC\u0628 \u0633\u0631\u062E \u0648 \u0647\u0644\u0627\u0644 \u0627\u062D\u0645\u0631" },
  { holiday: false, month: 5, day: 15, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u062E\u0627\u0646\u0648\u0627\u062F\u0647" },
  { holiday: false, month: 5, day: 17, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0627\u0631\u062A\u0628\u0627\u0637\u0627\u062A \u0648 \u0631\u0648\u0627\u0628\u0637 \u0639\u0645\u0648\u0645\u06CC" },
  { holiday: false, month: 5, day: 18, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0645\u0648\u0632\u0647 \u0648 \u0645\u06CC\u0631\u0627\u062B \u0641\u0631\u0647\u0646\u06AF\u06CC" },
  { holiday: false, month: 5, day: 29, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u062D\u0627\u0641\u0638\u0627\u0646 \u0635\u0644\u062D \u0645\u0644\u0644 \u0645\u062A\u062D\u062F" },
  { holiday: false, month: 5, day: 31, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0628\u062F\u0648\u0646 \u062F\u062E\u0627\u0646\u06CC\u0627\u062A" },
  { holiday: false, month: 6, day: 1, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0648\u0627\u0644\u062F\u06CC\u0646" },
  { holiday: false, month: 6, day: 5, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0645\u062D\u06CC\u0637 \u0632\u06CC\u0633\u062A" },
  { holiday: false, month: 6, day: 10, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0635\u0646\u0627\u06CC\u0639 \u062F\u0633\u062A\u06CC" },
  { holiday: false, month: 6, day: 12, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0645\u0646\u0639 \u06A9\u0627\u0631 \u06A9\u0648\u062F\u06A9\u0627\u0646" },
  { holiday: false, month: 6, day: 14, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0627\u0647\u062F\u0627 \u062E\u0648\u0646" },
  { holiday: false, month: 6, day: 14, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0645\u0627\u062F\u0631" },
  { holiday: false, month: 6, day: 17, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0628\u06CC\u0627\u0628\u0627\u0646\u200C\u0632\u062F\u0627\u06CC\u06CC" },
  { holiday: false, month: 6, day: 20, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u067E\u0646\u0627\u0647\u0646\u062F\u06AF\u0627\u0646" },
  { holiday: false, month: 6, day: 26, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0645\u0628\u0627\u0631\u0632\u0647 \u0628\u0627 \u0645\u0648\u0627\u062F \u0645\u062E\u062F\u0631" },
  { holiday: false, month: 6, day: 26, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0642\u0631\u0628\u0627\u0646\u06CC\u0627\u0646 \u062E\u0634\u0648\u0646\u062A" },
  { holiday: false, month: 6, day: 26, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u062C\u0645\u0639\u06CC\u062A" },
  { holiday: false, month: 8, day: 1, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0634\u06CC\u0631 \u0645\u0627\u062F\u0631" },
  { holiday: false, month: 8, day: 6, type: "Global", title: "\u0627\u0646\u0641\u062C\u0627\u0631 \u0628\u0645\u0628 \u0627\u062A\u0645\u06CC \u0622\u0645\u0631\u06CC\u06A9\u0627 \u062F\u0631 \u0647\u06CC\u0631\u0648\u0634\u06CC\u0645\u0627 \u0628\u0627 \u0628\u06CC\u0634 \u0627\u0632 \u06F1\u06F6\u06F0 \u0647\u0632\u0627\u0631 \u06A9\u0634\u062A\u0647 \u0648 \u0645\u062C\u0631\u0648\u062D (\u06F1\u06F9\u06F4\u06F5 \u0645\u06CC\u0644\u0627\u062F\u06CC)" },
  { holiday: false, month: 8, day: 12, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u062C\u0648\u0627\u0646\u0627\u0646" },
  { holiday: false, month: 8, day: 13, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0686\u067E \u062F\u0633\u062A\u0627\u0646" },
  { holiday: false, month: 8, day: 19, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0627\u0646\u0633\u0627\u0646 \u062F\u0648\u0633\u062A\u06CC" },
  { holiday: false, month: 8, day: 19, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0639\u06A9\u0627\u0633\u06CC" },
  { holiday: false, month: 8, day: 21, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0645\u0633\u062C\u062F" },
  { holiday: false, month: 9, day: 1, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0635\u0644\u062D" },
  { holiday: false, month: 9, day: 8, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0628\u0627 \u0633\u0648\u0627\u062F\u06CC" },
  { holiday: false, month: 9, day: 10, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u062C\u0644\u0648\u06AF\u06CC\u0631\u06CC \u0627\u0632 \u062E\u0648\u062F\u06A9\u0634\u06CC" },
  { holiday: false, month: 9, day: 21, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0628\u0627\u0633\u0648\u0627\u062F\u06CC \u0648 \u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0622\u0644\u0632\u0627\u06CC\u0645\u0631" },
  { holiday: false, month: 9, day: 27, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u062C\u0647\u0627\u0646\u06AF\u0631\u062F\u06CC" },
  { holiday: false, month: 9, day: 30, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0646\u0627\u0634\u0646\u0648\u0627\u06CC\u0627\u0646" },
  { holiday: false, month: 9, day: 30, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u062F\u0631\u06CC\u0627\u0646\u0648\u0631\u062F\u06CC" },
  { holiday: false, month: 10, day: 1, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0633\u0627\u0644\u0645\u0646\u062F\u0627\u0646" },
  { holiday: false, month: 10, day: 5, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u062C\u0644\u0648\u06AF\u06CC\u0631\u06CC \u0627\u0632 \u062E\u0648\u062F\u06A9\u0634\u06CC" },
  { holiday: false, month: 10, day: 8, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u06A9\u0648\u062F\u06A9" },
  { holiday: false, month: 10, day: 9, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u067E\u0633\u062A" },
  { holiday: false, month: 10, day: 14, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0627\u0633\u062A\u0627\u0646\u062F\u0627\u0631\u062F" },
  { holiday: false, month: 10, day: 15, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0646\u0627\u0628\u06CC\u0646\u0627\u06CC\u0627\u0646 (\u0639\u0635\u0627\u06CC \u0633\u0641\u06CC\u062F)" },
  { holiday: false, month: 10, day: 16, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u063A\u0630\u0627" },
  { holiday: false, month: 10, day: 24, type: "Global", title: "\u0631\u0648\u0632 \u0645\u0644\u0644 \u0645\u062A\u062D\u062F \u0648 \u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u062A\u0648\u0633\u0639\u0647 \u0627\u0637\u0644\u0627\u0639\u0627\u062A" },
  { holiday: false, month: 10, day: 27, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0645\u06CC\u0631\u0627\u062B \u0633\u0645\u0639\u06CC \u0648 \u0628\u0635\u0631\u06CC" },
  { holiday: false, month: 10, day: 31, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0634\u0647\u0631\u0647\u0627" },
  { holiday: false, month: 10, day: 31, type: "Global", title: "\u062C\u0634\u0646 \u0647\u0627\u0644\u0648\u0648\u06CC\u0646" },
  { holiday: false, month: 11, day: 6, type: "Global", title: "\u0631\u0648\u0632 \u0628\u06CC\u0646\u200C\u0627\u0644\u0645\u0644\u0644\u06CC \u067E\u06CC\u0634\u06AF\u06CC\u0631\u06CC \u0627\u0632 \u0633\u0648\u0621 \u0627\u0633\u062A\u0641\u0627\u062F\u0647 \u0627\u0632 \u0645\u062D\u06CC\u0637 \u0632\u06CC\u0633\u062A \u062F\u0631 \u062C\u0646\u06AF \u0648 \u0645\u0646\u0627\u0642\u0634\u0627\u062A \u0645\u0633\u0644\u062D\u0627\u0646\u0647" },
  { holiday: false, month: 11, day: 10, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0639\u0644\u0645 \u062F\u0631 \u062E\u062F\u0645\u062A \u0635\u0644\u062D \u0648 \u062A\u0648\u0633\u0639\u0647" },
  { holiday: false, month: 11, day: 14, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u062F\u06CC\u0627\u0628\u062A" },
  { holiday: false, month: 11, day: 21, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u062A\u0644\u0648\u06CC\u0632\u06CC\u0648\u0646" },
  { holiday: false, month: 11, day: 25, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0645\u0628\u0627\u0631\u0632\u0647 \u0628\u0627 \u062E\u0634\u0648\u0646\u062A \u0639\u0644\u06CC\u0647 \u0632\u0646\u0627\u0646" },
  { holiday: false, month: 11, day: 29, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0647\u0645\u0628\u0633\u062A\u06AF\u06CC \u0628\u0627 \u0645\u0631\u062F\u0645 \u0641\u0644\u0633\u0637\u06CC\u0646" },
  { holiday: false, month: 12, day: 1, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0645\u0628\u0627\u0631\u0632\u0647 \u0628\u0627 \u0627\u06CC\u062F\u0632" },
  { holiday: false, month: 12, day: 2, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0644\u063A\u0648 \u0628\u0631\u062F\u0647\u200C\u062F\u0627\u0631\u06CC" },
  { holiday: false, month: 12, day: 3, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0645\u0639\u0644\u0648\u0644\u06CC\u0646" },
  { holiday: false, month: 12, day: 7, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0647\u0648\u0627\u067E\u06CC\u0645\u0627\u06CC\u06CC" },
  { holiday: false, month: 12, day: 10, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u062D\u0642\u0648\u0642 \u0628\u0634\u0631" },
  { holiday: false, month: 12, day: 11, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u06A9\u0648\u0647\u0633\u062A\u0627\u0646" },
  { holiday: false, month: 12, day: 18, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0639\u0627\u0631\u06CC \u0627\u0632 \u062E\u0634\u0648\u0646\u062A \u0648 \u0627\u0641\u0631\u0627\u0637\u06CC\u200C\u06AF\u0631\u06CC" },
  { holiday: false, month: 12, day: 18, type: "Global", title: "\u0631\u0648\u0632 \u062C\u0647\u0627\u0646\u06CC \u0645\u0647\u0627\u062C\u0631\u0627\u0646" },
  { holiday: false, month: 12, day: 25, type: "Global", title: "\u0648\u0644\u0627\u062F\u062A \u062D\u0636\u0631\u062A \u0639\u06CC\u0633\u06CC \u0645\u0633\u06CC\u062D (\u0639)" }
];

// src/hijri.ts
var iranianHijriAdjustments = {
  1445: { 1: 30, 2: 29, 3: 30, 4: 29, 5: 30, 6: 29, 7: 30, 8: 29, 9: 30, 10: 29, 11: 30, 12: 29 },
  1446: { 1: 30, 2: 30, 3: 30, 4: 29, 5: 30, 6: 30, 7: 29, 8: 30, 9: 29, 10: 30, 11: 29, 12: 29 },
  1447: { 1: 30, 2: 29, 3: 30, 4: 30, 5: 30, 6: 29, 7: 30, 8: 29, 9: 30, 10: 29, 11: 30, 12: 29 }
  // Add more years and month lengths as needed
};
var basePersianDate = { jy: 1402, jm: 4, jd: 28 };
var baseHijriDate = { hy: 1445, hm: 1, hd: 1 };

// src/view.ts
var PersianCalendarView = class extends import_obsidian.View {
  constructor(leaf, app, settings, plugin) {
    super(leaf);
    this.lastCheckedDate = (0, import_moment_jalaali.default)().startOf("day");
    this.noteDays = [];
    this.holidayData = {
      PersianCalendar: PersianCalendarHolidays,
      HijriCalendar: HijriCalendarHolidays,
      GregorianCalendar: GregorianCalendarHolidays
    };
    this.app = app;
    this.settings = settings;
    this.currentJalaaliYear = 0;
    this.currentJalaaliMonth = 0;
    this.loadCurrentMonth();
    const todayJalaali = (0, import_jalaali_js2.toJalaali)(new Date());
    this.currentJalaaliYear = todayJalaali.jy;
    this.currentJalaaliMonth = todayJalaali.jm;
    this.startDailyCheckInterval();
    this.noteDays = [];
    this.plugin = plugin;
  }
  async initializeHolidayData() {
    console.log("Holiday data initialized:", this.holidayData);
  }
  getViewType() {
    return "persian-calendar";
  }
  getDisplayText() {
    return "Persian Calendar";
  }
  async onOpen() {
    this.initializeHolidayData().then(() => {
      this.render();
      this.startDailyCheckInterval();
    });
  }
  async onClose() {
    this.stopDailyCheckInterval();
  }
  getIcon() {
    return "calendar";
  }
  focus() {
    const inputEl = this.containerEl.querySelector("input");
    inputEl == null ? void 0 : inputEl.focus();
  }
  async render() {
    const containerEl = this.containerEl;
    containerEl.empty();
    await this.renderHeader(containerEl);
    const contentEl = containerEl.createEl("div", { cls: "calendar-content" });
    await this.renderWeekNumbers(contentEl, this.getCurrentJalaaliDate());
    await this.renderDaysGrid(contentEl, this.getCurrentJalaaliDate());
    if (this.settings.enableQuarterlyNotes) {
      await this.renderQuarterlyNotesRow(contentEl);
    }
  }
  async renderHeader(containerEl) {
    const headerEl = containerEl.createEl("div", { cls: "calendar-header" });
    const navContainerEl = headerEl.createEl("div", { cls: "calendar-navigation" });
    const prevMonthArrow = navContainerEl.createEl("span", { cls: "calendar-change-month-arrow" });
    prevMonthArrow.textContent = "<";
    prevMonthArrow.addEventListener("click", () => this.changeMonth(1));
    const todayButton = navContainerEl.createEl("span", { cls: "calendar-today-button" });
    todayButton.textContent = "\u0627\u0645\u0631\u0648\u0632";
    todayButton.addEventListener("click", () => this.goToToday());
    const nextMonthArrow = navContainerEl.createEl("span", { cls: "calendar-change-month-arrow" });
    nextMonthArrow.textContent = ">";
    nextMonthArrow.addEventListener("click", () => this.changeMonth(-1));
    const monthYearEl = headerEl.createEl("div", { cls: "calendar-month-year" });
    const monthEl = monthYearEl.createEl("span", { cls: "calendar-month" });
    const yearEl = monthYearEl.createEl("span", { cls: "calendar-year" });
    const georgianMonthYearEl = monthYearEl.createEl("div", { cls: "calendar-georgian-month-year" });
    const hijriMonthYearEl = monthYearEl.createEl("div", { cls: "calendar-hijri-month-year" });
    const monthName = this.getMonthName(this.currentJalaaliMonth);
    monthEl.textContent = monthName;
    yearEl.textContent = this.toFarsiDigits(this.currentJalaaliYear);
    if (this.settings.showGeorgianDates) {
      const georgianMonthRange = this.getGeorgianMonthRange(this.currentJalaaliYear, this.currentJalaaliMonth);
      georgianMonthYearEl.textContent = georgianMonthRange;
    }
    if (this.settings.showHijriDates) {
      const hijriMonthRange = this.getHijriMonthRange(this.currentJalaaliYear, this.currentJalaaliMonth);
      hijriMonthYearEl.textContent = hijriMonthRange;
    }
    monthEl.addEventListener("click", (e) => {
      e.stopPropagation();
      this.openOrCreateMonthlyNote(this.currentJalaaliMonth, this.currentJalaaliYear);
    });
    yearEl.addEventListener("click", (e) => {
      e.stopPropagation();
      this.openOrCreateYearlyNote(this.currentJalaaliYear);
    });
  }
  getGeorgianMonthRange(jy, jm) {
    const firstDayOfMonthGeorgian = jalaali.toGregorian(jy, jm, 1);
    const lastDayOfMonthJalaali = jalaali.jalaaliMonthLength(jy, jm);
    const lastDayOfMonthGeorgian = jalaali.toGregorian(jy, jm, lastDayOfMonthJalaali);
    const startMonthName = this.getGeorgianMonthName(firstDayOfMonthGeorgian.gm);
    const endMonthName = this.getGeorgianMonthName(lastDayOfMonthGeorgian.gm);
    if (firstDayOfMonthGeorgian.gm === lastDayOfMonthGeorgian.gm) {
      return `${startMonthName} ${firstDayOfMonthGeorgian.gy}`;
    } else {
      return `${startMonthName}-${endMonthName} ${lastDayOfMonthGeorgian.gy}`;
    }
  }
  getHijriMonthRange(jy, jm) {
    const firstDayOfMonthGeorgian = jalaali.toGregorian(jy, jm, 1);
    const lastDayOfMonthJalaali = jalaali.jalaaliMonthLength(jy, jm);
    const lastDayOfMonthGeorgian = jalaali.toGregorian(jy, jm, lastDayOfMonthJalaali);
    const startHijriDate = (0, import_moment_hijri.default)(`${firstDayOfMonthGeorgian.gy}-${firstDayOfMonthGeorgian.gm}-${firstDayOfMonthGeorgian.gd}`, "YYYY-M-D");
    const endHijriDate = (0, import_moment_hijri.default)(`${lastDayOfMonthGeorgian.gy}-${lastDayOfMonthGeorgian.gm}-${lastDayOfMonthGeorgian.gd}`, "YYYY-M-D");
    const startHijriMonth = this.getHijriMonthName(startHijriDate.iMonth() + 1);
    const startHijriYear = this.toFarsiDigits(startHijriDate.iYear());
    const endHijriMonth = this.getHijriMonthName(endHijriDate.iMonth() + 1);
    const endHijriYear = this.toFarsiDigits(endHijriDate.iYear());
    if (startHijriDate.iMonth() === endHijriDate.iMonth()) {
      return `${startHijriMonth} ${startHijriYear}`;
    } else {
      return `${startHijriMonth}-${endHijriMonth} ${endHijriYear}`;
    }
  }
  getGeorgianMonthName(month) {
    const georgianMonthNames = [
      "Jan",
      "Feb",
      "Mar",
      "Apr",
      "May",
      "Jun",
      "Jul",
      "Aug",
      "Sep",
      "Oct",
      "Nov",
      "Dec"
    ];
    return georgianMonthNames[month - 1];
  }
  getHijriMonthName(month) {
    const hijriMonthNames = [
      "\u0645\u062D\u0631\u0645",
      "\u0635\u0641\u0631",
      "\u0631\u0628\u064A\u0639\u06F1",
      "\u0631\u0628\u064A\u0639\u06F2",
      "\u062C\u0645\u0627\u06F1",
      "\u062C\u0645\u0627\u06F2",
      "\u0631\u062C\u0628",
      "\u0634\u0639\u0628\u0627\u0646",
      "\u0631\u0645\u0636\u0627\u0646",
      "\u0634\u0648\u0627\u0644",
      "\u0630\u0648.\u0642",
      "\u0630\u0648.\u062D"
    ];
    return hijriMonthNames[month - 1];
  }
  async renderWeekNumbers(contentEl, jalaaliDate) {
    let weekNumbersEl = contentEl.querySelector(".calendar-week-numbers");
    if (weekNumbersEl) {
      weekNumbersEl.remove();
    }
    weekNumbersEl = contentEl.createEl("div", { cls: "calendar-week-numbers" });
    const weekHeader = weekNumbersEl.createEl("div", { cls: "calendar-week-header" });
    weekHeader.textContent = "\u0647";
    const weekNumbers = this.getWeekNumbersForMonth(jalaaliDate);
    const weeksWithNotes = await this.getWeeksWithNotes(jalaaliDate.jy);
    for (let i = 0; i < 6; i++) {
      const weekEl = weekNumbersEl.createEl("div", { cls: "calendar-week-number" });
      if (i < weekNumbers.length) {
        weekEl.textContent = this.toFarsiDigits(weekNumbers[i]);
        if (!weeksWithNotes.includes(weekNumbers[i])) {
          weekEl.addClass("no-notes");
        }
        weekEl.addEventListener("click", async () => {
          await this.openOrCreateWeeklyNote(weekNumbers[i], jalaaliDate.jy);
        });
      } else {
        weekEl.textContent = "";
      }
    }
  }
  async renderDaysGrid(contentEl, jalaaliDate) {
    let gridEl = contentEl.querySelector(".calendar-days-grid");
    if (gridEl) {
      gridEl.remove();
    }
    gridEl = contentEl.createEl("div", { cls: "calendar-days-grid" });
    const weekdays = ["\u0634", "\u06CC", "\u062F", "\u0633", "\u0686", "\u067E", "\u062C"];
    weekdays.forEach((weekday, index) => {
      if (!gridEl) {
        new import_obsidian.Notice("Calendar grid element not found. Please ensure the calendar is properly loaded.");
        return;
      }
      const headerCell = gridEl.createEl("div", { cls: "calendar-weekday-header" });
      headerCell.textContent = weekday;
      headerCell.classList.add("dynamic-grid-placement");
      headerCell.style.setProperty("--dynamic-grid-start", (index + 2).toString());
    });
    const daysWithNotes = await this.getDaysWithNotes();
    const daysInMonth = jalaali.jalaaliMonthLength(jalaaliDate.jy, jalaaliDate.jm);
    const firstDayOfWeekIndex = this.calculateFirstDayOfWeekIndex(jalaaliDate.jy, jalaaliDate.jm);
    const totalCells = 42;
    const daysFromPrevMonth = this.calculateDaysFromPreviousMonth(firstDayOfWeekIndex);
    const daysFromNextMonth = this.calculateDaysFromNextMonth(firstDayOfWeekIndex, daysInMonth);
    for (let i = 0; i < totalCells; i++) {
      const dayEl = gridEl.createEl("div", { cls: "calendar-day" });
      const dayIndex = i - firstDayOfWeekIndex;
      let dayNumber = dayIndex + 1;
      let isHoliday = false;
      let isWeekend = false;
      if (dayIndex < 0) {
        dayNumber = daysFromPrevMonth[daysFromPrevMonth.length + dayIndex];
        dayEl.createEl("div", { cls: "persian-date" }).textContent = this.toFarsiDigits(dayNumber);
        dayEl.addClass("dim");
      } else if (dayIndex < daysInMonth) {
        const persianDateEl = dayEl.createEl("div", { cls: "persian-date" });
        persianDateEl.textContent = this.toFarsiDigits(dayNumber);
        if (this.isToday({ jy: jalaaliDate.jy, jm: jalaaliDate.jm, jd: dayNumber })) {
          dayEl.addClass("today");
        }
        if (!daysWithNotes.includes(dayNumber)) {
          dayEl.addClass("no-notes");
        }
        dayEl.addEventListener("click", () => {
          this.openOrCreateDailyNote(dayNumber);
        });
        const persianDate = { jy: jalaaliDate.jy, jm: jalaaliDate.jm, jd: dayNumber };
        const ummalquraAdjustment = this.plugin.settings.hijriDateAdjustment;
        const hijriDateResult = this.getHijriDate(persianDate, this.plugin.settings.hijriCalendarType, ummalquraAdjustment);
        const hijriDate = hijriDateResult.hd.toString();
        const hijriMonth = hijriDateResult.hm;
        if (this.plugin.settings.showHolidays && this.isHoliday("PersianCalendar", jalaaliDate.jm, dayNumber)) {
          isHoliday = true;
        }
        if (this.plugin.settings.showHolidays && this.isHoliday("HijriCalendar", hijriMonth, parseInt(hijriDate))) {
          isHoliday = true;
        }
        dayEl.addEventListener("mouseenter", (e) => {
          const events = this.getEventsForDate(jalaaliDate.jy, jalaaliDate.jm, dayNumber);
          if (events.length > 0) {
            this.showTooltip(e, dayEl, events);
          }
        });
        dayEl.addEventListener("mouseleave", () => {
          this.hideTooltip();
        });
        dayEl.addEventListener("touchstart", (e) => {
          const events = this.getEventsForDate(jalaaliDate.jy, jalaaliDate.jm, dayNumber);
          if (events.length > 0) {
            this.showTooltip(e, dayEl, events);
          }
        });
        dayEl.addEventListener("touchend", () => {
          this.hideTooltip();
        });
      } else {
        dayNumber = daysFromNextMonth[dayIndex - daysInMonth];
        dayEl.createEl("div", { cls: "persian-date" }).textContent = this.toFarsiDigits(dayNumber);
        dayEl.addClass("dim");
      }
      if (dayIndex >= 0 && dayIndex < daysInMonth) {
        const showBothCalendars = this.plugin.settings.showGeorgianDates && this.plugin.settings.showHijriDates;
        if (this.plugin.settings.showGeorgianDates) {
          const georgianDate = jalaali.toGregorian(jalaaliDate.jy, jalaaliDate.jm, dayNumber);
          const georgianDateEl = dayEl.createEl("div", { cls: showBothCalendars ? "georgian-date-corner" : "georgian-date" });
          const persianDate = { jy: jalaaliDate.jy, jm: jalaaliDate.jm, jd: dayNumber };
          const ummalquraAdjustment = this.plugin.settings.hijriDateAdjustment;
          const hijriDateResult = this.getHijriDate(persianDate, this.plugin.settings.hijriCalendarType, ummalquraAdjustment);
          const hijriDate = hijriDateResult.hd.toString();
          const hijriMonth = hijriDateResult.hm;
          georgianDateEl.textContent = georgianDate.gd.toString();
          if (this.plugin.settings.showHolidays && this.isHoliday("GregorianCalendar", georgianDate.gm, georgianDate.gd)) {
            isHoliday = true;
          }
          if (this.isToday({ jy: jalaaliDate.jy, jm: jalaaliDate.jm, jd: dayNumber })) {
            dayEl.addClass("today");
          }
          if (this.plugin.settings.showHolidays && this.isHoliday("HijriCalendar", hijriMonth, parseInt(hijriDate))) {
            isHoliday = true;
          }
        }
        if (this.plugin.settings.showHijriDates) {
          const persianDate = { jy: jalaaliDate.jy, jm: jalaaliDate.jm, jd: dayNumber };
          const ummalquraAdjustment = this.plugin.settings.hijriDateAdjustment;
          const hijriDateResult = this.getHijriDate(persianDate, this.plugin.settings.hijriCalendarType, ummalquraAdjustment);
          const hijriDate = hijriDateResult.hd.toString();
          const hijriMonth = hijriDateResult.hm;
          const hijriDateEl = dayEl.createEl("div", { cls: showBothCalendars ? "hijri-date-corner" : "hijri-date" });
          hijriDateEl.textContent = this.toFarsiDigits(hijriDate);
          if (this.plugin.settings.showHolidays && this.isHoliday("HijriCalendar", hijriMonth, parseInt(hijriDate))) {
            isHoliday = true;
          }
          if (this.isToday({ jy: jalaaliDate.jy, jm: jalaaliDate.jm, jd: dayNumber })) {
            dayEl.addClass("today");
          }
        }
        const dayOfWeek = (firstDayOfWeekIndex + dayIndex) % 7;
        if (this.plugin.settings.weekendDays === "thursday-friday" && (dayOfWeek === 5 || dayOfWeek === 6) || this.plugin.settings.weekendDays === "friday" && dayOfWeek === 6 || this.plugin.settings.weekendDays === "friday-saturday" && (dayOfWeek === 6 || dayOfWeek === 0)) {
          isWeekend = true;
        }
        if (isHoliday || isWeekend) {
          dayEl.addClass("holiday");
          dayEl.querySelectorAll(".persian-date, .georgian-date, .hijri-date").forEach((el) => {
            el.classList.add("holiday");
          });
        }
      }
      dayEl.classList.add("dynamic-day-grid-placement");
      dayEl.style.setProperty("--day-grid-start", (i % 7 + 2).toString());
    }
  }
  // Helper function to check if a date is a holiday
  isHoliday(calendarType, month, day) {
    if (!this.holidayData[calendarType]) {
      return false;
    }
    return this.holidayData[calendarType].some((holiday) => {
      return holiday.month === month && holiday.day === day && holiday.holiday;
    });
  }
  async renderQuarterlyNotesRow(containerEl) {
    const quartersRow = containerEl.createDiv({ cls: "calendar-quarters-row" });
    const { quarter: currentQuarter, jy } = this.getCurrentQuarter();
    const seasons = ["\u0628\u0647\u0627\u0631", "\u062A\u0627\u0628\u0633\u062A\u0627\u0646", "\u067E\u0627\u06CC\u06CC\u0632", "\u0632\u0645\u0633\u062A\u0627\u0646"];
    seasons.forEach((season, index) => {
      const quarterDiv = quartersRow.createDiv({
        cls: `calendar-quarter${index + 1 === currentQuarter ? " current-quarter" : ""}`
      });
      quarterDiv.textContent = season;
      quarterDiv.addEventListener("click", () => {
        const quarterNumber = index + 1;
        this.openOrCreateQuarterlyNote(quarterNumber, jy);
      });
    });
  }
  startDailyCheckInterval() {
    this.dailyCheckInterval = setInterval(() => {
      const today = (0, import_moment_jalaali.default)().startOf("day");
      if (!this.lastCheckedDate.isSame(today, "day")) {
        this.lastCheckedDate = today;
        this.render();
      }
    }, 60 * 1e3);
  }
  stopDailyCheckInterval() {
    if (this.dailyCheckInterval !== void 0) {
      clearInterval(this.dailyCheckInterval);
      this.dailyCheckInterval = void 0;
    }
  }
  isToday(jalaaliDate) {
    const today = (0, import_moment_jalaali.default)().locale("fa");
    return today.isSame((0, import_moment_jalaali.default)(`${jalaaliDate.jy}/${jalaaliDate.jm}/${jalaaliDate.jd}`, "jYYYY/jM/jD"), "day");
  }
  async getDaysWithNotes() {
    const notesLocation = this.settings.dailyNotesFolderPath.trim().replace(/^\/*|\/*$/g, "");
    const filePrefix = notesLocation ? `${notesLocation}/` : "";
    const jy = this.currentJalaaliYear;
    const jm = this.currentJalaaliMonth.toString().padStart(2, "0");
    const files = this.app.vault.getFiles();
    const noteDays = [];
    files.forEach((file) => {
      if (!file.path.startsWith(filePrefix) || file.extension !== "md") {
        return;
      }
      const match = file.name.match(/^(\d{4})-(\d{2})-(\d{2})\.md$/);
      if (!match)
        return;
      const [, year, month, day] = match.map(Number);
      if (this.settings.dateFormat === "georgian") {
        const { jy: convJy, jm: convJm, jd: convJd } = (0, import_jalaali_js2.toJalaali)(new Date(year, month - 1, day));
        if (convJy === jy && convJm === parseInt(jm)) {
          noteDays.push(convJd);
        }
      } else {
        if (year === jy && month === parseInt(jm)) {
          noteDays.push(day);
        }
      }
    });
    return noteDays;
  }
  async getWeeksWithNotes(jy) {
    const notesLocation = this.settings.weeklyNotesFolderPath.trim().replace(/^\/*|\/*$/g, "");
    const filePrefix = notesLocation ? `${notesLocation}/` : "";
    const files = this.app.vault.getFiles();
    const weekNumbers = files.filter((file) => {
      const expectedStart = `${filePrefix}${jy}-W`;
      return file.path.startsWith(expectedStart) && file.extension === "md";
    }).map((file) => {
      const match = file.name.match(/W(\d+)/);
      return match ? parseInt(match[1], 10) : null;
    }).filter((weekNumber) => weekNumber !== null);
    return weekNumbers;
  }
  toFarsiDigits(num) {
    const farsiDigits = ["\u06F0", "\u06F1", "\u06F2", "\u06F3", "\u06F4", "\u06F5", "\u06F6", "\u06F7", "\u06F8", "\u06F9"];
    return num.toString().replace(/\d/g, (digit) => farsiDigits[parseInt(digit, 10)]);
  }
  calculateFirstDayOfWeekIndex(jy, jm) {
    const { gy, gm, gd } = (0, import_jalaali_js2.toGregorian)(jy, jm, 1);
    const firstDayDate = new Date(gy, gm - 1, gd);
    const dayOfWeek = firstDayDate.getDay();
    const adjustedDayOfWeek = dayOfWeek === 6 ? 0 : dayOfWeek + 1;
    return adjustedDayOfWeek;
  }
  changeMonth(offset) {
    let newMonth = this.currentJalaaliMonth + offset;
    let newYear = this.currentJalaaliYear;
    if (newMonth > 12) {
      newMonth = 1;
      newYear++;
    } else if (newMonth < 1) {
      newMonth = 12;
      newYear--;
    }
    this.currentJalaaliMonth = newMonth;
    this.currentJalaaliYear = newYear;
    this.render();
  }
  calculateDaysFromPreviousMonth(firstDayOfWeek) {
    const previousMonth = this.currentJalaaliMonth === 1 ? 12 : this.currentJalaaliMonth - 1;
    const previousYear = this.currentJalaaliMonth === 1 ? this.currentJalaaliYear - 1 : this.currentJalaaliYear;
    const lastDayOfPreviousMonth = (0, import_jalaali_js2.jalaaliMonthLength)(previousYear, previousMonth);
    const daysFromPrevMonth = [];
    const daysToInclude = firstDayOfWeek;
    for (let i = lastDayOfPreviousMonth - daysToInclude + 1; i <= lastDayOfPreviousMonth; i++) {
      daysFromPrevMonth.push(i);
    }
    return daysFromPrevMonth;
  }
  calculateDaysFromNextMonth(firstDayOfWeek, currentMonthLength) {
    const daysFromNextMonth = [];
    const daysToInclude = 6 * 7 - currentMonthLength - firstDayOfWeek;
    for (let i = 1; i <= daysToInclude; i++) {
      daysFromNextMonth.push(i);
    }
    return daysFromNextMonth;
  }
  async loadCurrentMonth() {
    const { jy, jm } = getTodayJalaali();
    this.currentJalaaliYear = jy;
    this.currentJalaaliMonth = jm;
  }
  getCurrentJalaaliDate() {
    const now = new Date();
    const todayJalaali = (0, import_jalaali_js2.toJalaali)(now.getFullYear(), now.getMonth() + 1, now.getDate());
    return {
      jy: this.currentJalaaliYear || todayJalaali.jy,
      jm: this.currentJalaaliMonth || todayJalaali.jm,
      jd: 1
    };
  }
  getWeekNumbersForMonth(jalaaliDate) {
    import_moment_jalaali.default.loadPersian({ usePersianDigits: false, dialect: "persian-modern" });
    const startOfMonth = (0, import_moment_jalaali.default)(`${jalaaliDate.jy}/${jalaaliDate.jm}/1`, "jYYYY/jM/jD");
    const startWeekNumber = startOfMonth.jWeek();
    const weekNumbers = [];
    for (let i = 0; i < 6; i++) {
      let weekNumberForIthWeek = startWeekNumber + i;
      if (weekNumberForIthWeek > 52) {
        weekNumberForIthWeek -= 52;
      }
      weekNumbers.push(weekNumberForIthWeek);
    }
    return weekNumbers;
  }
  calculateCurrentWeekNumber(jalaaliDate) {
    import_moment_jalaali.default.loadPersian({ usePersianDigits: false, dialect: "persian-modern" });
    const currentDate = (0, import_moment_jalaali.default)(`${jalaaliDate.jy}/${jalaaliDate.jm}/${jalaaliDate.jd}`, "jYYYY/jM/jD");
    const currentWeekNumber = currentDate.jWeek();
    return currentWeekNumber;
  }
  async openOrCreateDailyNote(dayNumber) {
    const year = this.currentJalaaliYear;
    const month = this.currentJalaaliMonth;
    let dateString = `${year}-${month.toString().padStart(2, "0")}-${dayNumber.toString().padStart(2, "0")}`;
    if (this.settings.dateFormat === "georgian") {
      const gregorianDate = (0, import_jalaali_js2.toGregorian)(year, month, dayNumber);
      dateString = `${gregorianDate.gy}-${gregorianDate.gm.toString().padStart(2, "0")}-${gregorianDate.gd.toString().padStart(2, "0")}`;
    }
    const notesLocation = this.settings.dailyNotesFolderPath.trim().replace(/^\/*|\/*$/g, "");
    const filePath = `${notesLocation === "" ? "" : notesLocation + "/"}${dateString}.md`;
    try {
      let dailyNoteFile = await this.app.vault.getAbstractFileByPath(filePath);
      if (!dailyNoteFile) {
        await this.app.vault.create(filePath, "");
        dailyNoteFile = await this.app.vault.getAbstractFileByPath(filePath);
      }
      if (dailyNoteFile instanceof import_obsidian.TFile) {
        const openLeaf = this.app.workspace.getLeavesOfType("markdown").find((leaf) => leaf.view instanceof import_obsidian.MarkdownView && leaf.view.file === dailyNoteFile);
        if (openLeaf) {
          this.app.workspace.setActiveLeaf(openLeaf, {});
        } else {
          await this.app.workspace.openLinkText(dailyNoteFile.path, "", false);
        }
      }
    } catch (error) {
      console.error("\u062E\u0637\u0627 \u062F\u0631 \u062D\u06CC\u0646 \u0633\u0627\u062E\u062A \u0631\u0648\u0632\u0646\u0648\u0634\u062A \u0631\u062E \u062F\u0627\u062F: ", error);
    }
  }
  async openOrCreateWeeklyNote(weekNumber, jy) {
    const weekString = `${jy}-W${weekNumber}`;
    const notesLocation = this.settings.weeklyNotesFolderPath.trim().replace(/^\/*|\/*$/g, "");
    const filePath = `${notesLocation === "" ? "" : notesLocation + "/"}${weekString}.md`;
    try {
      let weeklyNoteFile = await this.app.vault.getAbstractFileByPath(filePath);
      if (!weeklyNoteFile) {
        await this.app.vault.create(filePath, "");
        weeklyNoteFile = await this.app.vault.getAbstractFileByPath(filePath);
        this.render();
      }
      if (weeklyNoteFile && weeklyNoteFile instanceof import_obsidian.TFile) {
        const openLeaf = this.app.workspace.getLeavesOfType("markdown").find((leaf) => leaf.view instanceof import_obsidian.MarkdownView && leaf.view.file === weeklyNoteFile);
        if (openLeaf) {
          this.app.workspace.setActiveLeaf(openLeaf);
        } else {
          await this.app.workspace.openLinkText(weeklyNoteFile.path, "", false);
        }
      }
    } catch (error) {
      if (error instanceof Error) {
        new import_obsidian.Notice("\u062E\u0637\u0627 \u062F\u0631 \u062D\u06CC\u0646 \u0633\u0627\u062E\u062A \u06CC\u0627 \u0628\u0627\u0632 \u06A9\u0631\u062F\u0646 \u06CC\u0627\u062F\u062F\u0627\u0634\u062A \u0647\u0641\u062A\u06AF\u06CC");
      } else {
        new import_obsidian.Notice("Error creating/opening weekly note");
      }
    }
  }
  async openOrCreateMonthlyNote(month, jy) {
    const monthString = `${jy}-${month.toString().padStart(2, "0")}`;
    const notesLocation = this.settings.monthlyNotesFolderPath.trim().replace(/^\/*|\/*$/g, "");
    const filePath = `${notesLocation === "" ? "" : notesLocation + "/"}${monthString}.md`;
    try {
      let monthlyNoteFile = await this.app.vault.getAbstractFileByPath(filePath);
      if (!monthlyNoteFile) {
        await this.app.vault.create(filePath, "");
        monthlyNoteFile = await this.app.vault.getAbstractFileByPath(filePath);
      }
      if (monthlyNoteFile && monthlyNoteFile instanceof import_obsidian.TFile) {
        this.openNoteInWorkspace(monthlyNoteFile);
      }
    } catch (error) {
      if (error instanceof Error) {
        new import_obsidian.Notice("Error creating/opening daily note");
      } else {
        new import_obsidian.Notice("an error accured!");
      }
    }
  }
  async openOrCreateQuarterlyNote(quarter, jy) {
    const quarterString = `${jy}-Q${quarter}`;
    const notesLocation = this.settings.quarterlyNotesFolderPath.trim().replace(/^\/*|\/*$/g, "");
    const filePath = `${notesLocation === "" ? "" : notesLocation + "/"}${quarterString}.md`;
    try {
      let quarterlyNoteFile = await this.app.vault.getAbstractFileByPath(filePath);
      if (!quarterlyNoteFile) {
        await this.app.vault.create(filePath, "");
        quarterlyNoteFile = await this.app.vault.getAbstractFileByPath(filePath);
      }
      if (quarterlyNoteFile && quarterlyNoteFile instanceof import_obsidian.TFile) {
        this.openNoteInWorkspace(quarterlyNoteFile);
      }
    } catch (error) {
      if (error instanceof Error) {
        new import_obsidian.Notice(`Error creating/opening quarterly note: ${error.message}`);
      } else {
        new import_obsidian.Notice("An unknown error occurred while handling the quarterly note");
      }
    }
  }
  async openOrCreateYearlyNote(jy) {
    const yearString = `${jy}`;
    const notesLocation = this.settings.yearlyNotesFolderPath.trim().replace(/^\/*|\/*$/g, "");
    const filePath = `${notesLocation === "" ? "" : notesLocation + "/"}${yearString}.md`;
    try {
      let yearlyNoteFile = await this.app.vault.getAbstractFileByPath(filePath);
      if (!yearlyNoteFile) {
        await this.app.vault.create(filePath, "");
        yearlyNoteFile = await this.app.vault.getAbstractFileByPath(filePath);
      }
      if (yearlyNoteFile && yearlyNoteFile instanceof import_obsidian.TFile) {
        this.openNoteInWorkspace(yearlyNoteFile);
      }
    } catch (error) {
      if (error instanceof Error) {
        new import_obsidian.Notice("Error creating/opening yearly note");
      } else {
        new import_obsidian.Notice("An unknown error occurred");
      }
    }
  }
  async openNoteInWorkspace(noteFile) {
    const isOpen = this.app.workspace.getLeavesOfType("markdown").some((leaf) => leaf.view instanceof import_obsidian.MarkdownView && leaf.view.file === noteFile);
    if (isOpen) {
      const leaf = this.app.workspace.getLeavesOfType("markdown").find((leaf2) => leaf2.view instanceof import_obsidian.MarkdownView && leaf2.view.file === noteFile);
      if (leaf) {
        this.app.workspace.setActiveLeaf(leaf);
      }
    } else {
      await this.app.workspace.openLinkText(noteFile.path, "", false);
    }
  }
  scrollToDay(dayNumber) {
    const dayEl = this.containerEl.querySelector(`.calendar-day[data-day="${dayNumber}"]`);
    if (dayEl) {
      dayEl.scrollIntoView();
    }
  }
  async goToToday() {
    const { jy, jm, jd } = getTodayJalaali();
    this.currentJalaaliYear = jy;
    this.currentJalaaliMonth = jm;
    this.render();
    this.scrollToDay(jd);
    this.openOrCreateDailyNote(jd);
  }
  getCurrentQuarter() {
    const month = this.currentJalaaliMonth;
    const year = this.currentJalaaliYear;
    let quarter = 1;
    if (month >= 1 && month <= 3)
      quarter = 1;
    else if (month >= 4 && month <= 6)
      quarter = 2;
    else if (month >= 7 && month <= 9)
      quarter = 3;
    else if (month >= 10 && month <= 12)
      quarter = 4;
    return { quarter, jy: year };
  }
  getMonthName(monthIndex) {
    const monthNames = [
      "\u0641\u0631\u0648\u0631\u062F\u06CC\u0646",
      "\u0627\u0631\u062F\u06CC\u0628\u0647\u0634\u062A",
      "\u062E\u0631\u062F\u0627\u062F",
      "\u062A\u06CC\u0631",
      "\u0645\u0631\u062F\u0627\u062F",
      "\u0634\u0647\u0631\u06CC\u0648\u0631",
      "\u0645\u0647\u0631",
      "\u0622\u0628\u0627\u0646",
      "\u0622\u0630\u0631",
      "\u062F\u06CC",
      "\u0628\u0647\u0645\u0646",
      "\u0627\u0633\u0641\u0646\u062F"
    ];
    return monthNames[monthIndex - 1];
  }
  async refreshCalendarDots(file, isCreation) {
    if (!this.containerEl) {
      console.error("Attempting to refresh dots but containerEl is not set.");
      return;
    }
    await this.render();
  }
  getEventsForDate(jy, jm, jd) {
    const events = [];
    const addEvent = (event) => events.push(event);
    if (this.plugin.settings.showOfficialIranianCalendar || this.plugin.settings.showAncientIranianCalendar) {
      PersianCalendarHolidays.forEach((event) => {
        if (event.month === jm && event.day === jd) {
          if (this.plugin.settings.showOfficialIranianCalendar && event.type === "Iran") {
            addEvent({ title: event.title, isHoliday: event.holiday });
          }
          if (this.plugin.settings.showAncientIranianCalendar && event.type === "Ancient Iran") {
            addEvent({ title: event.title, isHoliday: event.holiday });
          }
        }
      });
    }
    if (this.plugin.settings.showShiaCalendar) {
      const gregorianDate = jalaali.toGregorian(jy, jm, jd);
      const persianDate = { jy, jm, jd };
      const ummalquraAdjustment = this.plugin.settings.hijriDateAdjustment;
      const hijriDateResult = this.getHijriDate(persianDate, this.plugin.settings.hijriCalendarType, ummalquraAdjustment);
      const hijriMomentDate = (0, import_moment_hijri.default)(`${gregorianDate.gy}-${gregorianDate.gm}-${gregorianDate.gd}`, "YYYY-M-D");
      hijriMomentDate.iYear(hijriDateResult.hy);
      hijriMomentDate.iMonth(hijriDateResult.hm - 1);
      hijriMomentDate.iDate(hijriDateResult.hd);
      HijriCalendarHolidays.forEach((event) => {
        if (event.month === hijriMomentDate.iMonth() + 1 && event.day === hijriMomentDate.iDate()) {
          addEvent({ title: event.title, isHoliday: event.holiday });
        }
      });
    }
    if (this.plugin.settings.showOfficialIranianCalendar) {
      const gregorianDate = jalaali.toGregorian(jy, jm, jd);
      GregorianCalendarHolidays.forEach((event) => {
        if (event.month === gregorianDate.gm && event.day === gregorianDate.gd) {
          addEvent({ title: event.title, isHoliday: event.holiday });
        }
      });
    }
    return events;
  }
  showTooltip(e, dayElement, events) {
    let tooltip = document.querySelector(".calendar-tooltip");
    if (!tooltip) {
      tooltip = document.createElement("div");
      tooltip.className = "calendar-tooltip";
      document.body.appendChild(tooltip);
    }
    tooltip.innerHTML = events.map((event) => `<div style="color: ${event.isHoliday ? "var(--text-error)" : "var(--text-normal)"}">${event.title}</div>`).join("");
    tooltip.style.display = "block";
    let x;
    let y;
    if (e instanceof MouseEvent) {
      x = e.pageX;
      y = e.pageY;
    } else if (e instanceof TouchEvent) {
      const touch = e.touches[0];
      x = touch.pageX;
      y = touch.pageY;
    }
    if (x !== void 0 && y !== void 0) {
      tooltip.style.left = `${x - tooltip.offsetWidth - 10}px`;
      tooltip.style.top = `${y + 10}px`;
    }
  }
  hideTooltip() {
    const tooltip = document.querySelector(".calendar-tooltip");
    if (tooltip) {
      tooltip.style.display = "none";
    }
  }
  calculateDayDifference(fromDate, toDate) {
    const fromGregorian = jalaali.toGregorian(fromDate.jy, fromDate.jm, fromDate.jd);
    const toGregorian5 = jalaali.toGregorian(toDate.jy, toDate.jm, toDate.jd);
    const fromDateObj = new Date(fromGregorian.gy, fromGregorian.gm - 1, fromGregorian.gd);
    const toDateObj = new Date(toGregorian5.gy, toGregorian5.gm - 1, toGregorian5.gd);
    const timeDiff = toDateObj.getTime() - fromDateObj.getTime();
    return timeDiff / (1e3 * 3600 * 24);
  }
  calculateIranianHijriDate(baseDate, dayDifference) {
    let { hy, hm, hd } = baseDate;
    while (dayDifference > 0) {
      const monthLength = iranianHijriAdjustments[hy] ? iranianHijriAdjustments[hy][hm] : null;
      if (monthLength) {
        if (hd + dayDifference <= monthLength) {
          hd += dayDifference;
          dayDifference = 0;
        } else {
          dayDifference -= monthLength - hd + 1;
          hd = 1;
          hm += 1;
          if (hm > 12) {
            hm = 1;
            hy += 1;
          }
        }
      } else {
        const gregorianDate = jalaali.toGregorian(baseDate.hy, baseDate.hm, baseDate.hd);
        const gregorianDateStr = `${gregorianDate.gy}-${gregorianDate.gm}-${gregorianDate.gd}`;
        const hijriMomentDate = (0, import_moment_hijri.default)(gregorianDateStr, "YYYY-M-D").add(dayDifference, "days");
        return {
          hy: hijriMomentDate.iYear(),
          hm: hijriMomentDate.iMonth() + 1,
          hd: hijriMomentDate.iDate()
        };
      }
    }
    return { hy, hm, hd };
  }
  getHijriDate(persianDate, calendarType, ummalquraAdjustment) {
    if (calendarType === "ummalqura") {
      const gregorianDate = jalaali.toGregorian(persianDate.jy, persianDate.jm, persianDate.jd);
      const gregorianDateStr = `${gregorianDate.gy}-${gregorianDate.gm}-${gregorianDate.gd}`;
      const hijriMomentDate = (0, import_moment_hijri.default)(gregorianDateStr, "YYYY-M-D").add(ummalquraAdjustment, "days");
      return {
        hy: hijriMomentDate.iYear(),
        hm: hijriMomentDate.iMonth() + 1,
        hd: hijriMomentDate.iDate()
      };
    } else {
      const dayDifference = this.calculateDayDifference(basePersianDate, persianDate);
      return this.calculateIranianHijriDate(baseHijriDate, dayDifference);
    }
  }
};

// src/settings.ts
var DEFAULT_SETTINGS = {
  dailyNotesFolderPath: "/",
  weeklyNotesFolderPath: "/",
  monthlyNotesFolderPath: "/",
  yearlyNotesFolderPath: "/",
  enableQuarterlyNotes: true,
  quarterlyNotesFolderPath: "/",
  dateFormat: "persian",
  version: `0.0.0`,
  timeoutDuration: 1250,
  announceUpdates: true,
  showGeorgianDates: true,
  hijriDateAdjustment: -1,
  showHijriDates: true,
  weekendDays: "friday",
  showHolidays: true,
  showOfficialIranianCalendar: true,
  showAncientIranianCalendar: true,
  showShiaCalendar: true,
  hijriCalendarType: "iran"
};

// src/main.ts
var import_jalaali_js5 = __toESM(require_jalaali_js());
var import_moment_jalaali4 = __toESM(require_moment_jalaali());

// src/suggester.ts
var import_obsidian2 = require("obsidian");
var import_jalaali_js3 = __toESM(require_jalaali_js());
var import_moment_jalaali2 = __toESM(require_moment_jalaali());
var DateSuggester = class extends import_obsidian2.EditorSuggest {
  constructor(plugin) {
    super(plugin.app);
    this.plugin = plugin;
  }
  onTrigger(cursor, editor, file) {
    const line = editor.getLine(cursor.line);
    const atIndex = line.lastIndexOf("@", cursor.ch);
    if (atIndex !== -1 && atIndex < cursor.ch) {
      return {
        start: { line: cursor.line, ch: atIndex },
        end: cursor,
        query: line.substring(atIndex + 1, cursor.ch)
      };
    }
    return null;
  }
  calculateCurrentWeekNumber(jalaaliDate) {
    import_moment_jalaali2.default.loadPersian({ usePersianDigits: false, dialect: "persian-modern" });
    const currentDate = (0, import_moment_jalaali2.default)(`${jalaaliDate.jy}/${jalaaliDate.jm}/${jalaaliDate.jd}`, "jYYYY/jM/jD");
    const currentWeekNumber = currentDate.jWeek();
    return currentWeekNumber;
  }
  getSuggestions(context) {
    const query = context.query.toLowerCase();
    const suggestions = [
      "\u0627\u0645\u0631\u0648\u0632",
      "\u0641\u0631\u062F\u0627",
      "\u062F\u06CC\u0631\u0648\u0632",
      "\u067E\u0631\u06CC\u0631\u0648\u0632",
      "\u067E\u0633\u200C\u0641\u0631\u062F\u0627",
      "\u0634\u0646\u0628\u0647",
      "\u0634\u0646\u0628\u0647 \u0628\u0639\u062F",
      "\u0634\u0646\u0628\u0647 \u0642\u0628\u0644",
      "\u06CC\u06A9\u0634\u0646\u0628\u0647",
      "\u06CC\u06A9\u0634\u0646\u0628\u0647 \u0628\u0639\u062F",
      "\u06CC\u06A9\u0634\u0646\u0628\u0647 \u0642\u0628\u0644",
      "\u062F\u0648\u0634\u0646\u0628\u0647",
      "\u062F\u0648\u0634\u0646\u0628\u0647 \u0628\u0639\u062F",
      "\u062F\u0648\u0634\u0646\u0628\u0647 \u0642\u0628\u0644",
      "\u0633\u0647\u200C\u0634\u0646\u0628\u0647",
      "\u0633\u0647\u200C\u0634\u0646\u0628\u0647 \u0628\u0639\u062F",
      "\u0633\u0647\u200C\u0634\u0646\u0628\u0647 \u0642\u0628\u0644",
      "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647",
      "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647 \u0628\u0639\u062F",
      "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647 \u0642\u0628\u0644",
      "\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647",
      "\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647 \u0628\u0639\u062F",
      "\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647 \u0642\u0628\u0644",
      "\u062C\u0645\u0639\u0647",
      "\u062C\u0645\u0639\u0647 \u0628\u0639\u062F",
      "\u062C\u0645\u0639\u0647 \u0642\u0628\u0644",
      "\u0627\u06CC\u0646 \u0647\u0641\u062A\u0647",
      "\u0647\u0641\u062A\u0647 \u0642\u0628\u0644",
      "\u0647\u0641\u062A\u0647 \u0628\u0639\u062F",
      "\u0627\u06CC\u0646 \u0645\u0627\u0647",
      "\u0645\u0627\u0647 \u0642\u0628\u0644",
      "\u0645\u0627\u0647 \u0628\u0639\u062F",
      "\u0627\u06CC\u0646 \u0641\u0635\u0644",
      "\u0641\u0635\u0644 \u0642\u0628\u0644",
      "\u0641\u0635\u0644 \u0628\u0639\u062F",
      "\u0627\u0645\u0633\u0627\u0644",
      "\u0633\u0627\u0644 \u0642\u0628\u0644",
      "\u0633\u0627\u0644 \u0628\u0639\u062F"
    ];
    return suggestions.filter((suggestion) => suggestion.startsWith(query));
  }
  renderSuggestion(value, el) {
    const suggestionSpan = el.createSpan();
    suggestionSpan.textContent = value.charAt(0).toUpperCase() + value.slice(1);
  }
  getFormattedDateLink(keyword, date) {
    const now = new Date();
    let dateText = "";
    const formatDate = (date2) => {
      const jalaaliDate = (0, import_jalaali_js3.toJalaali)(date2);
      if (this.plugin.settings.dateFormat === "georgian") {
        return `${date2.getFullYear()}-${(date2.getMonth() + 1).toString().padStart(2, "0")}-${date2.getDate().toString().padStart(2, "0")}`;
      } else {
        return `${jalaaliDate.jy}-${jalaaliDate.jm.toString().padStart(2, "0")}-${jalaaliDate.jd.toString().padStart(2, "0")}`;
      }
    };
    const formatWeek = (date2) => {
      const jalaaliDate = (0, import_jalaali_js3.toJalaali)(date2);
      const weekNumber = this.calculateCurrentWeekNumber(jalaaliDate);
      return `${jalaaliDate.jy}-W${weekNumber.toString().padStart(1, "0")}`;
    };
    const formatMonth = (date2) => {
      const jalaaliDate = (0, import_jalaali_js3.toJalaali)(date2);
      return `${jalaaliDate.jy}-${jalaaliDate.jm.toString().padStart(2, "0")}`;
    };
    const formatQuarter = (date2) => {
      const jalaaliDate = (0, import_jalaali_js3.toJalaali)(date2);
      let quarterNum = 1;
      const month = jalaaliDate.jm;
      if (month >= 1 && month <= 3)
        quarterNum = 1;
      else if (month >= 4 && month <= 6)
        quarterNum = 2;
      else if (month >= 7 && month <= 9)
        quarterNum = 3;
      else if (month >= 10 && month <= 12)
        quarterNum = 4;
      return `${jalaaliDate.jy}-Q${quarterNum}`;
    };
    const formatYear = (date2) => {
      const jalaaliDate = (0, import_jalaali_js3.toJalaali)(date2);
      return `${jalaaliDate.jy}`;
    };
    const weekdayNames = ["\u0634\u0646\u0628\u0647", "\u06CC\u06A9\u0634\u0646\u0628\u0647", "\u062F\u0648\u0634\u0646\u0628\u0647", "\u0633\u0647\u200C\u0634\u0646\u0628\u0647", "\u0686\u0647\u0627\u0631\u0634\u0646\u0628\u0647", "\u067E\u0646\u062C\u200C\u0634\u0646\u0628\u0647", "\u062C\u0645\u0639\u0647"];
    const regex = /(دوشنبه|یکشنبه|سه‌شنبه|چهارشنبه|پنج‌شنبه|شنبه|جمعه)( بعد| قبل)?/;
    const match = keyword.match(regex);
    if (match) {
      const weekdayName = match[1];
      const specifier = match[2] || "";
      const weekdayIndex = weekdayNames.indexOf(weekdayName);
      const currentDayOfWeek = now.getDay();
      const daysFromNowToWeekday = (weekdayIndex + 6 - currentDayOfWeek) % 7;
      if (specifier.includes("\u0628\u0639\u062F")) {
        now.setDate(now.getDate() + daysFromNowToWeekday + 7);
      } else if (specifier.includes("\u0642\u0628\u0644")) {
        now.setDate(now.getDate() + daysFromNowToWeekday - 7);
      } else {
        now.setDate(now.getDate() + daysFromNowToWeekday);
      }
      dateText = formatDate(now);
      const formatSpecifier = specifier ? ` ${specifier.trim()}` : "";
      return `[[${dateText}|${weekdayName}${formatSpecifier}]]`;
    } else {
      switch (keyword) {
        default:
          return "[\u062A\u0627\u0631\u06CC\u062E \u0634\u0646\u0627\u0633\u0627\u06CC\u06CC \u0646\u0634\u062F! \u0628\u0631\u0627\u06CC \u0645\u0634\u0627\u0647\u062F\u0647 \u0631\u0627\u0647\u0646\u0645\u0627 \u06A9\u0644\u06CC\u06A9 \u06A9\u0646\u06CC\u062F](https://github.com/maleknejad/obsidian-persian-calendar) ";
        case "\u0627\u0645\u0631\u0648\u0632":
        case "\u0641\u0631\u062F\u0627":
        case "\u062F\u06CC\u0631\u0648\u0632":
        case "\u067E\u0631\u06CC\u0631\u0648\u0632":
        case "\u067E\u0633\u200C\u0641\u0631\u062F\u0627":
          const dateAdjustment = {
            "\u0627\u0645\u0631\u0648\u0632": 0,
            "\u0641\u0631\u062F\u0627": 1,
            "\u062F\u06CC\u0631\u0648\u0632": -1,
            "\u067E\u0631\u06CC\u0631\u0648\u0632": -2,
            "\u067E\u0633\u200C\u0641\u0631\u062F\u0627": 2
          }[keyword];
          date.setDate(date.getDate() + dateAdjustment);
          return `[[${formatDate(date)}|${keyword}]]`;
        case "\u0627\u06CC\u0646 \u0647\u0641\u062A\u0647":
          return `[[${formatWeek(new Date())}|${keyword}]]`;
        case "\u0647\u0641\u062A\u0647 \u0642\u0628\u0644":
          return `[[${formatWeek(new Date(new Date().setDate(new Date().getDate() - 7)))}|${keyword}]]`;
        case "\u0647\u0641\u062A\u0647 \u0628\u0639\u062F":
          return `[[${formatWeek(new Date(new Date().setDate(new Date().getDate() + 7)))}|${keyword}]]`;
        case "\u0627\u06CC\u0646 \u0645\u0627\u0647":
          return `[[${formatMonth(new Date())}|${keyword}]]`;
        case "\u0645\u0627\u0647 \u0642\u0628\u0644":
          return `[[${formatMonth(new Date(new Date().setMonth(new Date().getMonth() - 1)))}|${keyword}]]`;
        case "\u0645\u0627\u0647 \u0628\u0639\u062F":
          return `[[${formatMonth(new Date(new Date().setMonth(new Date().getMonth() + 1)))}|${keyword}]]`;
        case "\u0627\u06CC\u0646 \u0641\u0635\u0644":
          return `[[${formatQuarter(new Date())}|${keyword}]]`;
        case "\u0641\u0635\u0644 \u0642\u0628\u0644":
          return `[[${formatQuarter(new Date(new Date().setMonth(new Date().getMonth() - 3)))}|${keyword}]]`;
        case "\u0641\u0635\u0644 \u0628\u0639\u062F":
          return `[[${formatQuarter(new Date(new Date().setMonth(new Date().getMonth() + 3)))}|${keyword}]]`;
        case "\u0627\u0645\u0633\u0627\u0644":
          return `[[${formatYear(new Date())}|${keyword}]]`;
        case "\u0633\u0627\u0644 \u0642\u0628\u0644":
          return `[[${formatYear(new Date(new Date().setFullYear(new Date().getFullYear() - 1)))}|${keyword}]]`;
        case "\u0633\u0627\u0644 \u0628\u0639\u062F":
          return `[[${formatYear(new Date(new Date().setFullYear(new Date().getFullYear() + 1)))}|${keyword}]]`;
      }
    }
  }
  selectSuggestion(value, evt) {
    const now = new Date();
    const linkText = this.getFormattedDateLink(value, now);
    const activeView = this.plugin.app.workspace.getActiveViewOfType(import_obsidian2.MarkdownView);
    if (activeView) {
      const editor = activeView.editor;
      if (this.context && this.context.start && this.context.end) {
        editor.replaceRange(linkText, this.context.start, this.context.end);
      } else {
        console.error("EditorSuggest context start or end is null");
      }
    } else {
      console.error("No active markdown editor");
    }
    this.close();
  }
  convertTextToDate(editor) {
    const selectedText = editor.getSelection();
    if (!selectedText) {
      new import_obsidian2.Notice("\u0645\u062A\u0646\u06CC \u0627\u0646\u062A\u062E\u0627\u0628 \u0646\u0634\u062F\u0647 \u0627\u0633\u062A.");
      return;
    }
    let linkText = "";
    try {
      linkText = this.getFormattedDateLink(selectedText, new Date());
      editor.replaceSelection(linkText);
    } catch (error) {
      console.error("Failed to convert text to date:", error);
      new import_obsidian2.Notice("Failed to convert text to date.");
    }
  }
};

// src/placeholder.ts
var import_moment_jalaali3 = __toESM(require_moment_jalaali());
var import_jalaali_js4 = __toESM(require_jalaali_js());
var import_moment_hijri2 = __toESM(require_moment_hijri());
var PersianPlaceholders = class {
  constructor(plugin) {
    this.plugin = plugin;
  }
  async insertPersianDate(file) {
    if (!file) {
      console.error("File object is undefined.");
      return;
    }
    const timeoutDuration = this.plugin.settings.timeoutDuration || 1250;
    setTimeout(async () => {
      const fileContent = await this.plugin.app.vault.read(file);
      let updatedContent = fileContent;
      const placeholders = {
        "{{\u0627\u0645\u0631\u0648\u0632}}": this.getPersianDate(),
        "{{\u0627\u06CC\u0646 \u0631\u0648\u0632}}": this.getFormattedDateFromFileTitle(file.basename, this.plugin.settings.dateFormat),
        "{{\u0631\u0648\u0632 \u0647\u0641\u062A\u0647}}": this.getCurrentWeekday(),
        "{{\u0627\u06CC\u0646 \u0631\u0648\u0632 \u0647\u0641\u062A\u0647}}": this.getWeekdayFromFileTitle(file.basename, this.plugin.settings.dateFormat),
        "{{\u0647\u0641\u062A\u0647}}": this.getCurrentWeek(),
        "{{\u0627\u06CC\u0646 \u0647\u0641\u062A\u0647}}": this.getWeekNumberFromFileTitle(file.basename, this.plugin.settings.dateFormat),
        "{{\u0645\u0627\u0647}}": this.getCurrentMonth(),
        "{{\u0627\u06CC\u0646 \u0645\u0627\u0647}}": this.getMonthNumberFromFileTitle(file.basename, this.plugin.settings.dateFormat),
        "{{\u0641\u0635\u0644}}": this.getCurrentQuarter(),
        "{{\u0627\u06CC\u0646 \u0641\u0635\u0644}}": this.getQuarterNumberFromFileTitle(file.basename, this.plugin.settings.dateFormat),
        "{{\u0633\u0627\u0644}}": this.getCurrentYear(),
        "{{\u0627\u06CC\u0646 \u0633\u0627\u0644}}": this.getYearNumberFromFileTitle(file.basename, this.plugin.settings.dateFormat),
        "{{\u0631\u0648\u0632\u0647\u0627\u06CC \u06AF\u0630\u0634\u062A\u0647}}": this.getDaysPassedFromFileTitle(file.basename, this.plugin.settings.dateFormat),
        "{{\u0631\u0648\u0632\u0647\u0627\u06CC \u0628\u0627\u0642\u06CC\u0645\u0627\u0646\u062F\u0647}}": this.getDaysUntilEndOfYear(file.basename, this.plugin.settings.dateFormat),
        "{{\u0627\u0648\u0644 \u0647\u0641\u062A\u0647}}": this.isWeeklyFile(file.basename) ? this.getWeekStartDate(parseInt(file.basename.split("-W")[0]), parseInt(file.basename.split("-W")[1]), this.plugin.settings.dateFormat) : null,
        "{{\u0622\u062E\u0631 \u0647\u0641\u062A\u0647}}": this.isWeeklyFile(file.basename) ? this.getWeekEndDate(parseInt(file.basename.split("-W")[0]), parseInt(file.basename.split("-W")[1]), this.plugin.settings.dateFormat) : null,
        "{{\u0627\u0648\u0644 \u0645\u0627\u0647}}": this.isMonthlyFile(file.basename) ? this.getMonthStartDate(file.basename, this.plugin.settings.dateFormat) : null,
        "{{\u0622\u062E\u0631 \u0645\u0627\u0647}}": this.isMonthlyFile(file.basename) ? this.getMonthEndDate(file.basename, this.plugin.settings.dateFormat) : null,
        "{{\u0627\u0648\u0644 \u0633\u0627\u0644}}": this.getFirstDayOfYear(file.basename, this.plugin.settings.dateFormat),
        "{{\u0622\u062E\u0631 \u0633\u0627\u0644}}": this.getLastDayOfYear(file.basename, this.plugin.settings.dateFormat),
        "{{\u0631\u0648\u06CC\u062F\u0627\u062F}}": () => this.getEvents(file.basename)
      };
      for (const [placeholder, value] of Object.entries(placeholders)) {
        if (fileContent.includes(placeholder)) {
          const result = typeof value === "function" ? await value() : value;
          if (result != null) {
            updatedContent = updatedContent.replace(new RegExp(placeholder, "g"), result);
          }
        }
      }
      if (updatedContent !== fileContent) {
        await this.plugin.app.vault.modify(file, updatedContent);
      }
    }, timeoutDuration);
  }
  getJalaaliMoment() {
    return (0, import_moment_jalaali3.default)().locale("fa");
  }
  getPersianDate() {
    const now = this.getJalaaliMoment();
    return now.format("jYYYY-jMM-jDD");
  }
  getCurrentWeekday() {
    const now = this.getJalaaliMoment();
    return now.format("dddd");
  }
  getCurrentWeek() {
    const now = this.getJalaaliMoment();
    return `${now.jYear()}-W${now.jWeek()}`;
  }
  getCurrentMonth() {
    const now = this.getJalaaliMoment();
    return `${now.jYear()}-${now.jMonth() + 1}`;
  }
  getCurrentQuarter() {
    const now = this.getJalaaliMoment();
    const quarter = Math.ceil((now.jMonth() + 1) / 3);
    return `${now.jYear()}-Q${quarter}`;
  }
  getCurrentYear() {
    const now = this.getJalaaliMoment();
    return `${now.jYear()}`;
  }
  parseDateFromTitle(title, dateFormat) {
    let parsedDate = (0, import_moment_jalaali3.default)(title, dateFormat === "persian" ? "jYYYY-jMM-jDD" : "YYYY-MM-DD");
    if (!parsedDate.isValid()) {
      return null;
    }
    if (dateFormat === "georgian") {
      const persianDate = parsedDate.locale("fa").format("jYYYY/jMM/jD");
      parsedDate = (0, import_moment_jalaali3.default)(persianDate, "jYYYY/jMM/jD");
    }
    return parsedDate;
  }
  getFormattedDateFromFileTitle(title, dateFormat) {
    const parsedDate = this.parseDateFromTitle(title, dateFormat);
    if (parsedDate) {
      return parsedDate.format("jYYYY-jMM-jDD");
    }
    return null;
  }
  getWeekdayFromFileTitle(title, dateFormat) {
    const parsedDate = this.parseDateFromTitle(title, dateFormat);
    if (parsedDate) {
      return parsedDate.format("dddd");
    }
    return null;
  }
  getWeekNumberFromFileTitle(title, dateFormat) {
    const parsedDate = this.parseDateFromTitle(title, dateFormat);
    if (parsedDate) {
      const jWeek = parsedDate.jWeek();
      const jYear = parsedDate.jYear();
      return `${jYear}-W${jWeek}`;
    }
    return null;
  }
  getMonthNumberFromFileTitle(title, dateFormat) {
    const parsedDate = this.parseDateFromTitle(title, dateFormat);
    if (parsedDate) {
      const jMonth = parsedDate.jMonth() + 1;
      const jYear = parsedDate.jYear();
      return `${jYear}-${jMonth}`;
    }
    return null;
  }
  getYearNumberFromFileTitle(title, dateFormat) {
    const parsedDate = this.parseDateFromTitle(title, dateFormat);
    if (parsedDate) {
      return `${parsedDate.jYear()}`;
    }
    return null;
  }
  getQuarterNumberFromFileTitle(title, dateFormat) {
    const parsedDate = this.parseDateFromTitle(title, dateFormat);
    if (parsedDate) {
      const jMonth = parsedDate.jMonth() + 1;
      const quarter = Math.ceil(jMonth / 3);
      const jYear = parsedDate.jYear();
      return `${jYear}-Q${quarter}`;
    }
    return null;
  }
  getDaysPassedFromFileTitle(title, dateFormat) {
    try {
      let parsedDate;
      if (dateFormat === "georgian") {
        parsedDate = (0, import_moment_jalaali3.default)(title, "YYYY-MM-DD");
        if (parsedDate.isValid()) {
          parsedDate = parsedDate.locale("fa");
        }
      } else {
        parsedDate = (0, import_moment_jalaali3.default)(title, "jYYYY/jMM/jDD");
      }
      if (!parsedDate.isValid()) {
        console.error("Invalid date in file title");
        return null;
      }
      const startOfYear = (0, import_moment_jalaali3.default)(`${parsedDate.jYear()}/1/1`, "jYYYY/jM/jD").locale("fa");
      const daysPassed = parsedDate.diff(startOfYear, "days") + 1;
      return daysPassed.toString();
    } catch (error) {
      console.error("Error calculating days passed: ", error);
      return null;
    }
  }
  getDaysUntilEndOfYear(dateStr, dateFormat) {
    const parsedDate = this.parseDateFromTitle(dateStr, dateFormat);
    if (parsedDate) {
      const endOfYear = (0, import_moment_jalaali3.default)(`${parsedDate.jYear()}/12/29`, "jYYYY/jMM/jDD").locale("fa");
      const daysUntilEnd = endOfYear.diff(parsedDate, "days");
      return daysUntilEnd.toString();
    }
    return null;
  }
  isWeeklyFile(title) {
    const weeklyPattern = /^\d{4}-W\d{1,2}$/;
    return weeklyPattern.test(title);
  }
  getFirstSaturday(year) {
    const firstDayGregorian = import_jalaali_js4.default.toGregorian(year, 1, 1);
    const firstDay = new Date(firstDayGregorian.gy, firstDayGregorian.gm - 1, firstDayGregorian.gd);
    const firstDayWeekday = firstDay.getDay();
    const offset = firstDayWeekday === 6 ? 0 : 6 - firstDayWeekday + 1;
    const firstSaturday = new Date(firstDay.getTime());
    firstSaturday.setDate(firstSaturday.getDate() + offset);
    return import_jalaali_js4.default.toJalaali(firstSaturday.getFullYear(), firstSaturday.getMonth() + 1, firstSaturday.getDate());
  }
  getWeekStartDate(year, week, dateFormat) {
    try {
      const firstDayOfYearGregorian = import_jalaali_js4.default.toGregorian(year, 1, 1);
      const firstDayOfYear = new Date(firstDayOfYearGregorian.gy, firstDayOfYearGregorian.gm - 1, firstDayOfYearGregorian.gd);
      const firstDayWeekday = firstDayOfYear.getDay();
      const adjustedWeek = firstDayWeekday === 6 ? week : week - 1;
      const firstSaturday = this.getFirstSaturday(year);
      const startDate = import_jalaali_js4.default.toGregorian(firstSaturday.jy, firstSaturday.jm, firstSaturday.jd);
      const start = new Date(startDate.gy, startDate.gm - 1, startDate.gd);
      start.setDate(start.getDate() + (adjustedWeek - 1) * 7);
      while (start.getDay() !== 6) {
        start.setDate(start.getDate() - 1);
      }
      const weekStartJalaali = import_jalaali_js4.default.toJalaali(start.getFullYear(), start.getMonth() + 1, start.getDate());
      return this.formatDate(weekStartJalaali, dateFormat);
    } catch (error) {
      console.error("Error in getWeekStartDate:", error);
      throw error;
    }
  }
  getWeekEndDate(year, week, dateFormat) {
    try {
      const weekStart = this.getWeekStartDate(year, week, "persian");
      const [jy, jm, jd] = weekStart.split("-").map(Number);
      const startDateGregorian = import_jalaali_js4.default.toGregorian(jy, jm, jd);
      const startDate = new Date(startDateGregorian.gy, startDateGregorian.gm - 1, startDateGregorian.gd);
      startDate.setDate(startDate.getDate() + 6);
      const weekEndJalaali = import_jalaali_js4.default.toJalaali(startDate.getFullYear(), startDate.getMonth() + 1, startDate.getDate());
      return this.formatDate(weekEndJalaali, dateFormat);
    } catch (error) {
      console.error("Error in getWeekEndDate:", error);
      throw error;
    }
  }
  formatDate(date, dateFormat) {
    if (dateFormat === "persian") {
      return `${date.jy}-${date.jm.toString().padStart(2, "0")}-${date.jd.toString().padStart(2, "0")}`;
    } else {
      const gregorian = import_jalaali_js4.default.toGregorian(date.jy, date.jm, date.jd);
      return `${gregorian.gy}-${gregorian.gm.toString().padStart(2, "0")}-${gregorian.gd.toString().padStart(2, "0")}`;
    }
  }
  isMonthlyFile(title) {
    const monthlyPattern = /^\d{4}-\d{2}$/;
    return monthlyPattern.test(title);
  }
  getMonthStartDate(title, dateFormat) {
    const [year, month] = title.split("-").map(Number);
    if (dateFormat === "persian") {
      return `${year}-${month.toString().padStart(2, "0")}-01`;
    } else {
      const gregorianStart = import_jalaali_js4.default.toGregorian(year, month, 1);
      return `${gregorianStart.gy}-${gregorianStart.gm.toString().padStart(2, "0")}-${gregorianStart.gd.toString().padStart(2, "0")}`;
    }
  }
  getMonthEndDate(title, dateFormat) {
    const [year, month] = title.split("-").map(Number);
    if (dateFormat === "persian") {
      const jalaaliEndDay = import_jalaali_js4.default.jalaaliMonthLength(year, month);
      return `${year}-${month.toString().padStart(2, "0")}-${jalaaliEndDay.toString().padStart(2, "0")}`;
    } else {
      const jalaaliEndDay = import_jalaali_js4.default.jalaaliMonthLength(year, month);
      const gregorianEnd = import_jalaali_js4.default.toGregorian(year, month, jalaaliEndDay);
      return `${gregorianEnd.gy}-${gregorianEnd.gm.toString().padStart(2, "0")}-${gregorianEnd.gd.toString().padStart(2, "0")}`;
    }
  }
  getFirstDayOfYear(fileBasename, dateFormat) {
    const year = parseInt(fileBasename);
    if (isNaN(year)) {
      return "";
    }
    if (this.plugin.settings.dateFormat.toLowerCase() === "georgian") {
      const georgianDate = import_jalaali_js4.default.toGregorian(year, 1, 1);
      return `${georgianDate.gy}-${georgianDate.gm.toString().padStart(2, "0")}-${georgianDate.gd.toString().padStart(2, "0")}`;
    } else {
      return `${year}-01-01`;
    }
  }
  getLastDayOfYear(fileBasename, dateFormat) {
    const year = parseInt(fileBasename);
    if (isNaN(year)) {
      return "";
    }
    if (this.plugin.settings.dateFormat.toLowerCase() === "georgian") {
      const nextYear = import_jalaali_js4.default.toGregorian(year + 1, 1, 1);
      const lastDay = new Date(nextYear.gy, nextYear.gm - 1, nextYear.gd - 1);
      return `${lastDay.getFullYear()}-${String(lastDay.getMonth() + 1).padStart(2, "0")}-${String(lastDay.getDate()).padStart(2, "0")}`;
    } else {
      const isLeapYear = import_jalaali_js4.default.isLeapJalaaliYear(year);
      return isLeapYear ? `${year}-12-30` : `${year}-12-29`;
    }
  }
  async getEvents(title) {
    const date = this.parseDateFromTitle(title, this.plugin.settings.dateFormat);
    if (!date) {
      return "\u062A\u0627\u0631\u06CC\u062E \u0646\u0627\u0645\u0639\u062A\u0628\u0631";
    }
    const events = [];
    const settings = this.plugin.settings;
    if (settings.showOfficialIranianCalendar || settings.showAncientIranianCalendar) {
      const persianEvents = this.getEventsForDate(PersianCalendarHolidays, date.jMonth() + 1, date.jDate());
      events.push(...persianEvents.filter(
        (event) => settings.showOfficialIranianCalendar && event.type === "Iran" || settings.showAncientIranianCalendar && event.type === "Ancient Iran"
      ));
    }
    events.push(...this.getEventsForDate(GregorianCalendarHolidays, date.month() + 1, date.date()));
    if (settings.showShiaCalendar) {
      const persianDate = { jy: date.jYear(), jm: date.jMonth() + 1, jd: date.jDate() };
      const hijriDate = this.getHijriDate(persianDate, settings.hijriCalendarType);
      const gregorianDate = import_jalaali_js4.default.toGregorian(persianDate.jy, persianDate.jm, persianDate.jd);
      const hijriMomentDate = (0, import_moment_hijri2.default)(`${gregorianDate.gy}-${gregorianDate.gm}-${gregorianDate.gd}`, "YYYY-M-D");
      hijriMomentDate.iYear(hijriDate.hy);
      hijriMomentDate.iMonth(hijriDate.hm - 1);
      hijriMomentDate.iDate(hijriDate.hd);
      const hijriEvents = HijriCalendarHolidays.filter(
        (event) => event.month === hijriMomentDate.iMonth() + 1 && event.day === hijriMomentDate.iDate()
      );
      events.push(...hijriEvents.filter((event) => event.type === "Islamic Iran"));
    }
    if (events.length === 0) {
      return "\u0647\u06CC\u0686 \u0631\u0648\u06CC\u062F\u0627\u062F\u06CC \u0628\u0631\u0627\u06CC \u0627\u06CC\u0646 \u0631\u0648\u0632 \u062B\u0628\u062A \u0646\u0634\u062F\u0647 \u0627\u0633\u062A.";
    }
    return events.map((event) => `* ${event.title}${event.holiday ? " (\u062A\u0639\u0637\u06CC\u0644)" : ""}`).join("\n");
  }
  getEventsForDate(holidays, month, day) {
    return holidays.filter((event) => event.month === month && event.day === day);
  }
  calculateIranianHijriDate(baseDate, dayDifference) {
    let { hy, hm, hd } = baseDate;
    while (dayDifference > 0) {
      const monthLength = iranianHijriAdjustments[hy] ? iranianHijriAdjustments[hy][hm] : null;
      if (monthLength) {
        if (hd + dayDifference <= monthLength) {
          hd += dayDifference;
          dayDifference = 0;
        } else {
          dayDifference -= monthLength - hd + 1;
          hd = 1;
          hm += 1;
          if (hm > 12) {
            hm = 1;
            hy += 1;
          }
        }
      } else {
        const gregorianDate = import_jalaali_js4.default.toGregorian(baseDate.hy, baseDate.hm, baseDate.hd);
        const gregorianDateStr = `${gregorianDate.gy}-${gregorianDate.gm}-${gregorianDate.gd}`;
        const hijriMomentDate = (0, import_moment_hijri2.default)(gregorianDateStr, "YYYY-M-D").add(dayDifference, "days");
        return {
          hy: hijriMomentDate.iYear(),
          hm: hijriMomentDate.iMonth() + 1,
          hd: hijriMomentDate.iDate()
        };
      }
    }
    return { hy, hm, hd };
  }
  getHijriDate(persianDate, hijriCalendarType) {
    if (hijriCalendarType === "ummalqura") {
      const gregorianDate = import_jalaali_js4.default.toGregorian(persianDate.jy, persianDate.jm, persianDate.jd);
      const gregorianDateStr = `${gregorianDate.gy}-${gregorianDate.gm}-${gregorianDate.gd}`;
      const hijriMomentDate = (0, import_moment_hijri2.default)(gregorianDateStr, "YYYY-M-D");
      return {
        hy: hijriMomentDate.iYear(),
        hm: hijriMomentDate.iMonth() + 1,
        hd: hijriMomentDate.iDate()
      };
    } else {
      const dayDifference = this.calculateDayDifference(basePersianDate, persianDate);
      return this.calculateIranianHijriDate(baseHijriDate, dayDifference);
    }
  }
  calculateDayDifference(fromDate, toDate) {
    const fromGregorian = import_jalaali_js4.default.toGregorian(fromDate.jy, fromDate.jm, fromDate.jd);
    const toGregorian5 = import_jalaali_js4.default.toGregorian(toDate.jy, toDate.jm, toDate.jd);
    const fromDateObj = new Date(fromGregorian.gy, fromGregorian.gm - 1, fromGregorian.gd);
    const toDateObj = new Date(toGregorian5.gy, toGregorian5.gm - 1, toGregorian5.gd);
    const timeDiff = toDateObj.getTime() - fromDateObj.getTime();
    return timeDiff / (1e3 * 3600 * 24);
  }
};

// src/updatemodal.ts
var import_obsidian3 = require("obsidian");
var UpdateModal = class extends import_obsidian3.Modal {
  constructor(app) {
    super(app);
  }
  onOpen() {
    const { contentEl } = this;
    contentEl.setAttribute("dir", "rtl");
    contentEl.createEl("h3", { text: "\u062A\u063A\u06CC\u06CC\u0631\u0627\u062A \u0646\u0633\u062E\u0647 \u0633\u0648\u0645 \u0627\u0641\u0632\u0648\u0646\u0647 \u062A\u0642\u0648\u06CC\u0645 \u0641\u0627\u0631\u0633\u06CC" });
    contentEl.createEl("p", { text: "- \u0627\u0636\u0627\u0641\u0647 \u0634\u062F\u0646 \u0631\u0648\u06CC\u062F\u0627\u062F\u0647\u0627\u06CC \u062A\u0642\u0648\u06CC\u0645 \u0631\u0633\u0645\u06CC \u0627\u06CC\u0631\u0627\u0646 \u0648 \u0646\u0645\u0627\u06CC\u0634 \u062F\u0631 \u062A\u0642\u0648\u06CC\u0645: \u062D\u0627\u0644\u0627 \u0645\u06CC\u200C\u062A\u0648\u0627\u0646\u06CC\u062F \u0631\u0648\u06CC\u062F\u0627\u062F\u0647\u0627\u06CC \u062A\u0642\u0648\u06CC\u0645 \u0631\u0633\u0645\u06CC \u0627\u06CC\u0631\u0627\u0646 \u0631\u0627 \u062F\u0631 \u062A\u0642\u0648\u06CC\u0645 \u062E\u0648\u062F \u0645\u0634\u0627\u0647\u062F\u0647 \u06A9\u0646\u06CC\u062F." });
    contentEl.createEl("p", { text: "- \u0627\u0636\u0627\u0641\u0647 \u0634\u062F\u0646 \u062A\u0642\u0648\u06CC\u0645 \u0647\u062C\u0631\u06CC \u0642\u0645\u0631\u06CC \u0628\u0631 \u0627\u0633\u0627\u0633 \u062A\u0642\u0648\u06CC\u0645 \u0627\u06CC\u0631\u0627\u0646: \u0628\u0627 \u0627\u06CC\u0646 \u0648\u06CC\u0698\u06AF\u06CC \u0645\u06CC\u200C\u062A\u0648\u0627\u0646\u06CC\u062F \u062A\u0627\u0631\u06CC\u062E\u200C\u0647\u0627\u06CC \u0647\u062C\u0631\u06CC \u0642\u0645\u0631\u06CC \u0631\u0627 \u0628\u0631 \u0627\u0633\u0627\u0633 \u062A\u0642\u0648\u06CC\u0645 \u0627\u06CC\u0631\u0627\u0646 \u062F\u0631 \u062A\u0642\u0648\u06CC\u0645 \u0645\u0634\u0627\u0647\u062F\u0647 \u06A9\u0646\u06CC\u062F. \u0628\u0631\u0627\u06CC \u0641\u0639\u0627\u0644\u200C\u0633\u0627\u0632\u06CC \u062A\u0646\u0638\u06CC\u0645\u0627\u062A \u0631\u0627 \u0628\u0631\u0631\u0633\u06CC \u06A9\u0646\u06CC\u062F.." });
    contentEl.createEl("p", { text: "- \u0627\u0636\u0627\u0641\u0647 \u0634\u062F\u0646 {{\u0645\u0646\u0627\u0633\u0628\u062A}} \u0628\u0631\u0627\u06CC \u063A\u0646\u06CC\u200C\u062A\u0631 \u06A9\u0631\u062F\u0646 \u0646\u0648\u0634\u062A\u0647\u200C\u0647\u0627 \u0628\u0631 \u0627\u0633\u0627\u0633 \u062A\u0646\u0638\u06CC\u0645\u0627\u062A \u0634\u0645\u0627: \u0627\u0632 \u0627\u06CC\u0646 \u0628\u0647 \u0628\u0639\u062F \u0645\u06CC\u200C\u062A\u0648\u0627\u0646\u06CC\u062F \u0627\u0632 {{\u0645\u0646\u0627\u0633\u0628\u062A}} \u0628\u0631\u0627\u06CC \u0627\u0636\u0627\u0641\u0647 \u06A9\u0631\u062F\u0646 \u0631\u0648\u06CC\u062F\u0627\u062F\u0647\u0627 \u0628\u0647 \u0646\u0648\u0634\u062A\u0647\u200C\u0647\u0627\u06CC \u062E\u0648\u062F \u0627\u0633\u062A\u0641\u0627\u062F\u0647 \u06A9\u0646\u06CC\u062F." });
    contentEl.createEl("p", { text: "-  \u0627\u0645\u06A9\u0627\u0646 \u0646\u0645\u0627\u06CC\u0634 \u0631\u0648\u0632\u0647\u0627\u06CC \u062A\u0639\u0637\u06CC\u0644 \u062F\u0631 \u062A\u0642\u0648\u06CC\u0645: \u0627\u06CC\u0646 \u0648\u06CC\u0698\u06AF\u06CC \u0628\u0647 \u0634\u0645\u0627 \u0627\u062C\u0627\u0632\u0647 \u0645\u06CC\u200C\u062F\u0647\u062F \u062A\u0627 \u0631\u0648\u0632\u0647\u0627\u06CC \u062A\u0639\u0637\u06CC\u0644 \u0631\u0627 \u062F\u0631 \u062A\u0642\u0648\u06CC\u0645 \u062E\u0648\u062F \u0645\u0634\u0627\u0647\u062F\u0647 \u06A9\u0646\u06CC\u062F \u0648 \u0628\u0647\u062A\u0631 \u0628\u0631\u0646\u0627\u0645\u0647\u200C\u0631\u06CC\u0632\u06CC \u06A9\u0646\u06CC\u062F." });
    contentEl.createEl("p", { text: "- \u0628\u0627\u0632\u0637\u0631\u0627\u062D\u06CC \u0646\u0645\u0627\u06CC\u0634 \u0627\u0645\u0631\u0648\u0632 \u062F\u0631 \u062A\u0642\u0648\u06CC\u0645: \u0646\u0645\u0627\u06CC\u0634 \u0627\u0645\u0631\u0648\u0632 \u062F\u0631 \u062A\u0642\u0648\u06CC\u0645 \u0628\u0647\u0628\u0648\u062F \u06CC\u0627\u0641\u062A\u0647 \u0648 \u0628\u0627 \u06CC\u06A9 \u0646\u06AF\u0627\u0647 \u0628\u0647\u062A\u0631 \u0634\u0646\u0627\u0633\u0627\u06CC\u06CC \u0645\u06CC\u200C\u0634\u0648\u062F." });
    contentEl.createEl("p", { text: "- \u0627\u0636\u0627\u0641\u0647 \u0634\u062F\u0646 {{\u0627\u0648\u0644 \u0633\u0627\u0644}} \u0648 {{\u0622\u062E\u0631 \u0633\u0627\u0644}}: \u0627\u0648\u0644 \u0648 \u0622\u062E\u0631 \u0633\u0627\u0644 \u0631\u0627 \u0628\u0647 \u0634\u0645\u0633\u06CC \u06CC\u0627 \u0645\u06CC\u0644\u0627\u062F\u06CC \u0628\u0631 \u0627\u0633\u0627\u0633 \u0633\u0627\u0644\u200C\u0646\u0648\u0634\u062A \u0628\u0631\u0645\u06CC\u200C\u06AF\u0631\u062F\u0627\u0646\u062F." });
    contentEl.createEl("p", { text: "- \u0631\u0641\u0639 \u0628\u0627\u06AF {{\u0639\u0628\u0627\u0631\u062A\u200C\u0647\u0627\u06CC \u0645\u0639\u0646\u0627\u062F\u0627\u0631}} \u0648 \u062A\u062F\u0627\u062E\u0644 \u0628\u0627 \u062A\u0645\u067E\u0644\u06CC\u062A\u0631: \u0628\u0627\u06AF\u200C\u0647\u0627\u06CC \u0645\u0631\u062A\u0628\u0637 \u0628\u0627 {{\u0639\u0628\u0627\u0631\u062A\u200C\u0647\u0627\u06CC \u0645\u0639\u0646\u0627\u062F\u0627\u0631}} \u0648 \u062A\u062F\u0627\u062E\u0644 \u0628\u0627 \u062A\u0645\u067E\u0644\u06CC\u062A\u0631 \u0631\u0641\u0639 \u0634\u062F\u0647\u200C \u0627\u0633\u062A." });
    contentEl.createEl("p", { text: "- \u0631\u0641\u0639 \u0628\u0627\u06AF {{\u0639\u0628\u0627\u0631\u062A\u200C\u0647\u0627\u06CC \u0645\u0639\u0646\u0627\u062F\u0627\u0631}} \u0648 \u062A\u062F\u0627\u062E\u0644 \u0628\u0627 \u062A\u0645\u067E\u0644\u06CC\u062A\u0631: \u0628\u0627\u06AF\u200C\u0647\u0627\u06CC \u0645\u0631\u062A\u0628\u0637 \u0628\u0627 {{\u0639\u0628\u0627\u0631\u062A\u200C\u0647\u0627\u06CC \u0645\u0639\u0646\u0627\u062F\u0627\u0631}} \u0648 \u062A\u062F\u0627\u062E\u0644 \u0628\u0627 \u062A\u0645\u067E\u0644\u06CC\u062A\u0631 \u0631\u0641\u0639 \u0634\u062F\u0647\u200C \u0627\u0633\u062A." });
    contentEl.createEl("p", { text: "- \u0648\u0642\u062A\u06CC \u0627\u0641\u0632\u0648\u0646\u0647 \u0641\u0639\u0627\u0644 \u0645\u06CC\u200C\u0634\u0648\u062F \u0628\u0647 \u0635\u0648\u0631\u062A \u067E\u06CC\u0634\u200C\u0641\u0631\u0636 \u062F\u0631 \u0633\u0627\u06CC\u062F\u0628\u0627\u0631 \u0646\u0645\u0627\u06CC\u0634 \u062F\u0627\u062F\u0647 \u0645\u06CC\u200C\u0634\u0648\u062F." });
    contentEl.createEl("p", { text: "\u0628\u0631\u0627\u06CC \u062D\u0645\u0627\u06CC\u062A \u0648 \u0628\u0627\u0632\u062E\u0648\u0631\u062F \u062F\u0631 \u0645\u0648\u0631\u062F \u0627\u06CC\u0646 \u0627\u0641\u0632\u0648\u0646\u0647 \u06A9\u0627\u0646\u0627\u0644 \u062A\u0644\u06AF\u0631\u0627\u0645 \u06A9\u0627\u0631\u0641\u06A9\u0631 \u0631\u0627 \u062F\u0646\u0628\u0627\u0644 \u06A9\u0646\u06CC\u062F." });
    const buttonContainer = contentEl.createEl("div", { cls: "button-container" });
    const button = buttonContainer.createEl("button", { text: "\u06A9\u0627\u0631\u0641\u06A9\u0631 \u062F\u0631 \u062A\u0644\u06AF\u0631\u0627\u0645" });
    button.style.color = "var(--interactive-accent)";
    button.style.backgroundColor = "transparent";
    button.style.border = "1px solid var(--interactive-accent)";
    button.style.padding = "0.5em 1em";
    button.style.cursor = "pointer";
    button.onclick = () => {
      window.open("https://t.me/karfekr", "_blank");
    };
    buttonContainer.style.display = "flex";
    buttonContainer.style.justifyContent = "center";
    buttonContainer.style.marginTop = "1em";
    contentEl.createEl("br");
  }
  onClose() {
    this.contentEl.empty();
    this.close();
  }
};

// src/settingstab.ts
var import_obsidian4 = require("obsidian");
var PersianCalendarSettingTab = class extends import_obsidian4.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
    this.addPathSetting = this.addPathSetting.bind(this);
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.setAttribute("dir", "rtl");
    containerEl.createEl("h3", { text: "\u062A\u0646\u0638\u06CC\u0645\u0627\u062A \u062A\u0642\u0648\u06CC\u0645" });
    containerEl.createEl("p", { text: "\u062A\u0642\u0648\u06CC\u0645 \u0641\u0627\u0631\u0633\u06CC \u0627\u0628\u0633\u06CC\u062F\u06CC\u0646 \u0631\u0627 \u0627\u0632 \u0627\u06CC\u0646 \u0637\u0631\u06CC\u0642 \u0645\u06CC\u200C\u062A\u0648\u0627\u0646\u06CC\u062F \u062A\u0646\u0638\u06CC\u0645 \u06A9\u0646\u06CC\u062F." });
    this.addPathSetting(containerEl, "\u0645\u0633\u06CC\u0631 \u0631\u0648\u0632\u0646\u0648\u0634\u062A\u200C\u0647\u0627", "dailyNotesFolderPath");
    new import_obsidian4.Setting(containerEl).setName("\u0641\u0631\u0645\u062A \u0646\u0627\u0645\u200C\u06AF\u0630\u0627\u0631\u06CC \u0648 \u0634\u0646\u0627\u0633\u0627\u06CC\u06CC \u0631\u0648\u0632\u0646\u0648\u0634\u062A\u200C\u0647\u0627").setDesc("\u0645\u0634\u062E\u0635 \u06A9\u0646\u06CC\u062F \u0631\u0648\u0632\u0646\u0648\u0634\u062A\u200C\u0647\u0627 \u0628\u0627 \u0686\u0647 \u0641\u0631\u0645\u062A\u06CC \u0646\u0627\u0645\u200C\u06AF\u0630\u0627\u0631\u06CC \u0634\u0648\u0646\u062F. \u0627\u06CC\u0646 \u0646\u0627\u0645 \u062F\u0631 Title \u0631\u0648\u0632\u0646\u0648\u0634\u062A\u200C\u0647\u0627 \u0642\u0631\u0627\u0631 \u0645\u06CC\u200C\u06AF\u06CC\u0631\u062F.").addDropdown((dropdown) => dropdown.addOption("persian", "\u062E\u0648\u0631\u0634\u06CC\u062F\u06CC").addOption("georgian", "\u0645\u06CC\u0644\u0627\u062F\u06CC").setValue(this.plugin.settings.dateFormat || "georgian").onChange(async (value) => {
      this.plugin.settings.dateFormat = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    this.addPathSetting(containerEl, "\u0645\u0633\u06CC\u0631 \u0647\u0641\u062A\u0647\u200C\u0646\u0648\u0634\u062A\u200C\u0647\u0627", "weeklyNotesFolderPath");
    this.addPathSetting(containerEl, "\u0645\u0633\u06CC\u0631 \u0645\u0627\u0647\u200C\u0646\u0648\u0634\u062A\u200C\u0647\u0627", "monthlyNotesFolderPath");
    this.addPathSetting(containerEl, "\u0645\u0633\u06CC\u0631 \u0641\u0635\u0644\u200C\u0646\u0648\u0634\u062A\u200C\u0647\u0627", "quarterlyNotesFolderPath");
    this.addPathSetting(containerEl, "\u0645\u0633\u06CC\u0631 \u0633\u0627\u0644\u200C\u0646\u0648\u0634\u062A\u200C\u0647\u0627", "yearlyNotesFolderPath");
    new import_obsidian4.Setting(containerEl).setName("\u0641\u0639\u0627\u0644\u200C\u0633\u0627\u0632\u06CC \u0646\u0645\u0627\u06CC\u0634 \u0641\u0635\u0644\u200C\u0646\u0648\u0634\u062A\u200C\u0647\u0627 \u062F\u0631 \u062A\u0642\u0648\u06CC\u0645").setDesc("\u0646\u0645\u0627\u06CC\u0634 \u06CC\u0627 \u067E\u0646\u0647\u0627\u0646 \u06A9\u0631\u062F\u0646 \u0631\u062F\u06CC\u0641 \u0641\u0635\u0644\u200C\u0646\u0648\u0634\u062A\u200C\u0647\u0627 \u062F\u0631 \u0646\u0645\u0627\u06CC \u062A\u0642\u0648\u06CC\u0645").addToggle((toggle) => toggle.setValue(this.plugin.settings.enableQuarterlyNotes).onChange(async (value) => {
      this.plugin.settings.enableQuarterlyNotes = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian4.Setting(containerEl).setName("\u0641\u0639\u0627\u0644\u200C\u0633\u0627\u0632\u06CC \u0646\u0645\u0627\u06CC\u0634 \u062A\u0642\u0648\u06CC\u0645 \u0645\u06CC\u0644\u0627\u062F\u06CC").setDesc("\u0645\u06CC\u200C\u062A\u0648\u0627\u0646\u06CC\u062F \u0645\u0634\u062E\u0635 \u06A9\u0646\u06CC\u062F \u062A\u0642\u0648\u06CC\u0645 \u0645\u06CC\u0644\u0627\u062F\u06CC \u0632\u06CC\u0631 \u062A\u0642\u0648\u06CC\u0645 \u0634\u0645\u0633\u06CC \u0646\u0645\u0627\u06CC\u0634 \u062F\u0627\u062F\u0647 \u0634\u0648\u062F.").addToggle((toggle) => toggle.setValue(this.plugin.settings.showGeorgianDates).onChange(async (value) => {
      this.plugin.settings.showGeorgianDates = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian4.Setting(containerEl).setName("\u0646\u0645\u0627\u06CC\u0634 \u062A\u0642\u0648\u06CC\u0645 \u0647\u062C\u0631\u06CC \u0642\u0645\u0631\u06CC").setDesc("\u0645\u06CC\u200C\u062A\u0648\u0627\u0646\u06CC\u062F \u0645\u0634\u062E\u0635 \u06A9\u0646\u06CC\u062F \u062A\u0642\u0648\u06CC\u0645 \u0647\u062C\u0631\u06CC \u0642\u0645\u0631\u06CC \u06A9\u0646\u0627\u0631 \u062A\u0642\u0648\u06CC\u0645 \u0647\u062C\u0631\u06CC \u0634\u0645\u0633\u06CC \u0646\u0645\u0627\u06CC\u0634 \u062F\u0627\u062F\u0647 \u0634\u0648\u062F.").addToggle((toggle) => toggle.setValue(this.plugin.settings.showHijriDates).onChange(async (value) => {
      this.plugin.settings.showHijriDates = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian4.Setting(containerEl).setName("\u0646\u0645\u0627\u06CC\u0634 \u0631\u0648\u0632\u0647\u0627\u06CC \u062A\u0639\u0637\u06CC\u0644 \u0631\u0633\u0645\u06CC \u062F\u0631 \u062A\u0642\u0648\u06CC\u0645").setDesc("\u0645\u0634\u062E\u0635 \u06A9\u0646\u06CC\u062F \u0622\u06CC\u0627 \u0645\u0627\u06CC\u0644\u06CC\u062F \u0631\u0648\u0632\u0647\u0627\u06CC \u062A\u0639\u0637\u06CC\u0644 \u0631\u0633\u0645\u06CC \u062F\u0631 \u062A\u0642\u0648\u06CC\u0645 \u0628\u0627 \u0631\u0646\u06AF \u0642\u0631\u0645\u0632 \u0646\u0645\u0627\u06CC\u0634 \u062F\u0627\u062F\u0647 \u0634\u0648\u0646\u062F \u06CC\u0627 \u062E\u06CC\u0631.").addToggle((toggle) => toggle.setValue(this.plugin.settings.showHolidays).onChange(async (value) => {
      this.plugin.settings.showHolidays = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian4.Setting(containerEl).setName("\u0631\u0648\u0632\u0647\u0627\u06CC \u062A\u0639\u0637\u06CC\u0644 \u0647\u0641\u062A\u0647").setDesc("\u0645\u0634\u062E\u0635 \u06A9\u0646\u06CC\u062F \u0686\u0647 \u0631\u0648\u0632\u0647\u0627\u06CC\u06CC \u062F\u0631 \u0647\u0641\u062A\u0647 \u0628\u0627 \u0631\u0646\u06AF \u0642\u0631\u0645\u0632  \u0628\u0647 \u0639\u0646\u0648\u0627\u0646 \u062A\u0639\u0637\u06CC\u0644\u06CC \u0646\u0645\u0627\u06CC\u0634 \u062F\u0627\u062F\u0647 \u0634\u0648\u0646\u062F").addDropdown((dropdown) => dropdown.addOption("friday", "\u062C\u0645\u0639\u0647").addOption("thursday-friday", "\u067E\u0646\u062C\u0634\u0646\u0628\u0647 \u0648 \u062C\u0645\u0639\u0647").addOption("friday-saturday", "\u062C\u0645\u0639\u0647 \u0648 \u0634\u0646\u0628\u0647").setValue(this.plugin.settings.weekendDays).onChange(async (value) => {
      this.plugin.settings.weekendDays = value;
      await this.plugin.saveSettings();
      this.plugin.refreshViews();
    }));
    new import_obsidian4.Setting(containerEl).setName("\u0646\u0645\u0627\u06CC\u0634 \u062A\u0639\u0637\u06CC\u0644\u0627\u062A \u0631\u0633\u0645\u06CC \u062A\u0642\u0648\u06CC\u0645 \u0627\u06CC\u0631\u0627\u0646").setDesc("\u0645\u0634\u062E\u0635 \u06A9\u0646\u06CC\u062F \u0622\u06CC\u0627 \u0645\u0627\u06CC\u0644\u06CC\u062F \u0631\u0648\u06CC\u062F\u0627\u062F\u0647\u0627\u06CC \u062A\u0642\u0648\u06CC\u0645 \u0631\u0633\u0645\u06CC \u0627\u06CC\u0631\u0627\u0646 \u062F\u0631 \u062A\u0648\u0644\u062A\u06CC\u067E \u0648 {{\u0645\u0646\u0627\u0633\u0628\u062A}} \u0646\u0645\u0627\u06CC\u0634 \u062F\u0627\u062F\u0647 \u0634\u0648\u062F \u06CC\u0627 \u062E\u06CC\u0631").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showOfficialIranianCalendar).onChange(async (value) => {
        this.plugin.settings.showOfficialIranianCalendar = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian4.Setting(containerEl).setName("\u0646\u0645\u0627\u06CC\u0634 \u0631\u0648\u06CC\u062F\u0627\u062F\u0647\u0627\u06CC \u062A\u0642\u0648\u06CC\u0645 \u0627\u06CC\u0631\u0627\u0646 \u0628\u0627\u0633\u062A\u0627\u0646").setDesc("\u0645\u0634\u062E\u0635 \u06A9\u0646\u06CC\u062F \u0622\u06CC\u0627 \u0645\u0627\u06CC\u0644\u06CC\u062F \u0631\u0648\u06CC\u062F\u0627\u062F\u0647\u0627\u06CC \u062A\u0642\u0648\u06CC\u0645 \u0627\u06CC\u0631\u0627\u0646 \u0628\u0627\u0633\u062A\u0627\u0646 \u062F\u0631 \u062A\u0648\u0644\u062A\u06CC\u067E \u0648 {{\u0645\u0646\u0627\u0633\u0628\u062A}} \u0646\u0645\u0627\u06CC\u0634 \u062F\u0627\u062F\u0647 \u0634\u0648\u062F \u06CC\u0627 \u062E\u06CC\u0631.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showAncientIranianCalendar).onChange(async (value) => {
        this.plugin.settings.showAncientIranianCalendar = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian4.Setting(containerEl).setName("\u0646\u0645\u0627\u06CC\u0634 \u0631\u0648\u06CC\u062F\u0627\u062F\u0647\u0627\u06CC \u062A\u0642\u0648\u06CC\u0645 \u0634\u06CC\u0639\u06CC").setDesc("\u0645\u0634\u062E\u0635 \u06A9\u0646\u06CC\u062F \u0622\u06CC\u0627 \u0645\u0627\u06CC\u0644\u06CC\u062F \u0631\u0648\u06CC\u062F\u0627\u062F\u0647\u0627\u06CC \u062A\u0642\u0648\u06CC\u0645 \u0634\u06CC\u0639\u06CC \u062F\u0631 \u062A\u0648\u0644\u062A\u06CC\u067E \u0648 {{\u0645\u0646\u0627\u0633\u0628\u062A}} \u0646\u0645\u0627\u06CC\u0634 \u062F\u0627\u062F\u0647 \u0634\u0648\u062F \u06CC\u0627 \u062E\u06CC\u0631.").addToggle(
      (toggle) => toggle.setValue(this.plugin.settings.showShiaCalendar).onChange(async (value) => {
        this.plugin.settings.showShiaCalendar = value;
        await this.plugin.saveSettings();
      })
    );
    new import_obsidian4.Setting(containerEl).setName("\u0645\u062F\u062A \u0632\u0645\u0627\u0646 \u062A\u0627\u062E\u06CC\u0631 \u062F\u0631 \u0627\u062C\u0631\u0627\u06CC {{\u0639\u0628\u0627\u0631\u062A\u200C\u0647\u0627\u06CC \u0645\u0639\u0646\u0627\u062F\u0627\u0631}}").setDesc("{{\u0639\u0628\u0627\u0631\u062A\u200C\u0647\u0627\u06CC \u0645\u0639\u0646\u0627\u062F\u0627\u0631}} \u067E\u0633 \u0627\u0632 \u0633\u0627\u062E\u062A\u0647 \u0634\u062F\u0646 \u0641\u0627\u06CC\u0644 \u0628\u0627 \u062A\u0627\u062E\u06CC\u0631 \u0632\u0645\u0627\u0646\u06CC \u0627\u062C\u0631\u0627 \u0645\u06CC\u200C\u06AF\u0631\u062F\u0646\u062F. \u062F\u0631 \u0633\u06CC\u0633\u062A\u0645\u200C\u0647\u0627\u06CC \u0628\u0627 \u0642\u062F\u0631\u062A \u067E\u0627\u06CC\u06CC\u0646 \u062A\u0631 \u0627\u06CC\u0646 \u0645\u0642\u062F\u0627\u0631 \u0631\u0627 \u0627\u0641\u0632\u0627\u06CC\u0634 \u062F\u0647\u06CC\u062F. (\u0645\u0642\u062F\u0627\u0631 \u067E\u06CC\u0634\u200C\u0641\u0631\u0636: 1250 \u0645\u06CC\u0644\u06CC\u200C\u062B\u0627\u0646\u06CC\u0647)").addText((text) => text.setPlaceholder("Enter timeout duration").setValue(this.plugin.settings.timeoutDuration.toString()).onChange(async (value) => {
      this.plugin.settings.timeoutDuration = parseInt(value);
      await this.plugin.saveSettings();
    }));
    const githubadvice = containerEl.createEl("p");
    githubadvice.appendText("\u067E\u06CC\u0634 \u0627\u0632 \u0647\u0631 \u0627\u0642\u062F\u0627\u0645\u06CC \u062A\u0648\u0635\u06CC\u0647 \u0645\u06CC\u200C\u06A9\u0646\u0645 \u0631\u0627\u0647\u0646\u0645\u0627\u06CC \u0627\u0641\u0632\u0648\u0646\u0647 \u062F\u0631 ");
    githubadvice.createEl("a", { text: "\u06AF\u06CC\u062A\u200C\u0647\u0627\u0628", href: "https://github.com/maleknejad/obsidian-persian-calendar" });
    githubadvice.appendText(" \u0631\u0627 \u0645\u0637\u0627\u0644\u0639\u0647 \u06A9\u0646\u06CC\u062F \u0648 \u0628\u0627 \u0648\u06CC\u0698\u06AF\u06CC\u200C\u0647\u0627\u06CC\u06CC \u06A9\u0647 \u0627\u06CC\u0646 \u0627\u0641\u0632\u0648\u0646\u0647 \u062F\u0631 \u0627\u062E\u062A\u06CC\u0627\u0631\u062A\u0627\u0646 \u0642\u0631\u0627\u0631 \u0645\u06CC\u200C\u062F\u0647\u062F \u0622\u0634\u0646\u0627 \u0634\u0648\u06CC\u062F.");
    containerEl.createEl("p", { text: '\u0645\u0633\u06CC\u0631\u0647\u0627 \u0631\u0627 \u0642\u0628\u0644 \u0627\u0632 \u062A\u0646\u0638\u06CC\u0645 \u06A9\u0631\u062F\u0646 \u062F\u0631 \u0627\u0628\u0633\u06CC\u062F\u06CC\u0646 \u0627\u06CC\u062C\u0627\u062F \u06A9\u0646\u06CC\u062F. \u0645\u0633\u06CC\u0631\u0647\u0627 \u0628\u0627\u06CC\u062F \u0628\u062F\u0648\u0646 "/" \u062F\u0631 \u0627\u0628\u062A\u062F\u0627\u06CC \u0622\u0646 \u0628\u0627\u0634\u062F.' });
    containerEl.createEl("p", { text: "\u0628\u0631\u0627\u06CC \u0627\u0639\u0645\u0627\u0644 \u062A\u063A\u06CC\u06CC\u0631\u0627\u062A\u060C \u0644\u0627\u0632\u0645 \u0627\u0633\u062A \u062A\u0642\u0648\u06CC\u0645 \u0631\u0627 \u0627\u0632 \u062A\u0646\u0638\u06CC\u0645\u0627\u062A \u0627\u0628\u0633\u06CC\u062F\u06CC\u0646 \u0645\u062C\u062F\u062F\u0627 \u0641\u0639\u0627\u0644 \u06A9\u0646\u06CC\u062F." });
    const templaterparagraph = containerEl.createEl("p");
    templaterparagraph.appendText("\u0628\u0631\u0627\u06CC \u062A\u0646\u0638\u06CC\u0645 \u06A9\u0631\u062F\u0646 \u0642\u0627\u0644\u0628 \u0628\u0631\u0627\u06CC \u0646\u0648\u0634\u062A\u0647\u200C\u0647\u0627 \u0645\u06CC\u200C\u062A\u0648\u0627\u0646\u06CC\u062F \u0627\u0632 \u0627\u0641\u0632\u0648\u0646\u0647 ");
    templaterparagraph.createEl("a", { text: "Templater", href: "https://github.com/SilentVoid13/Templater" }), templaterparagraph.appendText(" \u0627\u0633\u062A\u0641\u0627\u062F\u0647 \u06A9\u0646\u06CC\u062F. \u0631\u0627\u0647\u0646\u0645\u0627\u06CC \u0627\u0633\u062A\u0641\u0627\u062F\u0647 \u0627\u0632 \u0622\u0646 \u062F\u0631 "), templaterparagraph.createEl("a", { text: "\u06AF\u06CC\u062A\u200C\u0647\u0627\u0628", href: "https://github.com/maleknejad/obsidian-persian-calendar/" }), templaterparagraph.appendText(" \u0646\u0648\u0634\u062A\u0647 \u0634\u062F\u0647 \u0627\u0633\u062A. \u062D\u062A\u0645\u0627 \u0631\u0627\u0647\u0646\u0645\u0627\u06CC \u0627\u0641\u0632\u0648\u0646\u0647 \u0631\u0627 \u0645\u0637\u0627\u0644\u0639\u0647 \u06A9\u0646\u06CC\u062F.");
    const paragraph = containerEl.createEl("p");
    paragraph.appendText("\u062F\u0631 \u0635\u0648\u0631\u062A \u0645\u0634\u0627\u0647\u062F\u0647 \u0628\u0627\u06AF \u0648 \u06CC\u0627 \u0627\u0631\u0627\u0626\u0647 \u067E\u06CC\u0634\u0646\u0647\u0627\u062F \u0648 \u06CC\u0627 \u062F\u0631\u062E\u0648\u0627\u0633\u062A \u0631\u0627\u0647\u0646\u0645\u0627\u06CC\u06CC \u0644\u0637\u0641\u0627 \u062F\u0631 ");
    paragraph.createEl("a", { text: "\u06AF\u06CC\u062A\u200C\u0647\u0627\u0628", href: "https://github.com/maleknejad/obsidian-persian-calendar/" }), paragraph.appendText(" \u0628\u0647 \u0627\u0634\u062A\u0631\u0627\u06A9 \u0628\u06AF\u0630\u0627\u0631\u06CC\u062F."), paragraph.createEl("br"), paragraph.createEl("br"), paragraph.createEl("br"), paragraph.appendText(" \u200C\u062A\u0648\u0633\u0639\u0647\u200C\u06CC\u0627\u0641\u062A\u0647 \u062A\u0648\u0633\u0637 \u062D\u0633\u06CC\u0646 \u0645\u0644\u06A9 \u0646\u0698\u0627\u062F\u060C \u0628\u0631\u0627\u06CC \u062D\u0645\u0627\u06CC\u062A \u0648 \u067E\u06CC\u06AF\u06CC\u0631\u06CC \u062A\u0648\u0633\u0639\u0647 \u067E\u0644\u0627\u06AF\u06CC\u0646\u200C\u0647\u0627\u06CC \u0627\u0628\u0633\u06CC\u062F\u06CC\u0646 "), paragraph.createEl("a", { text: "\u06A9\u0627\u0631\u0641\u06A9\u0631", href: "https://t.me/karfekr" }), paragraph.appendText(" \u0631\u0627 \u062F\u0646\u0628\u0627\u0644 \u06A9\u0646\u06CC\u062F."), paragraph.createEl("br"), paragraph.appendText(" \u0646\u0633\u062E\u0647 3.0.1");
  }
  addPathSetting(containerEl, name, settingKey) {
    new import_obsidian4.Setting(containerEl).setName(name).addText((text) => text.setPlaceholder("Path/for/notes").setValue(this.plugin.settings[settingKey]).onChange(async (value) => {
      this.plugin.settings[settingKey] = value;
      await this.plugin.saveSettings();
    }));
  }
};

// src/main.ts
var PersianCalendarPlugin = class extends import_obsidian5.Plugin {
  constructor() {
    super(...arguments);
    this.settings = DEFAULT_SETTINGS;
    this.plugin = this;
  }
  async onload() {
    await this.loadSettings();
    this.registerView(
      "persian-calendar",
      (leaf) => this.view = new PersianCalendarView(leaf, this.app, this.settings, this.plugin)
    );
    if (this.app.workspace.getLeavesOfType("persian-calendar").length === 0) {
      this.activateView();
    }
    this.addRibbonIcon("calendar", "\u0631\u0648\u0632\u0646\u0648\u0634\u062A \u0627\u0645\u0631\u0648\u0632", async () => {
      const today = new Date();
      const todayJalaali = (0, import_jalaali_js5.toJalaali)(today);
      const dayNumber = todayJalaali.jd;
      openNoteForDate(todayJalaali.jy, todayJalaali.jm, dayNumber);
    });
    super.onload();
    this.registerEditorSuggest(new DateSuggester(this));
    this.dateSuggester = new DateSuggester(this);
    this.pluginsettingstab = new PersianCalendarSettingTab(this.app, this);
    this.placeholder = new PersianPlaceholders(this);
    this.announceUpdate();
    this.registerEvent(this.app.vault.on("create", (file) => {
      if (file instanceof import_obsidian5.TFile && file.path.endsWith(".md")) {
        this.handleFileUpdate(file, true);
        const fileCreationTime = file.stat.ctime;
        const now = Date.now();
        const timeDiff = now - fileCreationTime;
        if (timeDiff < 1e4) {
          if (this.placeholder) {
            this.placeholder.insertPersianDate(file);
          } else {
            console.error("Placeholder is not initialized");
          }
        } else {
          console.log("File is not newly created or too old for processing:", file.path);
        }
      }
    }));
    this.registerEvent(this.app.vault.on("delete", (file) => {
      if (file instanceof import_obsidian5.TFile && file.path.endsWith(".md")) {
        this.handleFileUpdate(file, false);
      }
    }));
    this.addSettingTab(new PersianCalendarSettingTab(this.app, this));
    this.addCommand({
      id: "open-todays-daily-note",
      name: "Today - \u0628\u0627\u0632 \u06A9\u0631\u062F\u0646 \u0631\u0648\u0632\u0646\u0648\u0634\u062A \u0627\u0645\u0631\u0648\u0632",
      callback: async () => {
        const today = new Date();
        const todayJalaali = (0, import_jalaali_js5.toJalaali)(today);
        const dayNumber = todayJalaali.jd;
        openNoteForDate(todayJalaali.jy, todayJalaali.jm, dayNumber);
      }
    });
    this.addCommand({
      id: "open-tomorrow-daily-note",
      name: "Tomorrow - \u0628\u0627\u0632 \u06A9\u0631\u062F\u0646 \u0631\u0648\u0632\u0646\u0648\u0634\u062A \u0641\u0631\u062F\u0627",
      callback: async () => {
        const tomorrow = new Date();
        tomorrow.setDate(tomorrow.getDate() + 1);
        const tomorrowJalaali = (0, import_jalaali_js5.toJalaali)(tomorrow);
        const dayNumber = tomorrowJalaali.jd;
        openNoteForDate(tomorrowJalaali.jy, tomorrowJalaali.jm, dayNumber);
      }
    });
    this.addCommand({
      id: "open-yesterday-daily-note",
      name: "Yesterday - \u0628\u0627\u0632 \u06A9\u0631\u062F\u0646 \u0631\u0648\u0632\u0646\u0648\u0634\u062A \u062F\u06CC\u0631\u0648\u0632",
      callback: async () => {
        const yesterday = new Date();
        yesterday.setDate(yesterday.getDate() - 1);
        const yesterdayJalaali = (0, import_jalaali_js5.toJalaali)(yesterday);
        const dayNumber = yesterdayJalaali.jd;
        openNoteForDate(yesterdayJalaali.jy, yesterdayJalaali.jm, dayNumber);
      }
    });
    this.addCommand({
      id: "open-persian-calendar-view",
      name: "Open Persian Calendar View - \u0628\u0627\u0632 \u06A9\u0631\u062F\u0646 \u062A\u0642\u0648\u06CC\u0645 \u0641\u0627\u0631\u0633\u06CC",
      callback: async () => {
        await this.activateView();
      }
    });
    this.addCommand({
      id: "open-this-weeks-note",
      name: "Weekly - \u0628\u0627\u0632 \u06A9\u0631\u062F\u0646 \u0647\u0641\u062A\u0647\u200C\u0646\u0648\u0634\u062A \u0627\u06CC\u0646 \u0647\u0641\u062A\u0647",
      callback: async () => {
        const today = new Date();
        const todayJalaali = (0, import_jalaali_js5.toJalaali)(today);
        const currentWeekNumber = this.calculateCurrentWeekNumber(todayJalaali);
        const leaf = this.app.workspace.getLeavesOfType("persian-calendar")[0];
        if (leaf) {
          const view = leaf.view;
          if (view instanceof PersianCalendarView) {
            view.openOrCreateWeeklyNote(currentWeekNumber, todayJalaali.jy);
          }
        } else {
          console.error("Persian Calendar view is not open.");
        }
      }
    });
    this.addCommand({
      id: "open-current-quarterly-note",
      name: "\u0652Quarterly - \u0628\u0627\u0632 \u06A9\u0631\u062F\u0646 \u0641\u0635\u0644 \u0646\u0648\u0634\u062A \u0627\u06CC\u0646 \u0641\u0635\u0644",
      callback: async () => {
        const leaf = this.app.workspace.getLeavesOfType("persian-calendar")[0];
        if (leaf && leaf.view instanceof PersianCalendarView) {
          const { quarter, jy } = leaf.view.getCurrentQuarter();
          await leaf.view.openOrCreateQuarterlyNote(quarter, jy);
        } else {
          new import_obsidian5.Notice("Persian Calendar view is not open. Please open the Persian Calendar first.");
        }
      }
    });
    this.addCommand({
      id: "open-current-months-note",
      name: "Monthly - \u0628\u0627\u0632\u06A9\u0631\u062F\u0646 \u0645\u0627\u0647\u200C\u0646\u0648\u0634\u062A \u0627\u06CC\u0646 \u0645\u0627\u0647",
      callback: async () => {
        const today = new Date();
        const todayJalaali = (0, import_jalaali_js5.toJalaali)(today);
        const jy = todayJalaali.jy;
        const month = todayJalaali.jm;
        const leaf = this.app.workspace.getLeavesOfType("persian-calendar")[0];
        if (leaf) {
          const view = leaf.view;
          if (view instanceof PersianCalendarView) {
            await view.openOrCreateMonthlyNote(month, jy);
          }
        } else {
          console.error("Persian Calendar view is not open. Please open the Persian Calendar first.");
        }
      }
    });
    this.addCommand({
      id: "open-current-years-note",
      name: "Yearly - \u0628\u0627\u0632 \u06A9\u0631\u062F\u0646 \u0633\u0627\u0644\u200C\u0646\u0648\u0634\u062A \u0627\u0645\u0633\u0627\u0644",
      callback: async () => {
        const today = new Date();
        const todayJalaali = (0, import_jalaali_js5.toJalaali)(today);
        const jy = todayJalaali.jy;
        const leaf = this.app.workspace.getLeavesOfType("persian-calendar")[0];
        if (leaf) {
          const view = leaf.view;
          if (view instanceof PersianCalendarView) {
            await view.openOrCreateYearlyNote(jy);
          }
        } else {
          console.error("Persian Calendar view is not open. Please open the Persian Calendar first.");
        }
      }
    });
    this.addCommand({
      id: "convert-date",
      // For my friend, Amir Napster.
      name: "Convert Date Format - \u062A\u0628\u062F\u06CC\u0644 \u062A\u0627\u0631\u06CC\u062E \u0628\u06CC\u0646 \u0634\u0645\u0633\u06CC \u0648 \u0645\u06CC\u0644\u0627\u062F\u06CC",
      checkCallback: (checking) => {
        var _a;
        const editor = (_a = this.app.workspace.getActiveViewOfType(import_obsidian5.MarkdownView)) == null ? void 0 : _a.editor;
        if (editor) {
          const cursorPos = editor.getCursor();
          const lineText = editor.getLine(cursorPos.line);
          const hasDate = /(\d{4}[\/\-]\d{1,2}[\/\-]\d{1,2}|\d{8})/.test(lineText);
          if (checking) {
            return hasDate;
          } else if (hasDate) {
            this.convertDate(editor, cursorPos.line, lineText);
          }
        }
        return false;
      }
    });
    this.addCommand({
      id: "convert-to-date",
      name: "Link Text to Periodic Note - \u0627\u0631\u062C\u0627\u0639 \u0645\u062A\u0646 \u0628\u0647 \u06CC\u0627\u062F\u062F\u0627\u0634\u062A\u200C\u0647\u0627\u06CC \u062F\u0648\u0631\u0647\u200C\u0627\u06CC",
      editorCallback: (editor, view) => {
        var _a;
        (_a = this.dateSuggester) == null ? void 0 : _a.convertTextToDate(editor);
      }
    });
    const openNoteForDate = (year, month, dayNumber) => {
      const leaf = this.app.workspace.getLeavesOfType("persian-calendar")[0];
      if (leaf) {
        const view = leaf.view;
        if (view instanceof PersianCalendarView) {
          view.openOrCreateDailyNote(dayNumber);
        }
      } else {
        console.error("Persian Calendar view is not open.");
      }
    };
  }
  convertDate(editor, lineIndex, textLine) {
    const regex = /(\d{4})[\/\-]?(\d{1,2})[\/\-]?(\d{1,2})/g;
    let match;
    while ((match = regex.exec(textLine)) !== null) {
      const [fullMatch, year, month, day] = match;
      if (parseInt(year) > 1500) {
        const persianDate = (0, import_jalaali_js5.toJalaali)(parseInt(year), parseInt(month), parseInt(day));
        const formatted = `${persianDate.jy}-${persianDate.jm.toString().padStart(2, "0")}-${persianDate.jd.toString().padStart(2, "0")}`;
        editor.replaceRange(formatted, { line: lineIndex, ch: match.index }, { line: lineIndex, ch: match.index + fullMatch.length });
      } else {
        const georgianDate = (0, import_jalaali_js5.toGregorian)(parseInt(year), parseInt(month), parseInt(day));
        const formatted = `${georgianDate.gy}-${georgianDate.gm.toString().padStart(2, "0")}-${georgianDate.gd.toString().padStart(2, "0")}`;
        editor.replaceRange(formatted, { line: lineIndex, ch: match.index }, { line: lineIndex, ch: match.index + fullMatch.length });
      }
    }
  }
  announceUpdate() {
    const currentVersion = this.manifest.version;
    const knownVersion = this.settings.version;
    if (currentVersion === knownVersion)
      return;
    this.settings.version = currentVersion;
    void this.saveSettings();
    if (this.settings.announceUpdates === false)
      return;
    const updateModal = new UpdateModal(this.app);
    updateModal.open();
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  async handleFileUpdate(file, isCreation) {
    var _a;
    const view = (_a = this.app.workspace.getLeavesOfType("persian-calendar")[0]) == null ? void 0 : _a.view;
    if (view instanceof PersianCalendarView) {
      view.refreshCalendarDots(file, isCreation);
    }
  }
  calculateCurrentWeekNumber(jalaaliDate) {
    import_moment_jalaali4.default.loadPersian({ usePersianDigits: false, dialect: "persian-modern" });
    const currentDate = (0, import_moment_jalaali4.default)(`${jalaaliDate.jy}/${jalaaliDate.jm}/${jalaaliDate.jd}`, "jYYYY/jM/jD");
    const currentWeekNumber = currentDate.jWeek();
    return currentWeekNumber;
  }
  async activateView() {
    const leaf = this.app.workspace.getRightLeaf(false);
    await leaf.setViewState({
      type: "persian-calendar",
      active: true
    });
    this.app.workspace.revealLeaf(leaf);
  }
  refreshViews() {
    if (this.app.workspace.getLeavesOfType("persian-calendar").length > 0) {
      this.app.workspace.getLeavesOfType("persian-calendar").forEach((leaf) => {
        if (leaf.view instanceof PersianCalendarView) {
          leaf.view.render();
        }
      });
    }
  }
  onunload() {
    this.app.workspace.getLeavesOfType("persian-calendar").forEach((leaf) => leaf.detach());
  }
};
/*! Bundled license information:

moment/moment.js:
  (*! moment.js *)
  (*! version : 2.30.1 *)
  (*! authors : Tim Wood, Iskren Chernev, Moment.js contributors *)
  (*! license : MIT *)
  (*! momentjs.com *)
*/

/* nosourcemap */